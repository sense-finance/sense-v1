{
  "address": "0xAe90a191999DfA22d42c2D704f4712D6eb3cB0B3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_divider",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_spaceFactory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_balancerVault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_permit2",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_exchangeProxy",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ExistingValue",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FactoryNotSupported",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FlashBorrowFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FlashUntrustedBorrower",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FlashUntrustedLoanInitiator",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidExchangeProxy",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyPeriphery",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyPermissionless",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SwapTooSmall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnexpectedSwapAmount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "ZeroExSwapFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroSwapAmt",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "adapter",
          "type": "address"
        }
      ],
      "name": "AdapterDeployed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "adapter",
          "type": "address"
        }
      ],
      "name": "AdapterOnboarded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "adapter",
          "type": "address"
        }
      ],
      "name": "AdapterVerified",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sellToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sellAmount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "boughtAmount",
          "type": "uint256"
        }
      ],
      "name": "BoughtTokens",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "isOn",
          "type": "bool"
        }
      ],
      "name": "FactoryChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "adapter",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sponsor",
          "type": "address"
        }
      ],
      "name": "SeriesSponsored",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldSpaceFactory",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newSpaceFactory",
          "type": "address"
        }
      ],
      "name": "SpaceFactoryChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "poolId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "assetIn",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "assetOut",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bytes4",
          "name": "sig",
          "type": "bytes4"
        }
      ],
      "name": "Swapped",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "trusted",
          "type": "bool"
        }
      ],
      "name": "UserTrustUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "adapter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "targetIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "targetReturned",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ytOut",
          "type": "uint256"
        }
      ],
      "name": "YTsPurchased",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ETH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_YT_SWAP_IN",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRICE_ESTIMATE_ACCEPTABLE_ERROR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "adapter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amt",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "minAccepted",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minBptOut",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct Periphery.AddLiquidityParams",
          "name": "params",
          "type": "tuple"
        },
        {
          "internalType": "uint8",
          "name": "mode",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "components": [
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "contract ERC20",
                      "name": "token",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "amount",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct IPermit2.TokenPermissions",
                  "name": "permitted",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "nonce",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "deadline",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IPermit2.PermitTransferFrom",
              "name": "msg",
              "type": "tuple"
            },
            {
              "internalType": "bytes",
              "name": "sig",
              "type": "bytes"
            }
          ],
          "internalType": "struct Periphery.PermitData",
          "name": "permit",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "contract ERC20",
              "name": "sellToken",
              "type": "address"
            },
            {
              "internalType": "contract ERC20",
              "name": "buyToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "internalType": "address payable",
              "name": "swapTarget",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "swapCallData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Periphery.SwapQuote",
          "name": "quote",
          "type": "tuple"
        }
      ],
      "name": "addLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "issued",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lpShares",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balancerVault",
      "outputs": [
        {
          "internalType": "contract BalancerVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "adapter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "uBal",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "components": [
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "contract ERC20",
                      "name": "token",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "amount",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct IPermit2.TokenPermissions[]",
                  "name": "permitted",
                  "type": "tuple[]"
                },
                {
                  "internalType": "uint256",
                  "name": "nonce",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "deadline",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IPermit2.PermitBatchTransferFrom",
              "name": "msg",
              "type": "tuple"
            },
            {
              "internalType": "bytes",
              "name": "sig",
              "type": "bytes"
            }
          ],
          "internalType": "struct Periphery.PermitBatchData",
          "name": "permit",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "contract ERC20",
              "name": "sellToken",
              "type": "address"
            },
            {
              "internalType": "contract ERC20",
              "name": "buyToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "internalType": "address payable",
              "name": "swapTarget",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "swapCallData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Periphery.SwapQuote",
          "name": "quote",
          "type": "tuple"
        }
      ],
      "name": "combine",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amt",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "f",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "deployAdapter",
      "outputs": [
        {
          "internalType": "address",
          "name": "adapter",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "divider",
      "outputs": [
        {
          "internalType": "contract Divider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exchangeProxy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "factories",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isTrusted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "adapter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amt",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "components": [
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "contract ERC20",
                      "name": "token",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "amount",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct IPermit2.TokenPermissions",
                  "name": "permitted",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "nonce",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "deadline",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IPermit2.PermitTransferFrom",
              "name": "msg",
              "type": "tuple"
            },
            {
              "internalType": "bytes",
              "name": "sig",
              "type": "bytes"
            }
          ],
          "internalType": "struct Periphery.PermitData",
          "name": "permit",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "contract ERC20",
              "name": "sellToken",
              "type": "address"
            },
            {
              "internalType": "contract ERC20",
              "name": "buyToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "internalType": "address payable",
              "name": "swapTarget",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "swapCallData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Periphery.SwapQuote",
          "name": "quote",
          "type": "tuple"
        }
      ],
      "name": "issue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "uBal",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "initiator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountBorrrowed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "onFlashLoan",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "adapter",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "addAdapter",
          "type": "bool"
        }
      ],
      "name": "onboardAdapter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "permit2",
      "outputs": [
        {
          "internalType": "contract IPermit2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "adapter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lpBal",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "minAccepted",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "minAmountsOut",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct Periphery.RemoveLiquidityParams",
          "name": "params",
          "type": "tuple"
        },
        {
          "internalType": "bool",
          "name": "swapPTs",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "components": [
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "contract ERC20",
                      "name": "token",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "amount",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct IPermit2.TokenPermissions",
                  "name": "permitted",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "nonce",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "deadline",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IPermit2.PermitTransferFrom",
              "name": "msg",
              "type": "tuple"
            },
            {
              "internalType": "bytes",
              "name": "sig",
              "type": "bytes"
            }
          ],
          "internalType": "struct Periphery.PermitData",
          "name": "permit",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "contract ERC20",
              "name": "sellToken",
              "type": "address"
            },
            {
              "internalType": "contract ERC20",
              "name": "buyToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "internalType": "address payable",
              "name": "swapTarget",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "swapCallData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Periphery.SwapQuote",
          "name": "quote",
          "type": "tuple"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ptBal",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "f",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isOn",
          "type": "bool"
        }
      ],
      "name": "setFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "trusted",
          "type": "bool"
        }
      ],
      "name": "setIsTrusted",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newSpaceFactory",
          "type": "address"
        }
      ],
      "name": "setSpaceFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "spaceFactory",
      "outputs": [
        {
          "internalType": "contract SpaceFactoryLike",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "adapter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "withPool",
          "type": "bool"
        },
        {
          "components": [
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "contract ERC20",
                      "name": "token",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "amount",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct IPermit2.TokenPermissions",
                  "name": "permitted",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "nonce",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "deadline",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IPermit2.PermitTransferFrom",
              "name": "msg",
              "type": "tuple"
            },
            {
              "internalType": "bytes",
              "name": "sig",
              "type": "bytes"
            }
          ],
          "internalType": "struct Periphery.PermitData",
          "name": "permit",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "contract ERC20",
              "name": "sellToken",
              "type": "address"
            },
            {
              "internalType": "contract ERC20",
              "name": "buyToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "internalType": "address payable",
              "name": "swapTarget",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "swapCallData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Periphery.SwapQuote",
          "name": "quote",
          "type": "tuple"
        }
      ],
      "name": "sponsorSeries",
      "outputs": [
        {
          "internalType": "address",
          "name": "pt",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "yt",
          "type": "address"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "adapter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "withPool",
          "type": "bool"
        }
      ],
      "name": "sponsorSeries",
      "outputs": [
        {
          "internalType": "address",
          "name": "pt",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "yt",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "adapter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minAccepted",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "components": [
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "contract ERC20",
                      "name": "token",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "amount",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct IPermit2.TokenPermissions",
                  "name": "permitted",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "nonce",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "deadline",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IPermit2.PermitTransferFrom",
              "name": "msg",
              "type": "tuple"
            },
            {
              "internalType": "bytes",
              "name": "sig",
              "type": "bytes"
            }
          ],
          "internalType": "struct Periphery.PermitData",
          "name": "permit",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "contract ERC20",
              "name": "sellToken",
              "type": "address"
            },
            {
              "internalType": "contract ERC20",
              "name": "buyToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "internalType": "address payable",
              "name": "swapTarget",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "swapCallData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Periphery.SwapQuote",
          "name": "quote",
          "type": "tuple"
        }
      ],
      "name": "swapForPTs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "ptBal",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "adapter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "targetToBorrow",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minAccepted",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "components": [
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "contract ERC20",
                      "name": "token",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "amount",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct IPermit2.TokenPermissions",
                  "name": "permitted",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "nonce",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "deadline",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IPermit2.PermitTransferFrom",
              "name": "msg",
              "type": "tuple"
            },
            {
              "internalType": "bytes",
              "name": "sig",
              "type": "bytes"
            }
          ],
          "internalType": "struct Periphery.PermitData",
          "name": "permit",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "contract ERC20",
              "name": "sellToken",
              "type": "address"
            },
            {
              "internalType": "contract ERC20",
              "name": "buyToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "internalType": "address payable",
              "name": "swapTarget",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "swapCallData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Periphery.SwapQuote",
          "name": "quote",
          "type": "tuple"
        }
      ],
      "name": "swapForYTs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "targetBal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ytBal",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "adapter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ptBal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minAccepted",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "components": [
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "contract ERC20",
                      "name": "token",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "amount",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct IPermit2.TokenPermissions",
                  "name": "permitted",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "nonce",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "deadline",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IPermit2.PermitTransferFrom",
              "name": "msg",
              "type": "tuple"
            },
            {
              "internalType": "bytes",
              "name": "sig",
              "type": "bytes"
            }
          ],
          "internalType": "struct Periphery.PermitData",
          "name": "permit",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "contract ERC20",
              "name": "sellToken",
              "type": "address"
            },
            {
              "internalType": "contract ERC20",
              "name": "buyToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "internalType": "address payable",
              "name": "swapTarget",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "swapCallData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Periphery.SwapQuote",
          "name": "quote",
          "type": "tuple"
        }
      ],
      "name": "swapPTs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amt",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "adapter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ytBal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minAccepted",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "components": [
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "contract ERC20",
                      "name": "token",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "amount",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct IPermit2.TokenPermissions",
                  "name": "permitted",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "nonce",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "deadline",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IPermit2.PermitTransferFrom",
              "name": "msg",
              "type": "tuple"
            },
            {
              "internalType": "bytes",
              "name": "sig",
              "type": "bytes"
            }
          ],
          "internalType": "struct Periphery.PermitData",
          "name": "permit",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "contract ERC20",
              "name": "sellToken",
              "type": "address"
            },
            {
              "internalType": "contract ERC20",
              "name": "buyToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "internalType": "address payable",
              "name": "swapTarget",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "swapCallData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Periphery.SwapQuote",
          "name": "quote",
          "type": "tuple"
        }
      ],
      "name": "swapYTs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amt",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "adapter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ytBal",
          "type": "uint256"
        }
      ],
      "name": "swapYTsForTarget",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amt",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "adapter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ytBal",
          "type": "uint256"
        },
        {
          "components": [
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "contract ERC20",
                      "name": "token",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "amount",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct IPermit2.TokenPermissions",
                  "name": "permitted",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "nonce",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "deadline",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IPermit2.PermitTransferFrom",
              "name": "msg",
              "type": "tuple"
            },
            {
              "internalType": "bytes",
              "name": "sig",
              "type": "bytes"
            }
          ],
          "internalType": "struct Periphery.PermitData",
          "name": "permit",
          "type": "tuple"
        }
      ],
      "name": "swapYTsForTargetHelper",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amt",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "verified",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "adapter",
          "type": "address"
        }
      ],
      "name": "verifyAdapter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x1043673cd86d63c569011e048bfa24cb5b6e21039f6b6504f18b2cbfc7da413e",
  "receipt": {
    "to": null,
    "from": "0x59A181710F926Eae6FddfbF27a14259E8DD00cA2",
    "contractAddress": "0xAe90a191999DfA22d42c2D704f4712D6eb3cB0B3",
    "transactionIndex": 65,
    "gasUsed": "5338380",
    "logsBloom": "0x
    "blockHash": "0x541e6dc8e5235f0433843dde55ae531f71eb890c1e7509262d85cab61f7137fe",
    "transactionHash": "0x1043673cd86d63c569011e048bfa24cb5b6e21039f6b6504f18b2cbfc7da413e",
    "logs": [
      {
        "transactionIndex": 65,
        "blockNumber": 17776111,
        "transactionHash": "0x1043673cd86d63c569011e048bfa24cb5b6e21039f6b6504f18b2cbfc7da413e",
        "address": "0xAe90a191999DfA22d42c2D704f4712D6eb3cB0B3",
        "topics": [
          "0xe95aec380cae16330d146d5499ef7db6f3657e477104a733e771bc09e500d986",
          "0x00000000000000000000000059a181710f926eae6fddfbf27a14259e8dd00ca2"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 160,
        "blockHash": "0x541e6dc8e5235f0433843dde55ae531f71eb890c1e7509262d85cab61f7137fe"
      }
    ],
    "blockNumber": 17776111,
    "cumulativeGasUsed": "11992266",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x86bA3E96Be68563E41c2f5769F1AF9fAf758e6E0",
    "0x9e629751b3FE0b030C219e567156adCB70ad5541",
    "0xBA12222222228d8Ba445958a75a0704d566BF2C8",
    "0x000000000022D473030F116dDEE9F6B43aC78BA3",
    "0xDef1C0ded9bec7F1a1670819833240f027b25EfF"
  ],
  "numDeployments": 1,
  "solcInputHash": "81eb9074076a54e3a0390f7f76fe2da8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_divider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spaceFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_balancerVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_permit2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_exchangeProxy\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ExistingValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FactoryNotSupported\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FlashBorrowFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FlashUntrustedBorrower\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FlashUntrustedLoanInitiator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidExchangeProxy\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyPeriphery\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyPermissionless\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SwapTooSmall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnexpectedSwapAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"ZeroExSwapFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroSwapAmt\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"}],\"name\":\"AdapterDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"}],\"name\":\"AdapterOnboarded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"}],\"name\":\"AdapterVerified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"boughtAmount\",\"type\":\"uint256\"}],\"name\":\"BoughtTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"isOn\",\"type\":\"bool\"}],\"name\":\"FactoryChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"}],\"name\":\"SeriesSponsored\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldSpaceFactory\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newSpaceFactory\",\"type\":\"address\"}],\"name\":\"SpaceFactoryChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"assetIn\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"assetOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"sig\",\"type\":\"bytes4\"}],\"name\":\"Swapped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"trusted\",\"type\":\"bool\"}],\"name\":\"UserTrustUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"targetIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"targetReturned\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ytOut\",\"type\":\"uint256\"}],\"name\":\"YTsPurchased\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_YT_SWAP_IN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRICE_ESTIMATE_ACCEPTABLE_ERROR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"minAccepted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBptOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct Periphery.AddLiquidityParams\",\"name\":\"params\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"mode\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"contract ERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IPermit2.TokenPermissions\",\"name\":\"permitted\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct IPermit2.PermitTransferFrom\",\"name\":\"msg\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"internalType\":\"struct Periphery.PermitData\",\"name\":\"permit\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contract ERC20\",\"name\":\"sellToken\",\"type\":\"address\"},{\"internalType\":\"contract ERC20\",\"name\":\"buyToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"swapTarget\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"swapCallData\",\"type\":\"bytes\"}],\"internalType\":\"struct Periphery.SwapQuote\",\"name\":\"quote\",\"type\":\"tuple\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"issued\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpShares\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balancerVault\",\"outputs\":[{\"internalType\":\"contract BalancerVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"uBal\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"contract ERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IPermit2.TokenPermissions[]\",\"name\":\"permitted\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct IPermit2.PermitBatchTransferFrom\",\"name\":\"msg\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"internalType\":\"struct Periphery.PermitBatchData\",\"name\":\"permit\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contract ERC20\",\"name\":\"sellToken\",\"type\":\"address\"},{\"internalType\":\"contract ERC20\",\"name\":\"buyToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"swapTarget\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"swapCallData\",\"type\":\"bytes\"}],\"internalType\":\"struct Periphery.SwapQuote\",\"name\":\"quote\",\"type\":\"tuple\"}],\"name\":\"combine\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"f\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"deployAdapter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"divider\",\"outputs\":[{\"internalType\":\"contract Divider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"factories\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isTrusted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"contract ERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IPermit2.TokenPermissions\",\"name\":\"permitted\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct IPermit2.PermitTransferFrom\",\"name\":\"msg\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"internalType\":\"struct Periphery.PermitData\",\"name\":\"permit\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contract ERC20\",\"name\":\"sellToken\",\"type\":\"address\"},{\"internalType\":\"contract ERC20\",\"name\":\"buyToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"swapTarget\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"swapCallData\",\"type\":\"bytes\"}],\"internalType\":\"struct Periphery.SwapQuote\",\"name\":\"quote\",\"type\":\"tuple\"}],\"name\":\"issue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"uBal\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountBorrrowed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onFlashLoan\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"addAdapter\",\"type\":\"bool\"}],\"name\":\"onboardAdapter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"permit2\",\"outputs\":[{\"internalType\":\"contract IPermit2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpBal\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"minAccepted\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"minAmountsOut\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct Periphery.RemoveLiquidityParams\",\"name\":\"params\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"swapPTs\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"contract ERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IPermit2.TokenPermissions\",\"name\":\"permitted\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct IPermit2.PermitTransferFrom\",\"name\":\"msg\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"internalType\":\"struct Periphery.PermitData\",\"name\":\"permit\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contract ERC20\",\"name\":\"sellToken\",\"type\":\"address\"},{\"internalType\":\"contract ERC20\",\"name\":\"buyToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"swapTarget\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"swapCallData\",\"type\":\"bytes\"}],\"internalType\":\"struct Periphery.SwapQuote\",\"name\":\"quote\",\"type\":\"tuple\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ptBal\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"f\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isOn\",\"type\":\"bool\"}],\"name\":\"setFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"trusted\",\"type\":\"bool\"}],\"name\":\"setIsTrusted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newSpaceFactory\",\"type\":\"address\"}],\"name\":\"setSpaceFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"spaceFactory\",\"outputs\":[{\"internalType\":\"contract SpaceFactoryLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"withPool\",\"type\":\"bool\"},{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"contract ERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IPermit2.TokenPermissions\",\"name\":\"permitted\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct IPermit2.PermitTransferFrom\",\"name\":\"msg\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"internalType\":\"struct Periphery.PermitData\",\"name\":\"permit\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contract ERC20\",\"name\":\"sellToken\",\"type\":\"address\"},{\"internalType\":\"contract ERC20\",\"name\":\"buyToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"swapTarget\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"swapCallData\",\"type\":\"bytes\"}],\"internalType\":\"struct Periphery.SwapQuote\",\"name\":\"quote\",\"type\":\"tuple\"}],\"name\":\"sponsorSeries\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"yt\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"withPool\",\"type\":\"bool\"}],\"name\":\"sponsorSeries\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"yt\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAccepted\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"contract ERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IPermit2.TokenPermissions\",\"name\":\"permitted\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct IPermit2.PermitTransferFrom\",\"name\":\"msg\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"internalType\":\"struct Periphery.PermitData\",\"name\":\"permit\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contract ERC20\",\"name\":\"sellToken\",\"type\":\"address\"},{\"internalType\":\"contract ERC20\",\"name\":\"buyToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"swapTarget\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"swapCallData\",\"type\":\"bytes\"}],\"internalType\":\"struct Periphery.SwapQuote\",\"name\":\"quote\",\"type\":\"tuple\"}],\"name\":\"swapForPTs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ptBal\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetToBorrow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAccepted\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"contract ERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IPermit2.TokenPermissions\",\"name\":\"permitted\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct IPermit2.PermitTransferFrom\",\"name\":\"msg\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"internalType\":\"struct Periphery.PermitData\",\"name\":\"permit\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contract ERC20\",\"name\":\"sellToken\",\"type\":\"address\"},{\"internalType\":\"contract ERC20\",\"name\":\"buyToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"swapTarget\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"swapCallData\",\"type\":\"bytes\"}],\"internalType\":\"struct Periphery.SwapQuote\",\"name\":\"quote\",\"type\":\"tuple\"}],\"name\":\"swapForYTs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"targetBal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ytBal\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ptBal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAccepted\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"contract ERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IPermit2.TokenPermissions\",\"name\":\"permitted\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct IPermit2.PermitTransferFrom\",\"name\":\"msg\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"internalType\":\"struct Periphery.PermitData\",\"name\":\"permit\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contract ERC20\",\"name\":\"sellToken\",\"type\":\"address\"},{\"internalType\":\"contract ERC20\",\"name\":\"buyToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"swapTarget\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"swapCallData\",\"type\":\"bytes\"}],\"internalType\":\"struct Periphery.SwapQuote\",\"name\":\"quote\",\"type\":\"tuple\"}],\"name\":\"swapPTs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ytBal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAccepted\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"contract ERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IPermit2.TokenPermissions\",\"name\":\"permitted\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct IPermit2.PermitTransferFrom\",\"name\":\"msg\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"internalType\":\"struct Periphery.PermitData\",\"name\":\"permit\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contract ERC20\",\"name\":\"sellToken\",\"type\":\"address\"},{\"internalType\":\"contract ERC20\",\"name\":\"buyToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"swapTarget\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"swapCallData\",\"type\":\"bytes\"}],\"internalType\":\"struct Periphery.SwapQuote\",\"name\":\"quote\",\"type\":\"tuple\"}],\"name\":\"swapYTs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ytBal\",\"type\":\"uint256\"}],\"name\":\"swapYTsForTarget\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ytBal\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"contract ERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IPermit2.TokenPermissions\",\"name\":\"permitted\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct IPermit2.PermitTransferFrom\",\"name\":\"msg\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"internalType\":\"struct Periphery.PermitData\",\"name\":\"permit\",\"type\":\"tuple\"}],\"name\":\"swapYTsForTargetHelper\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"verified\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"}],\"name\":\"verifyAdapter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addLiquidity(address,uint256,uint256,(uint256,uint256,uint256),uint8,address,(((address,uint256),uint256,uint256),bytes),(address,address,uint256,address,address,bytes))\":{\"details\":\"see return description of _addLiquidityif quote.sellToken is neither target nor underlying, it will be swapped for underlying on 0x and wrapped into the target\",\"params\":{\"adapter\":\"Adapter address for the Series\",\"amt\":\"Amount to provide\",\"maturity\":\"Maturity date for the Series\",\"mode\":\"0 = issues and sell YT, 1 = issue and hold YT\",\"params\":\"AddLiquidityParams struct with the params for the addLiquidity call\",\"permit\":\"Permit to pull the tokens to swap from\",\"quote\":\"Quote with swap details\",\"receiver\":\"Address to receive the BPT\"}},\"combine(address,uint256,uint256,address,(((address,uint256)[],uint256,uint256),bytes),(address,address,uint256,address,address,bytes))\":{\"details\":\"if quote.buyToken is neither target nor underlying, it will unwrap target and swap it on 0x\",\"params\":{\"adapter\":\"Adapter address for the Series\",\"maturity\":\"Maturity date for the Series\",\"permit\":\"Permit to pull PT and YT\",\"quote\":\"Quote with swap details\",\"receiver\":\"Address where the resulting Target will be transferred\",\"uBal\":\"Amount of PT and YT to burn\"},\"returns\":{\"amt\":\"Amount of tokens received from reconstituting target\"}},\"deployAdapter(address,address,bytes)\":{\"details\":\"Called by external address, deploy a new Adapter via an Adapter Factory\",\"params\":{\"data\":\"Additional encoded data needed to deploy the adapter\",\"f\":\"Factory to use\",\"target\":\"Target to onboard\"}},\"issue(address,uint256,uint256,address,(((address,uint256),uint256,uint256),bytes),(address,address,uint256,address,address,bytes))\":{\"details\":\"The balance of PTs and YTs minted will be the same value in units of underlying (less fees)if quote.sellToken is neither target nor underlying, it will swap on 0x and wrap to target and swap it on 0x\",\"params\":{\"adapter\":\"Adapter address for the Series\",\"amt\":\"Amount to issue with\",\"maturity\":\"Maturity date for the Series [unix time]\",\"permit\":\"Permit to pull tokens\",\"quote\":\"Quote with swap details\",\"receiver\":\"Address where the resulting PTs and YTs will be transferred to\"},\"returns\":{\"uBal\":\"Amount of PTs and YTs minted\"}},\"onFlashLoan(address,address,uint256,uint256,bytes)\":{\"details\":\"ERC-3156 Flash loan callback\"},\"onboardAdapter(address,bool)\":{\"details\":\"Called by a trusted address, approves Target for issuance, and onboards adapter to the Divider\",\"params\":{\"adapter\":\"Adapter to onboard\",\"addAdapter\":\"Whether to call divider.addAdapter or not (useful e.g when upgrading Periphery)\"}},\"removeLiquidity(address,uint256,uint256,(uint256,uint256[],uint256),bool,address,(((address,uint256),uint256,uint256),bytes),(address,address,uint256,address,address,bytes))\":{\"details\":\"More info on `minAmountsOut`: https://github.com/balancer-labs/docs-developers/blob/main/resources/joins-and-exits/pool-exits.md#minamountsoutif quote.buyToken is neither target nor underlying, it will unwrap target and swap it on 0x if quote.buyToken is PT, it will return target and PTs\",\"params\":{\"adapter\":\"Adapter address for the Series\",\"lpBal\":\"Balance of LP tokens to provide\",\"maturity\":\"Maturity date for the Series\",\"params\":\"RemoveLiquidityParams struct with the params for the removeLiquidity call\",\"permit\":\"Permit to pull the LP tokens\",\"quote\":\"Quote with swap details\",\"receiver\":\"Address to receive the Underlying\",\"swapPTs\":\"Whether to swap PTs or not. If false, it will transfer PTs to the user\"},\"returns\":{\"amt\":\"amount of tokens received and ptBal PTs (in case it's called after maturity and redeem is restricted or intoTarget is false)\"}},\"setFactory(address,bool)\":{\"params\":{\"f\":\"Factory's address\",\"isOn\":\"Flag setting this factory to enabled or disabled\"}},\"setSpaceFactory(address)\":{\"params\":{\"newSpaceFactory\":\"The Space Factory addresss to set\"}},\"sponsorSeries(address,uint256,bool)\":{\"details\":\"Called by an external address, initializes a new series in the Divider\",\"params\":{\"adapter\":\"Adapter to associate with the Series\",\"maturity\":\"Maturity date for the Series, in units of unix time\",\"withPool\":\"Whether to deploy a Space pool or not (only works for unverified adapters)\"}},\"sponsorSeries(address,uint256,bool,(((address,uint256),uint256,uint256),bytes),(address,address,uint256,address,address,bytes))\":{\"details\":\"Called by an external address, initializes a new series in the Divider\",\"params\":{\"adapter\":\"Adapter to associate with the Series\",\"maturity\":\"Maturity date for the Series, in units of unix time\",\"permit\":\"Permit to pull the tokens to swap from\",\"quote\":\"Quote with swap details\",\"withPool\":\"Whether to deploy a Space pool or not (only works for unverified adapters)\"}},\"swapForPTs(address,uint256,uint256,uint256,uint256,address,(((address,uint256),uint256,uint256),bytes),(address,address,uint256,address,address,bytes))\":{\"details\":\"if quote.sellToken is neither target nor underlying, it will be swapped for underlying on 0x and wrapped into the target\",\"params\":{\"adapter\":\"Adapter address for the Series\",\"amt\":\"Amount to swap for PTs\",\"maturity\":\"Maturity date for the Series\",\"minAccepted\":\"Min accepted amount of PT\",\"permit\":\"Permit to pull the tokens to swap from\",\"quote\":\"Quote with swap details\",\"receiver\":\"Address to receive the PT\"},\"returns\":{\"ptBal\":\"amount of PT received\"}},\"swapForYTs(address,uint256,uint256,uint256,uint256,uint256,address,(((address,uint256),uint256,uint256),bytes),(address,address,uint256,address,address,bytes))\":{\"details\":\"if quote.sellToken is neither target nor underlying, it will be swapped for underlying on 0x and wrapped into the target\",\"params\":{\"adapter\":\"Adapter address for the Series\",\"amt\":\"Amount to sell\",\"maturity\":\"Maturity date for the Series\",\"minAccepted\":\"Min accepted amount of YT\",\"permit\":\"Permit to pull the tokens to swap from\",\"quote\":\"Quote with swap details\",\"receiver\":\"Address to receive the YT\",\"targetToBorrow\":\"Amount of Target to borrow\"},\"returns\":{\"targetBal\":\"amount of Target sent back\",\"ytBal\":\"amount of YT received\"}},\"swapPTs(address,uint256,uint256,uint256,uint256,address,(((address,uint256),uint256,uint256),bytes),(address,address,uint256,address,address,bytes))\":{\"details\":\"if quote.buyToken is neither target nor underlying, it will unwrap target and swap it on 0x\",\"params\":{\"adapter\":\"Adapter address for the series\",\"maturity\":\"Maturity date for the series\",\"minAccepted\":\"Min accepted amount of quote.buyToken the user receives\",\"permit\":\"Permit to pull PTs\",\"ptBal\":\"Balance of PT to sell\",\"quote\":\"Quote with swap details\",\"receiver\":\"Address to receive the tokens\"},\"returns\":{\"amt\":\"amount of tokens received\"}},\"swapYTs(address,uint256,uint256,uint256,uint256,address,(((address,uint256),uint256,uint256),bytes),(address,address,uint256,address,address,bytes))\":{\"details\":\"if quote.buyToken is neither target nor underlying, it will unwrap target and swap it on 0x\",\"params\":{\"adapter\":\"Adapter address for the Series\",\"maturity\":\"Maturity date for the Series\",\"minAccepted\":\"Min accepted amount of tokens when selling them on Space\",\"permit\":\"Permit to pull YTs\",\"quote\":\"Quote with swap details\",\"receiver\":\"Address to receive the Target\",\"ytBal\":\"Balance of YTs to swap\"},\"returns\":{\"amt\":\"amount of Target received\"}},\"verifyAdapter(address)\":{\"details\":\"Verifies an Adapter\",\"params\":{\"adapter\":\"Adapter to verify\"}}},\"title\":\"Periphery\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"ETH()\":{\"notice\":\"ETH address\"},\"MIN_YT_SWAP_IN()\":{\"notice\":\"Lower bound on the amount of Claim tokens one can swap in for Target\"},\"PRICE_ESTIMATE_ACCEPTABLE_ERROR()\":{\"notice\":\"Acceptable error when estimating the tokens resulting from a specific swap\"},\"addLiquidity(address,uint256,uint256,(uint256,uint256,uint256),uint8,address,(((address,uint256),uint256,uint256),bytes),(address,address,uint256,address,address,bytes))\":{\"notice\":\"Adds liquidity providing any Token\"},\"balancerVault()\":{\"notice\":\"Sense core Divider address\"},\"combine(address,uint256,uint256,address,(((address,uint256)[],uint256,uint256),bytes),(address,address,uint256,address,address,bytes))\":{\"notice\":\"Reconstitute Target by burning PT and YT\"},\"deployAdapter(address,address,bytes)\":{\"notice\":\"Deploy and onboard a Adapter\"},\"divider()\":{\"notice\":\"Sense core Divider address\"},\"factories(address)\":{\"notice\":\"adapter factories -> is supported\"},\"issue(address,uint256,uint256,address,(((address,uint256),uint256,uint256),bytes),(address,address,uint256,address,address,bytes))\":{\"notice\":\"Mint PTs & YTs of a specific Series\"},\"onboardAdapter(address,bool)\":{\"notice\":\"Onboard a single Adapter w/o needing a factory\"},\"permit2()\":{\"notice\":\"Permit2 contract\"},\"removeLiquidity(address,uint256,uint256,(uint256,uint256[],uint256),bool,address,(((address,uint256),uint256,uint256),bytes),(address,address,uint256,address,address,bytes))\":{\"notice\":\"Removes liquidity providing an amount of LP tokens and returns underlying\"},\"setFactory(address,bool)\":{\"notice\":\"Enable or disable a factory\"},\"setSpaceFactory(address)\":{\"notice\":\"Update the address for the Space Factory\"},\"spaceFactory()\":{\"notice\":\"Sense core Divider address\"},\"sponsorSeries(address,uint256,bool)\":{\"notice\":\"Sponsor a new Series in any adapter previously onboarded onto the Divider\"},\"sponsorSeries(address,uint256,bool,(((address,uint256),uint256,uint256),bytes),(address,address,uint256,address,address,bytes))\":{\"notice\":\"Sponsor a new Series in any adapter previously onboarded onto the Divider\"},\"swapForPTs(address,uint256,uint256,uint256,uint256,address,(((address,uint256),uint256,uint256),bytes),(address,address,uint256,address,address,bytes))\":{\"notice\":\"Swap for PTs of a particular series\"},\"swapForYTs(address,uint256,uint256,uint256,uint256,uint256,address,(((address,uint256),uint256,uint256),bytes),(address,address,uint256,address,address,bytes))\":{\"notice\":\"Swap to YTs of a particular series\"},\"swapPTs(address,uint256,uint256,uint256,uint256,address,(((address,uint256),uint256,uint256),bytes),(address,address,uint256,address,address,bytes))\":{\"notice\":\"Swap PTs of a particular series\"},\"swapYTs(address,uint256,uint256,uint256,uint256,address,(((address,uint256),uint256,uint256),bytes),(address,address,uint256,address,address,bytes))\":{\"notice\":\"Swap YTs of a particular series\"},\"swapYTsForTarget(address,uint256,uint256)\":{\"notice\":\"this function is here for backwards compatibility with AutoRoller. It does not suppport the use of `deadline` parameter. Use `swapYTs` instead.\"},\"verified(address)\":{\"notice\":\"adapter -> bool\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@sense-finance/v1-core/src/Periphery.sol\":\"Periphery\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031363930333630363631333936\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@sense-finance/v1-core/src/Divider.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.15;\\n\\n// External references\\nimport { Pausable } from \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport { ERC20 } from \\\"solmate/src/tokens/ERC20.sol\\\";\\nimport { SafeTransferLib } from \\\"solmate/src/utils/SafeTransferLib.sol\\\";\\nimport { ReentrancyGuard } from \\\"solmate/src/utils/ReentrancyGuard.sol\\\";\\nimport { DateTime } from \\\"./external/DateTime.sol\\\";\\nimport { FixedMath } from \\\"./external/FixedMath.sol\\\";\\n\\n// Internal references\\nimport { Errors } from \\\"@sense-finance/v1-utils/src/libs/Errors.sol\\\";\\n\\nimport { Levels } from \\\"@sense-finance/v1-utils/src/libs/Levels.sol\\\";\\nimport { Trust } from \\\"@sense-finance/v1-utils/src/Trust.sol\\\";\\nimport { YT } from \\\"./tokens/YT.sol\\\";\\nimport { Token } from \\\"./tokens/Token.sol\\\";\\nimport { BaseAdapter as Adapter } from \\\"./adapters/abstract/BaseAdapter.sol\\\";\\n\\n/// @title Sense Divider: Divide Assets in Two\\n/// @author fedealconada + jparklev\\n/// @notice You can use this contract to issue, combine, and redeem Sense ERC20 Principal and Yield Tokens\\ncontract Divider is Trust, ReentrancyGuard, Pausable {\\n    using SafeTransferLib for ERC20;\\n    using FixedMath for uint256;\\n    using Levels for uint256;\\n\\n    /* ========== PUBLIC CONSTANTS ========== */\\n\\n    /// @notice Buffer before and after the actual maturity in which only the sponsor can settle the Series\\n    uint256 public constant SPONSOR_WINDOW = 3 hours;\\n\\n    /// @notice Buffer after the sponsor window in which anyone can settle the Series\\n    uint256 public constant SETTLEMENT_WINDOW = 3 hours;\\n\\n    /// @notice 5% issuance fee cap\\n    uint256 public constant ISSUANCE_FEE_CAP = 0.05e18;\\n\\n    /* ========== PUBLIC MUTABLE STORAGE ========== */\\n\\n    address public periphery;\\n\\n    /// @notice Sense community multisig\\n    address public immutable cup;\\n\\n    /// @notice Principal/Yield tokens deployer\\n    address public immutable tokenHandler;\\n\\n    /// @notice Permissionless flag\\n    bool public permissionless;\\n\\n    /// @notice Guarded launch flag\\n    bool public guarded = true;\\n\\n    /// @notice Number of adapters (including turned off)\\n    uint248 public adapterCounter;\\n\\n    /// @notice adapter ID -> adapter address\\n    mapping(uint256 => address) public adapterAddresses;\\n\\n    /// @notice adapter data\\n    mapping(address => AdapterMeta) public adapterMeta;\\n\\n    /// @notice adapter -> maturity -> Series\\n    mapping(address => mapping(uint256 => Series)) public series;\\n\\n    /// @notice adapter -> maturity -> user -> lscale (last scale)\\n    mapping(address => mapping(uint256 => mapping(address => uint256))) public lscales;\\n\\n    /* ========== DATA STRUCTURES ========== */\\n\\n    struct Series {\\n        // Principal ERC20 token\\n        address pt;\\n        // Timestamp of series initialization\\n        uint48 issuance;\\n        // Yield ERC20 token\\n        address yt;\\n        // % of underlying principal initially reserved for Yield\\n        uint96 tilt;\\n        // Actor who initialized the Series\\n        address sponsor;\\n        // Tracks fees due to the series' settler\\n        uint256 reward;\\n        // Scale at issuance\\n        uint256 iscale;\\n        // Scale at maturity\\n        uint256 mscale;\\n        // Max scale value from this series' lifetime\\n        uint256 maxscale;\\n    }\\n\\n    struct AdapterMeta {\\n        // Adapter ID\\n        uint248 id;\\n        // Adapter enabled/disabled\\n        bool enabled;\\n        // Max amount of Target allowed to be issued\\n        uint256 guard;\\n        // Adapter level\\n        uint248 level;\\n    }\\n\\n    constructor(address _cup, address _tokenHandler) Trust(msg.sender) {\\n        cup = _cup;\\n        tokenHandler = _tokenHandler;\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n    /// @notice Enable an adapter\\n    /// @dev when permissionless is disabled, only the Periphery can onboard adapters\\n    /// @dev after permissionless is enabled, anyone can onboard adapters\\n    /// @param adapter Adapter's address\\n    function addAdapter(address adapter) external whenNotPaused {\\n        if (!permissionless && msg.sender != periphery) revert Errors.OnlyPermissionless();\\n        if (adapterMeta[adapter].id > 0 && !adapterMeta[adapter].enabled) revert Errors.InvalidAdapter();\\n        _setAdapter(adapter, true);\\n    }\\n\\n    /// @notice Initializes a new Series\\n    /// @dev Deploys two ERC20 contracts, one for PTs and the other one for YTs\\n    /// @dev Transfers some fixed amount of stake asset to this contract\\n    /// @param adapter Adapter to associate with the Series\\n    /// @param maturity Maturity date for the new Series, in units of unix time\\n    /// @param sponsor Sponsor of the Series that puts up a token stake and receives the issuance fees\\n    function initSeries(\\n        address adapter,\\n        uint256 maturity,\\n        address sponsor\\n    ) external nonReentrant whenNotPaused returns (address pt, address yt) {\\n        if (periphery != msg.sender) revert Errors.OnlyPeriphery();\\n        if (!adapterMeta[adapter].enabled) revert Errors.InvalidAdapter();\\n        if (_exists(adapter, maturity)) revert Errors.DuplicateSeries();\\n        if (!_isValid(adapter, maturity)) revert Errors.InvalidMaturity();\\n\\n        // Transfer stake asset stake from caller to adapter\\n        (address target, address stake, uint256 stakeSize) = Adapter(adapter).getStakeAndTarget();\\n\\n        // Deploy Principal & Yield Tokens for this new Series\\n        (pt, yt) = TokenHandler(tokenHandler).deploy(adapter, adapterMeta[adapter].id, maturity);\\n\\n        // Initialize the new Series struct\\n        uint256 scale = Adapter(adapter).scale();\\n\\n        series[adapter][maturity].pt = pt;\\n        series[adapter][maturity].issuance = uint48(block.timestamp);\\n        series[adapter][maturity].yt = yt;\\n        series[adapter][maturity].tilt = uint96(Adapter(adapter).tilt());\\n        series[adapter][maturity].sponsor = sponsor;\\n        series[adapter][maturity].iscale = scale;\\n        series[adapter][maturity].maxscale = scale;\\n\\n        ERC20(stake).safeTransferFrom(msg.sender, adapter, stakeSize);\\n\\n        emit SeriesInitialized(adapter, maturity, pt, yt, sponsor, target);\\n    }\\n\\n    /// @notice Settles a Series and transfers the settlement reward to the caller\\n    /// @dev The Series' sponsor has a grace period where only they can settle the Series\\n    /// @dev After that, the reward becomes MEV\\n    /// @param adapter Adapter to associate with the Series\\n    /// @param maturity Maturity date for the new Series\\n    function settleSeries(address adapter, uint256 maturity) external nonReentrant whenNotPaused {\\n        if (!adapterMeta[adapter].enabled) revert Errors.InvalidAdapter();\\n        if (!_exists(adapter, maturity)) revert Errors.SeriesDoesNotExist();\\n        if (_settled(adapter, maturity)) revert Errors.AlreadySettled();\\n        if (!_canBeSettled(adapter, maturity)) revert Errors.OutOfWindowBoundaries();\\n\\n        // The maturity scale value is all a Series needs for us to consider it \\\"settled\\\"\\n        uint256 mscale = Adapter(adapter).scale();\\n        series[adapter][maturity].mscale = mscale;\\n\\n        if (mscale > series[adapter][maturity].maxscale) {\\n            series[adapter][maturity].maxscale = mscale;\\n        }\\n\\n        // Reward the caller for doing the work of settling the Series at around the correct time\\n        (address target, address stake, uint256 stakeSize) = Adapter(adapter).getStakeAndTarget();\\n        ERC20(target).safeTransferFrom(adapter, msg.sender, series[adapter][maturity].reward);\\n        ERC20(stake).safeTransferFrom(adapter, msg.sender, stakeSize);\\n\\n        emit SeriesSettled(adapter, maturity, msg.sender);\\n    }\\n\\n    /// @notice Mint Principal & Yield Tokens of a specific Series\\n    /// @param adapter Adapter address for the Series\\n    /// @param maturity Maturity date for the Series [unix time]\\n    /// @param tBal Balance of Target to deposit\\n    /// @dev The balance of PTs and YTs minted will be the same value in units of underlying (less fees)\\n    function issue(\\n        address adapter,\\n        uint256 maturity,\\n        uint256 tBal\\n    ) external nonReentrant whenNotPaused returns (uint256 uBal) {\\n        if (!adapterMeta[adapter].enabled) revert Errors.InvalidAdapter();\\n        if (!_exists(adapter, maturity)) revert Errors.SeriesDoesNotExist();\\n        if (_settled(adapter, maturity)) revert Errors.IssueOnSettle();\\n\\n        uint256 level = adapterMeta[adapter].level;\\n        if (level.issueRestricted() && msg.sender != adapter) revert Errors.IssuanceRestricted();\\n\\n        ERC20 target = ERC20(Adapter(adapter).target());\\n\\n        // Take the issuance fee out of the deposited Target, and put it towards the settlement reward\\n        uint256 issuanceFee = Adapter(adapter).ifee();\\n        if (issuanceFee > ISSUANCE_FEE_CAP) revert Errors.IssuanceFeeCapExceeded();\\n        uint256 fee = tBal.fmul(issuanceFee);\\n\\n        unchecked {\\n            // Safety: bounded by the Target's total token supply\\n            series[adapter][maturity].reward += fee;\\n        }\\n        uint256 tBalSubFee = tBal - fee;\\n\\n        // Ensure the caller won't hit the issuance cap with this action\\n        unchecked {\\n            // Safety: bounded by the Target's total token supply\\n            if (guarded && target.balanceOf(adapter) + tBal > adapterMeta[address(adapter)].guard)\\n                revert Errors.GuardCapReached();\\n        }\\n\\n        // Update values on adapter\\n        Adapter(adapter).notify(msg.sender, tBalSubFee, true);\\n\\n        uint256 scale = level.collectDisabled() ? series[adapter][maturity].iscale : Adapter(adapter).scale();\\n\\n        // Determine the amount of Underlying equal to the Target being sent in (the principal)\\n        uBal = tBalSubFee.fmul(scale);\\n\\n        // If the caller has not collected on YT before, use the current scale, otherwise\\n        // use the harmonic mean of the last and the current scale value\\n        lscales[adapter][maturity][msg.sender] = lscales[adapter][maturity][msg.sender] == 0\\n            ? scale\\n            : _reweightLScale(\\n                adapter,\\n                maturity,\\n                YT(series[adapter][maturity].yt).balanceOf(msg.sender),\\n                uBal,\\n                msg.sender,\\n                scale\\n            );\\n\\n        // Mint equal amounts of PT and YT\\n        Token(series[adapter][maturity].pt).mint(msg.sender, uBal);\\n        YT(series[adapter][maturity].yt).mint(msg.sender, uBal);\\n\\n        target.safeTransferFrom(msg.sender, adapter, tBal);\\n\\n        emit Issued(adapter, maturity, uBal, msg.sender);\\n    }\\n\\n    /// @notice Reconstitute Target by burning PT and YT\\n    /// @dev Explicitly burns YTs before maturity, and implicitly does it at/after maturity through `_collect()`\\n    /// @param adapter Adapter address for the Series\\n    /// @param maturity Maturity date for the Series\\n    /// @param uBal Balance of PT and YT to burn\\n    function combine(\\n        address adapter,\\n        uint256 maturity,\\n        uint256 uBal\\n    ) external nonReentrant whenNotPaused returns (uint256 tBal) {\\n        if (!adapterMeta[adapter].enabled) revert Errors.InvalidAdapter();\\n        if (!_exists(adapter, maturity)) revert Errors.SeriesDoesNotExist();\\n\\n        uint256 level = adapterMeta[adapter].level;\\n        if (level.combineRestricted() && msg.sender != adapter) revert Errors.CombineRestricted();\\n\\n        // Burn the PT\\n        Token(series[adapter][maturity].pt).burn(msg.sender, uBal);\\n\\n        // Collect whatever excess is due\\n        uint256 collected = _collect(msg.sender, adapter, maturity, uBal, uBal, address(0));\\n\\n        uint256 cscale = series[adapter][maturity].mscale;\\n        bool settled = _settled(adapter, maturity);\\n        if (!settled) {\\n            // If it's not settled, then YT won't be burned automatically in `_collect()`\\n            YT(series[adapter][maturity].yt).burn(msg.sender, uBal);\\n            // If collect has been restricted, use the initial scale, otherwise use the current scale\\n            cscale = level.collectDisabled()\\n                ? series[adapter][maturity].iscale\\n                : lscales[adapter][maturity][msg.sender];\\n        }\\n\\n        // Convert from units of Underlying to units of Target\\n        tBal = uBal.fdiv(cscale);\\n        ERC20(Adapter(adapter).target()).safeTransferFrom(adapter, msg.sender, tBal);\\n\\n        // Notify only when Series is not settled as when it is, the _collect() call above would trigger a _redeemYT which will call notify\\n        if (!settled) Adapter(adapter).notify(msg.sender, tBal, false);\\n        unchecked {\\n            // Safety: bounded by the Target's total token supply\\n            tBal += collected;\\n        }\\n        emit Combined(adapter, maturity, tBal, msg.sender);\\n    }\\n\\n    /// @notice Burn PT of a Series once it's been settled\\n    /// @dev The balance of redeemable Target is a function of the change in Scale\\n    /// @param adapter Adapter address for the Series\\n    /// @param maturity Maturity date for the Series\\n    /// @param uBal Amount of PT to burn, which should be equivalent to the amount of Underlying owed to the caller\\n    function redeem(\\n        address adapter,\\n        uint256 maturity,\\n        uint256 uBal\\n    ) external nonReentrant whenNotPaused returns (uint256 tBal) {\\n        // If a Series is settled, we know that it must have existed as well, so that check is unnecessary\\n        if (!_settled(adapter, maturity)) revert Errors.NotSettled();\\n\\n        uint256 level = adapterMeta[adapter].level;\\n        if (level.redeemRestricted() && msg.sender != adapter) revert Errors.RedeemRestricted();\\n\\n        // Burn the caller's PT\\n        Token(series[adapter][maturity].pt).burn(msg.sender, uBal);\\n\\n        // Principal Token holder's share of the principal = (1 - part of the principal that belongs to Yield)\\n        uint256 zShare = FixedMath.WAD - series[adapter][maturity].tilt;\\n\\n        // If Principal Token are at a loss and Yield have some principal to help cover the shortfall,\\n        // take what we can from Yield Token's principal\\n        if (series[adapter][maturity].mscale.fdiv(series[adapter][maturity].maxscale) >= zShare) {\\n            tBal = (uBal * zShare) / series[adapter][maturity].mscale;\\n        } else {\\n            tBal = uBal.fdiv(series[adapter][maturity].maxscale);\\n        }\\n\\n        if (!level.redeemHookDisabled()) {\\n            Adapter(adapter).onRedeem(uBal, series[adapter][maturity].mscale, series[adapter][maturity].maxscale, tBal);\\n        }\\n\\n        ERC20(Adapter(adapter).target()).safeTransferFrom(adapter, msg.sender, tBal);\\n        emit PTRedeemed(adapter, maturity, tBal);\\n    }\\n\\n    function collect(\\n        address usr,\\n        address adapter,\\n        uint256 maturity,\\n        uint256 uBalTransfer,\\n        address to\\n    ) external nonReentrant onlyYT(adapter, maturity) whenNotPaused returns (uint256 collected) {\\n        uint256 uBal = YT(msg.sender).balanceOf(usr);\\n        return _collect(usr, adapter, maturity, uBal, uBalTransfer > 0 ? uBalTransfer : uBal, to);\\n    }\\n\\n    /// @notice Collect YT excess before, at, or after maturity\\n    /// @dev If `to` is set, we copy the lscale value from usr to this address\\n    /// @param usr User who's collecting for their YTs\\n    /// @param adapter Adapter address for the Series\\n    /// @param maturity Maturity date for the Series\\n    /// @param uBal yield Token balance\\n    /// @param uBalTransfer original transfer value\\n    /// @param to address to set the lscale value from usr\\n    function _collect(\\n        address usr,\\n        address adapter,\\n        uint256 maturity,\\n        uint256 uBal,\\n        uint256 uBalTransfer,\\n        address to\\n    ) internal returns (uint256 collected) {\\n        if (!_exists(adapter, maturity)) revert Errors.SeriesDoesNotExist();\\n\\n        // If the adapter is disabled, its Yield Token can only collect\\n        // if associated Series has been settled, which implies that an admin\\n        // has backfilled it\\n        if (!adapterMeta[adapter].enabled && !_settled(adapter, maturity)) revert Errors.InvalidAdapter();\\n\\n        Series memory _series = series[adapter][maturity];\\n\\n        // Get the scale value from the last time this holder collected (default to maturity)\\n        uint256 lscale = lscales[adapter][maturity][usr];\\n\\n        uint256 level = adapterMeta[adapter].level;\\n        if (level.collectDisabled()) {\\n            // If this Series has been settled, we ensure everyone's YT will\\n            // collect yield accrued since issuance\\n            if (_settled(adapter, maturity)) {\\n                lscale = series[adapter][maturity].iscale;\\n                // If the Series is not settled, we ensure no collections can happen\\n            } else {\\n                return 0;\\n            }\\n        }\\n\\n        // If the Series has been settled, this should be their last collect, so redeem the user's Yield Tokens for them\\n        if (_settled(adapter, maturity)) {\\n            _redeemYT(usr, adapter, maturity, uBal);\\n        } else {\\n            // If we're not settled and we're past maturity + the sponsor window,\\n            // anyone can settle this Series so revert until someone does\\n            if (block.timestamp > maturity + SPONSOR_WINDOW) {\\n                revert Errors.CollectNotSettled();\\n                // Otherwise, this is a valid pre-settlement collect and we need to determine the scale value\\n            } else {\\n                uint256 cscale = Adapter(adapter).scale();\\n                // If this is larger than the largest scale we've seen for this Series, use it\\n                if (cscale > _series.maxscale) {\\n                    _series.maxscale = cscale;\\n                    lscales[adapter][maturity][usr] = cscale;\\n                    // If not, use the previously noted max scale value\\n                } else {\\n                    lscales[adapter][maturity][usr] = _series.maxscale;\\n                }\\n            }\\n        }\\n\\n        // Determine how much underlying has accrued since the last time this user collected, in units of Target.\\n        // (Or take the last time as issuance if they haven't yet)\\n        //\\n        // Reminder: `Underlying / Scale = Target`\\n        // So the following equation is saying, for some amount of Underlying `u`:\\n        // \\\"Balance of Target that equaled `u` at the last collection _minus_ Target that equals `u` now\\\"\\n        //\\n        // Because maxscale must be increasing, the Target balance needed to equal `u` decreases, and that \\\"excess\\\"\\n        // is what Yield holders are collecting\\n        uint256 tBalNow = uBal.fdivUp(_series.maxscale); // preventive round-up towards the protocol\\n        uint256 tBalPrev = uBal.fdiv(lscale);\\n        unchecked {\\n            collected = tBalPrev > tBalNow ? tBalPrev - tBalNow : 0;\\n        }\\n        ERC20(Adapter(adapter).target()).safeTransferFrom(adapter, usr, collected);\\n        Adapter(adapter).notify(usr, collected, false); // Distribute reward tokens\\n\\n        // If this collect is a part of a token transfer to another address, set the receiver's\\n        // last collection to a synthetic scale weighted based on the scale on their last collect,\\n        // the time elapsed, and the current scale\\n        if (to != address(0)) {\\n            uint256 ytBal = YT(_series.yt).balanceOf(to);\\n            // If receiver holds yields, we set lscale to a computed \\\"synthetic\\\" lscales value that,\\n            // for the updated yield balance, still assigns the correct amount of yield.\\n            lscales[adapter][maturity][to] = ytBal > 0\\n                ? _reweightLScale(adapter, maturity, ytBal, uBalTransfer, to, _series.maxscale)\\n                : _series.maxscale;\\n            uint256 tBalTransfer = uBalTransfer.fdiv(_series.maxscale);\\n            Adapter(adapter).notify(usr, tBalTransfer, false);\\n            Adapter(adapter).notify(to, tBalTransfer, true);\\n        }\\n        series[adapter][maturity] = _series;\\n\\n        emit Collected(adapter, maturity, collected);\\n    }\\n\\n    /// @notice calculate the harmonic mean of the current scale and the last scale,\\n    /// weighted by amounts associated with each\\n    function _reweightLScale(\\n        address adapter,\\n        uint256 maturity,\\n        uint256 ytBal,\\n        uint256 uBal,\\n        address receiver,\\n        uint256 scale\\n    ) internal view returns (uint256) {\\n        // Target Decimals * 18 Decimals [from fdiv] / (Target Decimals * 18 Decimals [from fdiv] / 18 Decimals)\\n        // = 18 Decimals, which is the standard for scale values\\n        return (ytBal + uBal).fdiv((ytBal.fdiv(lscales[adapter][maturity][receiver]) + uBal.fdiv(scale)));\\n    }\\n\\n    function _redeemYT(\\n        address usr,\\n        address adapter,\\n        uint256 maturity,\\n        uint256 uBal\\n    ) internal {\\n        // Burn the users's YTs\\n        YT(series[adapter][maturity].yt).burn(usr, uBal);\\n\\n        // Default principal for a YT\\n        uint256 tBal = 0;\\n\\n        // Principal Token holder's share of the principal = (1 - part of the principal that belongs to Yield Tokens)\\n        uint256 zShare = FixedMath.WAD - series[adapter][maturity].tilt;\\n\\n        // If PTs are at a loss and YTs had their principal cut to help cover the shortfall,\\n        // calculate how much YTs have left\\n        if (series[adapter][maturity].mscale.fdiv(series[adapter][maturity].maxscale) >= zShare) {\\n            tBal = uBal.fdiv(series[adapter][maturity].maxscale) - (uBal * zShare) / series[adapter][maturity].mscale;\\n            ERC20(Adapter(adapter).target()).safeTransferFrom(adapter, usr, tBal);\\n        }\\n\\n        // Always notify the Adapter of the full Target balance that will no longer\\n        // have its rewards distributed\\n        Adapter(adapter).notify(usr, uBal.fdivUp(series[adapter][maturity].maxscale), false);\\n\\n        emit YTRedeemed(adapter, maturity, tBal);\\n    }\\n\\n    /* ========== ADMIN ========== */\\n\\n    /// @notice Enable or disable a adapter\\n    /// @param adapter Adapter's address\\n    /// @param isOn Flag setting this adapter to enabled or disabled\\n    function setAdapter(address adapter, bool isOn) public requiresTrust {\\n        _setAdapter(adapter, isOn);\\n    }\\n\\n    /// @notice Set adapter's guard\\n    /// @param adapter Adapter address\\n    /// @param cap The max target that can be deposited on the Adapter\\n    function setGuard(address adapter, uint256 cap) external requiresTrust {\\n        adapterMeta[adapter].guard = cap;\\n        emit GuardChanged(adapter, cap);\\n    }\\n\\n    /// @notice Set guarded mode\\n    /// @param _guarded bool\\n    function setGuarded(bool _guarded) external requiresTrust {\\n        guarded = _guarded;\\n        emit GuardedChanged(_guarded);\\n    }\\n\\n    /// @notice Set periphery's contract\\n    /// @param _periphery Target address\\n    function setPeriphery(address _periphery) external requiresTrust {\\n        periphery = _periphery;\\n        emit PeripheryChanged(_periphery);\\n    }\\n\\n    /// @notice Set paused flag\\n    /// @param _paused boolean\\n    function setPaused(bool _paused) external requiresTrust {\\n        _paused ? _pause() : _unpause();\\n    }\\n\\n    /// @notice Set permissioless mode\\n    /// @param _permissionless bool\\n    function setPermissionless(bool _permissionless) external requiresTrust {\\n        permissionless = _permissionless;\\n        emit PermissionlessChanged(_permissionless);\\n    }\\n\\n    /// @notice Backfill a Series' Scale value at maturity if keepers failed to settle it\\n    /// @param adapter Adapter's address\\n    /// @param maturity Maturity date for the Series\\n    /// @param mscale Value to set as the Series' Scale value at maturity\\n    /// @param _usrs Values to set on lscales mapping\\n    /// @param _lscales Values to set on lscales mapping\\n    function backfillScale(\\n        address adapter,\\n        uint256 maturity,\\n        uint256 mscale,\\n        address[] calldata _usrs,\\n        uint256[] calldata _lscales\\n    ) external requiresTrust {\\n        if (!_exists(adapter, maturity)) revert Errors.SeriesDoesNotExist();\\n\\n        uint256 cutoff = maturity + SPONSOR_WINDOW + SETTLEMENT_WINDOW;\\n        // Admin can never backfill before maturity\\n        if (block.timestamp <= cutoff) revert Errors.OutOfWindowBoundaries();\\n\\n        // Set user's last scale values the Series (needed for the `collect` method)\\n        for (uint256 i = 0; i < _usrs.length; i++) {\\n            lscales[adapter][maturity][_usrs[i]] = _lscales[i];\\n        }\\n\\n        if (mscale > 0) {\\n            Series memory _series = series[adapter][maturity];\\n            // Set the maturity scale for the Series (needed for `redeem` methods)\\n            series[adapter][maturity].mscale = mscale;\\n            if (mscale > _series.maxscale) {\\n                series[adapter][maturity].maxscale = mscale;\\n            }\\n\\n            (address target, address stake, uint256 stakeSize) = Adapter(adapter).getStakeAndTarget();\\n\\n            address stakeDst = adapterMeta[adapter].enabled ? cup : _series.sponsor;\\n            ERC20(target).safeTransferFrom(adapter, cup, _series.reward);\\n            series[adapter][maturity].reward = 0;\\n            ERC20(stake).safeTransferFrom(adapter, stakeDst, stakeSize);\\n        }\\n\\n        emit Backfilled(adapter, maturity, mscale, _usrs, _lscales);\\n    }\\n\\n    /* ========== INTERNAL VIEWS ========== */\\n\\n    function _exists(address adapter, uint256 maturity) internal view returns (bool) {\\n        return series[adapter][maturity].pt != address(0);\\n    }\\n\\n    function _settled(address adapter, uint256 maturity) internal view returns (bool) {\\n        return series[adapter][maturity].mscale > 0;\\n    }\\n\\n    function _canBeSettled(address adapter, uint256 maturity) internal view returns (bool) {\\n        uint256 cutoff = maturity + SPONSOR_WINDOW + SETTLEMENT_WINDOW;\\n        // If the sender is the sponsor for the Series\\n        if (msg.sender == series[adapter][maturity].sponsor) {\\n            return maturity - SPONSOR_WINDOW <= block.timestamp && cutoff >= block.timestamp;\\n        } else {\\n            return maturity + SPONSOR_WINDOW < block.timestamp && cutoff >= block.timestamp;\\n        }\\n    }\\n\\n    function _isValid(address adapter, uint256 maturity) internal view returns (bool) {\\n        (uint256 minm, uint256 maxm) = Adapter(adapter).getMaturityBounds();\\n        if (maturity < block.timestamp + minm || maturity > block.timestamp + maxm) return false;\\n        (, , uint256 day, uint256 hour, uint256 minute, uint256 second) = DateTime.timestampToDateTime(maturity);\\n\\n        if (hour != 0 || minute != 0 || second != 0) return false;\\n        uint256 mode = Adapter(adapter).mode();\\n        if (mode == 0) {\\n            return day == 1;\\n        }\\n        if (mode == 1) {\\n            return DateTime.getDayOfWeek(maturity) == 1;\\n        }\\n        return false;\\n    }\\n\\n    /* ========== INTERNAL UTILS ========== */\\n\\n    function _setAdapter(address adapter, bool isOn) internal {\\n        AdapterMeta memory am = adapterMeta[adapter];\\n        if (am.enabled == isOn) revert Errors.ExistingValue();\\n        am.enabled = isOn;\\n\\n        // If this adapter is being added for the first time\\n        if (isOn && am.id == 0) {\\n            am.id = ++adapterCounter;\\n            adapterAddresses[am.id] = adapter;\\n        }\\n\\n        // Set level and target (can only be done once);\\n        am.level = uint248(Adapter(adapter).level());\\n        adapterMeta[adapter] = am;\\n        emit AdapterChanged(adapter, am.id, isOn);\\n    }\\n\\n    /* ========== PUBLIC GETTERS ========== */\\n\\n    /// @notice Returns address of Principal Token\\n    function pt(address adapter, uint256 maturity) public view returns (address) {\\n        return series[adapter][maturity].pt;\\n    }\\n\\n    /// @notice Returns address of Yield Token\\n    function yt(address adapter, uint256 maturity) public view returns (address) {\\n        return series[adapter][maturity].yt;\\n    }\\n\\n    function mscale(address adapter, uint256 maturity) public view returns (uint256) {\\n        return series[adapter][maturity].mscale;\\n    }\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    modifier onlyYT(address adapter, uint256 maturity) {\\n        if (series[adapter][maturity].yt != msg.sender) revert Errors.OnlyYT();\\n        _;\\n    }\\n\\n    /* ========== LOGS ========== */\\n\\n    /// @notice Admin\\n    event Backfilled(\\n        address indexed adapter,\\n        uint256 indexed maturity,\\n        uint256 mscale,\\n        address[] _usrs,\\n        uint256[] _lscales\\n    );\\n    event GuardChanged(address indexed adapter, uint256 cap);\\n    event AdapterChanged(address indexed adapter, uint256 indexed id, bool indexed isOn);\\n    event PeripheryChanged(address indexed periphery);\\n\\n    /// @notice Series lifecycle\\n    /// *---- beginning\\n    event SeriesInitialized(\\n        address adapter,\\n        uint256 indexed maturity,\\n        address pt,\\n        address yt,\\n        address indexed sponsor,\\n        address indexed target\\n    );\\n    /// -***- middle\\n    event Issued(address indexed adapter, uint256 indexed maturity, uint256 balance, address indexed sender);\\n    event Combined(address indexed adapter, uint256 indexed maturity, uint256 balance, address indexed sender);\\n    event Collected(address indexed adapter, uint256 indexed maturity, uint256 collected);\\n    /// ----* end\\n    event SeriesSettled(address indexed adapter, uint256 indexed maturity, address indexed settler);\\n    event PTRedeemed(address indexed adapter, uint256 indexed maturity, uint256 redeemed);\\n    event YTRedeemed(address indexed adapter, uint256 indexed maturity, uint256 redeemed);\\n    /// *----* misc\\n    event GuardedChanged(bool indexed guarded);\\n    event PermissionlessChanged(bool indexed permissionless);\\n}\\n\\ncontract TokenHandler is Trust {\\n    /// @notice Program state\\n    address public divider;\\n\\n    constructor() Trust(msg.sender) {}\\n\\n    function init(address _divider) external requiresTrust {\\n        if (divider != address(0)) revert Errors.AlreadyInitialized();\\n        divider = _divider;\\n    }\\n\\n    function deploy(\\n        address adapter,\\n        uint248 id,\\n        uint256 maturity\\n    ) external returns (address pt, address yt) {\\n        if (msg.sender != divider) revert Errors.OnlyDivider();\\n\\n        ERC20 target = ERC20(Adapter(adapter).target());\\n        uint8 decimals = target.decimals();\\n        string memory symbol = target.symbol();\\n        (string memory d, string memory m, string memory y) = DateTime.toDateString(maturity);\\n        string memory date = DateTime.format(maturity);\\n        string memory datestring = string(abi.encodePacked(d, \\\"-\\\", m, \\\"-\\\", y));\\n        string memory adapterId = DateTime.uintToString(id);\\n        pt = address(\\n            new Token(\\n                string(abi.encodePacked(date, \\\" \\\", symbol, \\\" Sense Principal Token, A\\\", adapterId)),\\n                string(abi.encodePacked(\\\"sP-\\\", symbol, \\\":\\\", datestring, \\\":\\\", adapterId)),\\n                decimals,\\n                divider\\n            )\\n        );\\n\\n        yt = address(\\n            new YT(\\n                adapter,\\n                maturity,\\n                string(abi.encodePacked(date, \\\" \\\", symbol, \\\" Sense Yield Token, A\\\", adapterId)),\\n                string(abi.encodePacked(\\\"sY-\\\", symbol, \\\":\\\", datestring, \\\":\\\", adapterId)),\\n                decimals,\\n                divider\\n            )\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xf6844d67e70c2f11522133173ed85cfaf94d2bf6f2bc35667af63a46585f855f\",\"license\":\"AGPL-3.0-only\"},\"@sense-finance/v1-core/src/Periphery.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.15;\\n\\n// External references\\nimport { ERC20 } from \\\"solmate/src/tokens/ERC20.sol\\\";\\nimport { SafeTransferLib } from \\\"solmate/src/utils/SafeTransferLib.sol\\\";\\nimport { FixedMath } from \\\"./external/FixedMath.sol\\\";\\nimport { BalancerVault, IAsset } from \\\"./external/balancer/Vault.sol\\\";\\nimport { BalancerPool } from \\\"./external/balancer/Pool.sol\\\";\\nimport { IERC3156FlashBorrower } from \\\"./external/flashloan/IERC3156FlashBorrower.sol\\\";\\nimport { IPermit2 } from \\\"@sense-finance/v1-core/src/external/IPermit2.sol\\\";\\n\\n// Internal references\\nimport { Errors } from \\\"@sense-finance/v1-utils/src/libs/Errors.sol\\\";\\nimport { Levels } from \\\"@sense-finance/v1-utils/src/libs/Levels.sol\\\";\\nimport { Trust } from \\\"@sense-finance/v1-utils/src/Trust.sol\\\";\\nimport { BaseAdapter as Adapter } from \\\"./adapters/abstract/BaseAdapter.sol\\\";\\nimport { BaseFactory as AdapterFactory } from \\\"./adapters/abstract/factories/BaseFactory.sol\\\";\\nimport { Divider } from \\\"./Divider.sol\\\";\\n\\ninterface SpaceFactoryLike {\\n    function create(address, uint256) external returns (address);\\n\\n    function pools(address adapter, uint256 maturity) external view returns (address);\\n}\\n\\n/// @title Periphery\\ncontract Periphery is Trust, IERC3156FlashBorrower {\\n    using FixedMath for uint256;\\n    using SafeTransferLib for ERC20;\\n    using Levels for uint256;\\n\\n    /* ========== PUBLIC CONSTANTS ========== */\\n\\n    /// @notice Lower bound on the amount of Claim tokens one can swap in for Target\\n    uint256 public constant MIN_YT_SWAP_IN = 0.000001e18;\\n\\n    /// @notice Acceptable error when estimating the tokens resulting from a specific swap\\n    uint256 public constant PRICE_ESTIMATE_ACCEPTABLE_ERROR = 0.00000001e18;\\n\\n    /// @notice ETH address\\n    address public constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n    /* ========== PUBLIC IMMUTABLES ========== */\\n\\n    /// @notice Sense core Divider address\\n    Divider public immutable divider;\\n\\n    /// @notice Sense core Divider address\\n    BalancerVault public immutable balancerVault;\\n\\n    /// @notice Permit2 contract\\n    IPermit2 public immutable permit2;\\n\\n    // 0x ExchangeProxy address. See https://docs.0x.org/developer-resources/contract-addresses\\n    address public immutable exchangeProxy;\\n\\n    /* ========== PUBLIC MUTABLE STORAGE ========== */\\n\\n    /// @notice Sense core Divider address\\n    SpaceFactoryLike public spaceFactory;\\n\\n    /// @notice adapter factories -> is supported\\n    mapping(address => bool) public factories;\\n\\n    /// @notice adapter -> bool\\n    mapping(address => bool) public verified;\\n\\n    /* ========== DATA STRUCTURES ========== */\\n\\n    struct PoolLiquidity {\\n        ERC20[] tokens;\\n        uint256[] amounts;\\n        uint256 minBptOut;\\n    }\\n\\n    struct PermitData {\\n        IPermit2.PermitTransferFrom msg;\\n        bytes sig;\\n    }\\n\\n    struct PermitBatchData {\\n        IPermit2.PermitBatchTransferFrom msg;\\n        bytes sig;\\n    }\\n\\n    struct SwapQuote {\\n        ERC20 sellToken;\\n        ERC20 buyToken;\\n        uint256 amount;\\n        address spender;\\n        address payable swapTarget;\\n        bytes swapCallData;\\n    }\\n\\n    struct AddLiquidityParams {\\n        uint256 minAccepted; // Min accepted amount of Target (from the sell of YTs)\\n        uint256 minBptOut; // Min BPT the user will accept out for this transaction\\n        uint256 deadline; // The UNIX timestamp at which our trade must be completed by - if the transaction is confirmed after this time then the transaction will fail.\\n    }\\n\\n    struct RemoveLiquidityParams {\\n        uint256 minAccepted; // Min accepted when swapping PTs to underlying (only used when removing liquidity before maturity)\\n        uint256[] minAmountsOut; // Min accepted amounts of PTs and Target given the amount of LP shares provided\\n        uint256 deadline; // The UNIX timestamp at which our trade must be completed by - if the transaction is confirmed after this time then the transaction will fail.\\n    }\\n\\n    constructor(\\n        address _divider,\\n        address _spaceFactory,\\n        address _balancerVault,\\n        address _permit2,\\n        address _exchangeProxy\\n    ) Trust(msg.sender) {\\n        divider = Divider(_divider);\\n        spaceFactory = SpaceFactoryLike(_spaceFactory);\\n        balancerVault = BalancerVault(_balancerVault);\\n        permit2 = IPermit2(_permit2);\\n        exchangeProxy = _exchangeProxy;\\n    }\\n\\n    /* ========== SERIES / ADAPTER MANAGEMENT ========== */\\n\\n    /// @notice Sponsor a new Series in any adapter previously onboarded onto the Divider\\n    /// @dev Called by an external address, initializes a new series in the Divider\\n    /// @param adapter Adapter to associate with the Series\\n    /// @param maturity Maturity date for the Series, in units of unix time\\n    /// @param withPool Whether to deploy a Space pool or not (only works for unverified adapters)\\n    function sponsorSeries(\\n        address adapter,\\n        uint256 maturity,\\n        bool withPool\\n    ) external returns (address pt, address yt) {\\n        (, address stake, uint256 stakeSize) = Adapter(adapter).getStakeAndTarget();\\n        ERC20(stake).transferFrom(msg.sender, address(this), stakeSize);\\n        return _sponsorSeries(adapter, maturity, withPool, stake, stakeSize);\\n    }\\n\\n    /// @notice Sponsor a new Series in any adapter previously onboarded onto the Divider\\n    /// @dev Called by an external address, initializes a new series in the Divider\\n    /// @param adapter Adapter to associate with the Series\\n    /// @param maturity Maturity date for the Series, in units of unix time\\n    /// @param withPool Whether to deploy a Space pool or not (only works for unverified adapters)\\n    /// @param permit Permit to pull the tokens to swap from\\n    /// @param quote Quote with swap details\\n    function sponsorSeries(\\n        address adapter,\\n        uint256 maturity,\\n        bool withPool,\\n        PermitData calldata permit,\\n        SwapQuote calldata quote\\n    ) external payable returns (address pt, address yt) {\\n        (, address stake, uint256 stakeSize) = Adapter(adapter).getStakeAndTarget();\\n        if (address(quote.sellToken) != ETH) _transferFrom(permit, address(quote.sellToken), quote.amount);\\n        if (address(quote.sellToken) != stake) _fillQuote(quote);\\n\\n        (pt, yt) = _sponsorSeries(adapter, maturity, withPool, stake, stakeSize);\\n\\n        // refund any excess stake assets\\n        ERC20(stake).safeTransfer(msg.sender, _balanceOf(stake, address(this)));\\n\\n        // refund any remaining quote.sellToken to receiver\\n        _transfer(\\n            quote.sellToken,\\n            msg.sender,\\n            address(quote.sellToken) == ETH\\n                ? address(this).balance\\n                : _balanceOf(address(quote.sellToken), address(this))\\n        );\\n    }\\n\\n    function _sponsorSeries(\\n        address adapter,\\n        uint256 maturity,\\n        bool withPool,\\n        address stake,\\n        uint256 stakeSize\\n    ) internal returns (address pt, address yt) {\\n        // Approve divider to withdraw stake assets\\n        ERC20(stake).safeApprove(address(divider), stakeSize);\\n\\n        (pt, yt) = divider.initSeries(adapter, maturity, msg.sender);\\n\\n        // Space pool is always created for verified adapters whilst is optional for unverified ones.\\n        // Automatically queueing series is only for verified adapters\\n        if (verified[adapter]) {\\n            spaceFactory.create(adapter, maturity);\\n        } else {\\n            if (withPool) {\\n                spaceFactory.create(adapter, maturity);\\n            }\\n        }\\n\\n        emit SeriesSponsored(adapter, maturity, msg.sender);\\n    }\\n\\n    /// @notice Deploy and onboard a Adapter\\n    /// @dev Called by external address, deploy a new Adapter via an Adapter Factory\\n    /// @param f Factory to use\\n    /// @param target Target to onboard\\n    /// @param data Additional encoded data needed to deploy the adapter\\n    function deployAdapter(\\n        address f,\\n        address target,\\n        bytes calldata data\\n    ) external returns (address adapter) {\\n        if (!factories[f]) revert Errors.FactoryNotSupported();\\n        adapter = AdapterFactory(f).deployAdapter(target, data);\\n        emit AdapterDeployed(adapter);\\n        _verifyAdapter(adapter);\\n        _onboardAdapter(adapter, true);\\n    }\\n\\n    /* ========== LIQUIDITY UTILS ========== */\\n\\n    /// @notice Swap for PTs of a particular series\\n    /// @param adapter Adapter address for the Series\\n    /// @param maturity Maturity date for the Series\\n    /// @param amt Amount to swap for PTs\\n    /// @param minAccepted Min accepted amount of PT\\n    /// @param receiver Address to receive the PT\\n    /// @param permit Permit to pull the tokens to swap from\\n    /// @param quote Quote with swap details\\n    /// @dev if quote.sellToken is neither target nor underlying, it will be swapped for underlying\\n    /// on 0x and wrapped into the target\\n    /// @return ptBal amount of PT received\\n    function swapForPTs(\\n        address adapter,\\n        uint256 maturity,\\n        uint256 amt,\\n        uint256 deadline,\\n        uint256 minAccepted,\\n        address receiver,\\n        PermitData calldata permit,\\n        SwapQuote calldata quote\\n    ) external payable returns (uint256 ptBal) {\\n        if (address(quote.sellToken) != ETH) _transferFrom(permit, address(quote.sellToken), amt);\\n        ptBal = _swapTargetForPTs(\\n            adapter,\\n            maturity,\\n            _toTarget(adapter, amt, receiver, quote),\\n            deadline,\\n            minAccepted,\\n            receiver\\n        );\\n        // refund any remaining quote.sellToken to receiver\\n        _transfer(\\n            quote.sellToken,\\n            receiver,\\n            address(quote.sellToken) == ETH\\n                ? address(this).balance\\n                : _balanceOf(address(quote.sellToken), address(this))\\n        );\\n    }\\n\\n    /// @notice Swap to YTs of a particular series\\n    /// @param adapter Adapter address for the Series\\n    /// @param maturity Maturity date for the Series\\n    /// @param amt Amount to sell\\n    /// @param targetToBorrow Amount of Target to borrow\\n    /// @param minAccepted Min accepted amount of YT\\n    /// @param receiver Address to receive the YT\\n    /// @param permit Permit to pull the tokens to swap from\\n    /// @param quote Quote with swap details\\n    /// @return targetBal amount of Target sent back\\n    /// @return ytBal amount of YT received\\n    /// @dev if quote.sellToken is neither target nor underlying, it will be swapped for underlying\\n    /// on 0x and wrapped into the target\\n    function swapForYTs(\\n        address adapter,\\n        uint256 maturity,\\n        uint256 amt,\\n        uint256 deadline,\\n        uint256 targetToBorrow,\\n        uint256 minAccepted,\\n        address receiver,\\n        PermitData calldata permit,\\n        SwapQuote calldata quote\\n    ) external payable returns (uint256 targetBal, uint256 ytBal) {\\n        if (address(quote.sellToken) != ETH) _transferFrom(permit, address(quote.sellToken), amt);\\n\\n        // swap sellToken to target, borrow more target and swap to YTs\\n        (targetBal, ytBal) = _flashBorrowAndSwapToYTs(\\n            adapter,\\n            maturity,\\n            _toTarget(adapter, amt, receiver, quote),\\n            deadline,\\n            targetToBorrow,\\n            minAccepted\\n        );\\n\\n        ERC20(Adapter(adapter).target()).safeTransfer(receiver, targetBal);\\n        ERC20(divider.yt(adapter, maturity)).safeTransfer(receiver, ytBal);\\n    }\\n\\n    /// @notice Swap PTs of a particular series\\n    /// @param adapter Adapter address for the series\\n    /// @param maturity Maturity date for the series\\n    /// @param ptBal Balance of PT to sell\\n    /// @param minAccepted Min accepted amount of quote.buyToken the user receives\\n    /// @param receiver Address to receive the tokens\\n    /// @param permit Permit to pull PTs\\n    /// @param quote Quote with swap details\\n    /// @return amt amount of tokens received\\n    /// @dev if quote.buyToken is neither target nor underlying, it will unwrap target\\n    /// and swap it on 0x\\n    function swapPTs(\\n        address adapter,\\n        uint256 maturity,\\n        uint256 ptBal,\\n        uint256 deadline,\\n        uint256 minAccepted,\\n        address receiver,\\n        PermitData calldata permit,\\n        SwapQuote calldata quote\\n    ) external payable returns (uint256 amt) {\\n        amt = _swapSenseToken(adapter, maturity, ptBal, deadline, minAccepted, 0, receiver, permit, quote);\\n    }\\n\\n    /// @notice Swap YTs of a particular series\\n    /// @param adapter Adapter address for the Series\\n    /// @param maturity Maturity date for the Series\\n    /// @param ytBal Balance of YTs to swap\\n    /// @param minAccepted Min accepted amount of tokens when selling them on Space\\n    /// @param receiver Address to receive the Target\\n    /// @param permit Permit to pull YTs\\n    /// @param quote Quote with swap details\\n    /// @return amt amount of Target received\\n    /// @dev if quote.buyToken is neither target nor underlying, it will unwrap target\\n    /// and swap it on 0x\\n    function swapYTs(\\n        address adapter,\\n        uint256 maturity,\\n        uint256 ytBal,\\n        uint256 deadline,\\n        uint256 minAccepted,\\n        address receiver,\\n        PermitData calldata permit,\\n        SwapQuote calldata quote\\n    ) external payable returns (uint256 amt) {\\n        amt = _swapSenseToken(adapter, maturity, ytBal, deadline, minAccepted, 1, receiver, permit, quote);\\n    }\\n\\n    /// @notice this function is here for backwards compatibility with AutoRoller. It does not suppport\\n    /// the use of `deadline` parameter. Use `swapYTs` instead.\\n    function swapYTsForTarget(\\n        address adapter,\\n        uint256 maturity,\\n        uint256 ytBal\\n    ) external returns (uint256 amt) {\\n        ERC20(divider.yt(adapter, maturity)).transferFrom(msg.sender, address(this), ytBal);\\n        amt = this.swapYTsForTargetHelper(\\n            msg.sender,\\n            adapter,\\n            maturity,\\n            ytBal,\\n            PermitData(IPermit2.PermitTransferFrom(IPermit2.TokenPermissions(ERC20(address(0)), 0), 0, 0), \\\"0x\\\")\\n        );\\n        _transfer(ERC20(Adapter(adapter).target()), msg.sender, amt);\\n    }\\n\\n    function swapYTsForTargetHelper(\\n        address sender,\\n        address adapter,\\n        uint256 maturity,\\n        uint256 ytBal,\\n        PermitData calldata permit\\n    ) external returns (uint256 amt) {\\n        if (msg.sender != address(this)) revert Errors.OnlyPeriphery();\\n        amt = _swapYTsForTarget(sender, adapter, maturity, ytBal, block.timestamp, permit);\\n    }\\n\\n    function _swapSenseToken(\\n        address adapter,\\n        uint256 maturity,\\n        uint256 sellAmt,\\n        uint256 deadline,\\n        uint256 minAccepted,\\n        uint8 mode, // 0 = PTs, 1 = YTs\\n        address receiver,\\n        PermitData calldata permit,\\n        SwapQuote calldata quote\\n    ) private returns (uint256 amt) {\\n        amt = (mode == 1)\\n            ? _swapYTsForTarget(msg.sender, adapter, maturity, sellAmt, deadline, permit)\\n            : _swapPTsForTarget(adapter, maturity, sellAmt, deadline, permit);\\n        amt = _fromTarget(adapter, amt, receiver, quote);\\n\\n        if (amt < minAccepted) revert Errors.UnexpectedSwapAmount();\\n        _transfer(quote.buyToken, receiver, amt);\\n    }\\n\\n    /// @notice Adds liquidity providing any Token\\n    /// @param adapter Adapter address for the Series\\n    /// @param maturity Maturity date for the Series\\n    /// @param amt Amount to provide\\n    /// @param params AddLiquidityParams struct with the params for the addLiquidity call\\n    /// @param mode 0 = issues and sell YT, 1 = issue and hold YT\\n    /// @param receiver Address to receive the BPT\\n    /// @param permit Permit to pull the tokens to swap from\\n    /// @param quote Quote with swap details\\n    /// @dev see return description of _addLiquidity\\n    /// @dev if quote.sellToken is neither target nor underlying, it will be swapped for underlying\\n    /// on 0x and wrapped into the target\\n    function addLiquidity(\\n        address adapter,\\n        uint256 maturity,\\n        uint256 amt,\\n        AddLiquidityParams memory params,\\n        uint8 mode,\\n        address receiver,\\n        PermitData calldata permit,\\n        SwapQuote calldata quote\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 tAmount,\\n            uint256 issued,\\n            uint256 lpShares\\n        )\\n    {\\n        if (address(quote.sellToken) != ETH) _transferFrom(permit, address(quote.sellToken), amt);\\n        (tAmount, issued, lpShares) = _addLiquidity(\\n            adapter,\\n            maturity,\\n            _toTarget(adapter, amt, receiver, quote),\\n            params,\\n            mode,\\n            receiver,\\n            permit\\n        );\\n    }\\n\\n    /// @notice Removes liquidity providing an amount of LP tokens and returns underlying\\n    /// @dev More info on `minAmountsOut`: https://github.com/balancer-labs/docs-developers/blob/main/resources/joins-and-exits/pool-exits.md#minamountsout\\n    /// @param adapter Adapter address for the Series\\n    /// @param maturity Maturity date for the Series\\n    /// @param lpBal Balance of LP tokens to provide\\n    /// @param params RemoveLiquidityParams struct with the params for the removeLiquidity call\\n    /// @param swapPTs Whether to swap PTs or not. If false, it will transfer PTs to the user\\n    /// @param receiver Address to receive the Underlying\\n    /// @param permit Permit to pull the LP tokens\\n    /// @param quote Quote with swap details\\n    /// @return amt amount of tokens received and ptBal PTs (in case it's called after maturity and redeem is restricted or intoTarget is false)\\n    /// @dev if quote.buyToken is neither target nor underlying, it will unwrap target\\n    /// and swap it on 0x\\n    /// if quote.buyToken is PT, it will return target and PTs\\n    function removeLiquidity(\\n        address adapter,\\n        uint256 maturity,\\n        uint256 lpBal,\\n        RemoveLiquidityParams memory params,\\n        bool swapPTs,\\n        address receiver,\\n        PermitData calldata permit,\\n        SwapQuote calldata quote\\n    ) external payable returns (uint256 amt, uint256 ptBal) {\\n        (amt, ptBal) = _removeLiquidity(adapter, maturity, lpBal, params, swapPTs, receiver, permit);\\n        amt = _fromTarget(adapter, amt, receiver, quote);\\n        _transfer(quote.buyToken, receiver, amt);\\n    }\\n\\n    /* ========== UTILS ========== */\\n\\n    /// @notice Mint PTs & YTs of a specific Series\\n    /// @param adapter Adapter address for the Series\\n    /// @param maturity Maturity date for the Series [unix time]\\n    /// @param amt Amount to issue with\\n    /// @dev The balance of PTs and YTs minted will be the same value in units of underlying (less fees)\\n    /// @param receiver Address where the resulting PTs and YTs will be transferred to\\n    /// @param permit Permit to pull tokens\\n    /// @param quote Quote with swap details\\n    /// @return uBal Amount of PTs and YTs minted\\n    /// @dev if quote.sellToken is neither target nor underlying, it will swap on 0x and wrap to target\\n    /// and swap it on 0x\\n    function issue(\\n        address adapter,\\n        uint256 maturity,\\n        uint256 amt,\\n        address receiver,\\n        PermitData calldata permit,\\n        SwapQuote calldata quote\\n    ) external payable returns (uint256 uBal) {\\n        if (address(quote.sellToken) != ETH) _transferFrom(permit, address(quote.sellToken), amt);\\n        uBal = divider.issue(adapter, maturity, _toTarget(adapter, amt, receiver, quote));\\n        ERC20(divider.pt(adapter, maturity)).transfer(receiver, uBal); // Send PTs to the receiver\\n        ERC20(divider.yt(adapter, maturity)).transfer(receiver, uBal); // Send YT to the receiver\\n    }\\n\\n    /// @notice Reconstitute Target by burning PT and YT\\n    /// @param adapter Adapter address for the Series\\n    /// @param maturity Maturity date for the Series\\n    /// @param uBal Amount of PT and YT to burn\\n    /// @param receiver Address where the resulting Target will be transferred\\n    /// @param permit Permit to pull PT and YT\\n    /// @param quote Quote with swap details\\n    /// @return amt Amount of tokens received from reconstituting target\\n    /// @dev if quote.buyToken is neither target nor underlying, it will unwrap target\\n    /// and swap it on 0x\\n    function combine(\\n        address adapter,\\n        uint256 maturity,\\n        uint256 uBal,\\n        address receiver,\\n        PermitBatchData calldata permit,\\n        SwapQuote calldata quote\\n    ) external payable returns (uint256 amt) {\\n        IPermit2.SignatureTransferDetails[] memory sigs = new IPermit2.SignatureTransferDetails[](2);\\n        sigs[0] = IPermit2.SignatureTransferDetails({ to: address(this), requestedAmount: uBal });\\n        sigs[1] = IPermit2.SignatureTransferDetails({ to: address(this), requestedAmount: uBal });\\n\\n        // pull underlying\\n        permit2.permitTransferFrom(permit.msg, sigs, msg.sender, permit.sig);\\n        amt = _fromTarget(adapter, divider.combine(adapter, maturity, uBal), receiver, quote);\\n        _transfer(quote.buyToken, receiver, amt);\\n    }\\n\\n    /* ========== ADMIN ========== */\\n\\n    /// @notice Enable or disable a factory\\n    /// @param f Factory's address\\n    /// @param isOn Flag setting this factory to enabled or disabled\\n    function setFactory(address f, bool isOn) external requiresTrust {\\n        if (factories[f] == isOn) revert Errors.ExistingValue();\\n        factories[f] = isOn;\\n        emit FactoryChanged(f, isOn);\\n    }\\n\\n    /// @notice Update the address for the Space Factory\\n    /// @param newSpaceFactory The Space Factory addresss to set\\n    function setSpaceFactory(address newSpaceFactory) external requiresTrust {\\n        emit SpaceFactoryChanged(address(spaceFactory), newSpaceFactory);\\n        spaceFactory = SpaceFactoryLike(newSpaceFactory);\\n    }\\n\\n    /// @dev Verifies an Adapter\\n    /// @param adapter Adapter to verify\\n    function verifyAdapter(address adapter) public requiresTrust {\\n        _verifyAdapter(adapter);\\n    }\\n\\n    function _verifyAdapter(address adapter) private {\\n        verified[adapter] = true;\\n        emit AdapterVerified(adapter);\\n    }\\n\\n    /// @notice Onboard a single Adapter w/o needing a factory\\n    /// @dev Called by a trusted address, approves Target for issuance, and onboards adapter to the Divider\\n    /// @param adapter Adapter to onboard\\n    /// @param addAdapter Whether to call divider.addAdapter or not (useful e.g when upgrading Periphery)\\n    function onboardAdapter(address adapter, bool addAdapter) public {\\n        if (!divider.permissionless() && !isTrusted[msg.sender]) revert Errors.OnlyPermissionless();\\n        _onboardAdapter(adapter, addAdapter);\\n    }\\n\\n    function _onboardAdapter(address adapter, bool addAdapter) private {\\n        ERC20 target = ERC20(Adapter(adapter).target());\\n        target.safeApprove(address(divider), type(uint256).max);\\n        target.safeApprove(address(adapter), type(uint256).max);\\n        ERC20(Adapter(adapter).underlying()).safeApprove(address(adapter), type(uint256).max);\\n        if (addAdapter) divider.addAdapter(adapter);\\n        emit AdapterOnboarded(adapter);\\n    }\\n\\n    /* ========== INTERNAL UTILS ========== */\\n\\n    function _balancerSwap(\\n        address assetIn,\\n        address assetOut,\\n        uint256 amountIn,\\n        uint256 deadline,\\n        bytes32 poolId,\\n        uint256 minAccepted,\\n        address payable receiver\\n    ) internal returns (uint256 amountOut) {\\n        // approve vault to spend tokenIn\\n        ERC20(assetIn).safeApprove(address(balancerVault), amountIn);\\n\\n        BalancerVault.SingleSwap memory request = BalancerVault.SingleSwap({\\n            poolId: poolId,\\n            kind: BalancerVault.SwapKind.GIVEN_IN,\\n            assetIn: IAsset(assetIn),\\n            assetOut: IAsset(assetOut),\\n            amount: amountIn,\\n            userData: hex\\\"\\\"\\n        });\\n\\n        BalancerVault.FundManagement memory funds = BalancerVault.FundManagement({\\n            sender: address(this),\\n            fromInternalBalance: false,\\n            recipient: receiver,\\n            toInternalBalance: false\\n        });\\n\\n        amountOut = balancerVault.swap(request, funds, minAccepted, deadline);\\n        emit Swapped(msg.sender, poolId, assetIn, assetOut, amountIn, amountOut, msg.sig);\\n    }\\n\\n    function _swapPTsForTarget(\\n        address adapter,\\n        uint256 maturity,\\n        uint256 ptBal,\\n        uint256 deadline,\\n        PermitData calldata permit\\n    ) internal returns (uint256 tBal) {\\n        _transferFrom(permit, divider.pt(adapter, maturity), ptBal);\\n\\n        if (divider.mscale(adapter, maturity) > 0 && !uint256(Adapter(adapter).level()).redeemRestricted()) {\\n            tBal = divider.redeem(adapter, maturity, ptBal);\\n        } else {\\n            tBal = _balancerSwap(\\n                divider.pt(adapter, maturity),\\n                Adapter(adapter).target(),\\n                ptBal,\\n                deadline,\\n                BalancerPool(spaceFactory.pools(adapter, maturity)).getPoolId(),\\n                0,\\n                payable(address(this))\\n            );\\n        }\\n    }\\n\\n    function _swapTargetForPTs(\\n        address adapter,\\n        uint256 maturity,\\n        uint256 tBal,\\n        uint256 deadline,\\n        uint256 minAccepted,\\n        address receiver\\n    ) internal returns (uint256 ptBal) {\\n        address pt = divider.pt(adapter, maturity);\\n        BalancerPool pool = BalancerPool(spaceFactory.pools(adapter, maturity));\\n        ptBal = _balancerSwap(\\n            Adapter(adapter).target(),\\n            pt,\\n            tBal,\\n            deadline,\\n            pool.getPoolId(),\\n            minAccepted,\\n            payable(receiver)\\n        ); // swap target for PTs\\n    }\\n\\n    function _swapYTsForTarget(\\n        address sender,\\n        address adapter,\\n        uint256 maturity,\\n        uint256 ytBal,\\n        uint256 deadline,\\n        PermitData calldata permit\\n    ) internal returns (uint256 tBal) {\\n        // Because there's some margin of error in the pricing functions here, smaller\\n        // swaps will be unreliable. Tokens with more than 18 decimals are not supported.\\n        if (ytBal * 10**(18 - ERC20(divider.yt(adapter, maturity)).decimals()) <= MIN_YT_SWAP_IN)\\n            revert Errors.SwapTooSmall();\\n\\n        // Transfer YTs into this contract if needed\\n        if (sender != address(this) && msg.sender != address(this))\\n            _transferFrom(permit, divider.yt(adapter, maturity), ytBal);\\n\\n        // Calculate target to borrow by calling AMM\\n        uint256 targetToBorrow;\\n        {\\n            BalancerPool pool = BalancerPool(spaceFactory.pools(adapter, maturity));\\n            bytes32 poolId = pool.getPoolId();\\n            (uint256 pti, uint256 targeti) = pool.getIndices();\\n            (ERC20[] memory tokens, uint256[] memory balances, ) = balancerVault.getPoolTokens(poolId);\\n            // Determine how much Target we'll need in to get `ytBal` balance of PT out\\n            // (space doesn't directly use of the fields from `SwapRequest` beyond `poolId`, so the values after are placeholders)\\n            targetToBorrow = BalancerPool(pool).onSwap(\\n                BalancerPool.SwapRequest({\\n                    kind: BalancerVault.SwapKind.GIVEN_OUT,\\n                    tokenIn: tokens[targeti],\\n                    tokenOut: tokens[pti],\\n                    amount: ytBal,\\n                    poolId: poolId,\\n                    lastChangeBlock: 0,\\n                    from: address(0),\\n                    to: address(0),\\n                    userData: \\\"\\\"\\n                }),\\n                balances[targeti],\\n                balances[pti]\\n            );\\n        }\\n\\n        // Flash borrow target (following actions in `onFlashLoan`)\\n        tBal = _flashBorrowAndSwapFromYTs(adapter, maturity, abi.encode(ytBal, targetToBorrow, deadline));\\n    }\\n\\n    /// @return tAmount if mode = 0, target received from selling YTs, otherwise, returns 0\\n    /// @return issued returns amount of YTs issued (and received) except first provision which returns 0\\n    /// @return lpShares LP Shares received from adding liquidity to a Space\\n    function _addLiquidity(\\n        address adapter,\\n        uint256 maturity,\\n        uint256 tBal,\\n        AddLiquidityParams memory params,\\n        uint8 mode,\\n        address receiver,\\n        PermitData calldata permit\\n    )\\n        internal\\n        returns (\\n            uint256 tAmount,\\n            uint256 issued,\\n            uint256 lpShares\\n        )\\n    {\\n        // 1. Compute target, issue PTs & YTs & add liquidity to space\\n        (issued, lpShares) = _computeIssueAddLiq(adapter, maturity, tBal, params.minBptOut, receiver);\\n\\n        if (issued > 0) {\\n            // issue = 0 means that we are on the first pool provision or that the pt:target ratio is 0:target\\n            if (mode == 0) {\\n                // 2. Sell YTs\\n                tAmount = _swapYTsForTarget(\\n                    address(this),\\n                    adapter,\\n                    maturity,\\n                    issued,\\n                    params.deadline,\\n                    permit // we send permit thought it won't be used\\n                );\\n                // Check that we got enough target\\n                if (tAmount < params.minAccepted) revert Errors.UnexpectedSwapAmount();\\n\\n                // 3. Send remaining Target to the receiver\\n                ERC20(Adapter(adapter).target()).safeTransfer(receiver, tAmount);\\n            } else {\\n                // 2. Send YTs to the receiver\\n                ERC20(divider.yt(adapter, maturity)).safeTransfer(receiver, issued);\\n            }\\n        }\\n    }\\n\\n    /// @dev Calculates amount of PTs in target terms (see description on `_computeTarget`) then issues\\n    /// PTs and YTs with the calculated amount and finally adds liquidity to space with the PTs issued\\n    /// and the diff between the target initially passed and the calculated amount\\n    function _computeIssueAddLiq(\\n        address adapter,\\n        uint256 maturity,\\n        uint256 tBal,\\n        uint256 minBptOut,\\n        address receiver\\n    ) internal returns (uint256 issued, uint256 lpShares) {\\n        BalancerPool pool = BalancerPool(spaceFactory.pools(adapter, maturity));\\n        // Compute target\\n        (ERC20[] memory tokens, uint256[] memory balances, ) = balancerVault.getPoolTokens(pool.getPoolId());\\n        (uint256 pti, uint256 targeti) = pool.getIndices(); // Ensure we have the right token Indices\\n\\n        // We do not add Principal Token liquidity if it haven't been initialized yet\\n        bool ptInitialized = balances[pti] != 0;\\n        uint256 ptBalInTarget = ptInitialized ? _computeTarget(adapter, balances[pti], balances[targeti], tBal) : 0;\\n\\n        // Issue PT & YT (skip if first pool provision)\\n        issued = ptBalInTarget > 0 ? divider.issue(adapter, maturity, ptBalInTarget) : 0;\\n\\n        // Add liquidity to Space & send the LP Shares to recipient\\n        uint256[] memory amounts = new uint256[](2);\\n        amounts[targeti] = tBal - ptBalInTarget;\\n        amounts[pti] = issued;\\n        lpShares = _addLiquidityToSpace(pool, PoolLiquidity(tokens, amounts, minBptOut), receiver);\\n    }\\n\\n    /// @dev Based on pt:target ratio from current pool reserves and tBal passed\\n    /// calculates amount of tBal needed so as to issue PTs that would keep the ratio\\n    function _computeTarget(\\n        address adapter,\\n        uint256 ptiBal,\\n        uint256 targetiBal,\\n        uint256 tBal\\n    ) internal returns (uint256 tBalForIssuance) {\\n        return\\n            tBal.fmul(\\n                ptiBal.fdiv(\\n                    Adapter(adapter).scale().fmul(FixedMath.WAD - Adapter(adapter).ifee()).fmul(targetiBal) + ptiBal\\n                )\\n            );\\n    }\\n\\n    function _removeLiquidity(\\n        address adapter,\\n        uint256 maturity,\\n        uint256 lpBal,\\n        RemoveLiquidityParams memory params,\\n        bool swapPTs,\\n        address receiver,\\n        PermitData calldata permit\\n    ) internal returns (uint256 tBal, uint256 ptBal) {\\n        bytes32 poolId;\\n        {\\n            BalancerPool pool = BalancerPool(spaceFactory.pools(adapter, maturity));\\n            _transferFrom(permit, address(pool), lpBal);\\n            poolId = pool.getPoolId();\\n        }\\n\\n        // 1. Remove liquidity from Space\\n        address pt = divider.pt(adapter, maturity);\\n        uint256 _ptBal;\\n        (tBal, _ptBal) = _removeLiquidityFromSpace(poolId, pt, Adapter(adapter).target(), params.minAmountsOut, lpBal);\\n\\n        if (divider.mscale(adapter, maturity) > 0) {\\n            if (uint256(Adapter(adapter).level()).redeemRestricted()) {\\n                ptBal = _ptBal;\\n            } else {\\n                // 2. Redeem PTs for Target\\n                tBal += divider.redeem(adapter, maturity, _ptBal);\\n            }\\n        } else {\\n            // 2. Sell PTs for Target (if there are)\\n            if (_ptBal > 0 && swapPTs) {\\n                tBal += _balancerSwap(\\n                    pt,\\n                    Adapter(adapter).target(),\\n                    _ptBal,\\n                    params.deadline,\\n                    poolId,\\n                    params.minAccepted,\\n                    payable(address(this))\\n                );\\n            } else {\\n                ptBal = _ptBal;\\n            }\\n        }\\n        if (ptBal > 0) ERC20(pt).transfer(receiver, ptBal);\\n    }\\n\\n    /// @notice Initiates a flash loan of Target, swaps target amount to PTs and combines\\n    /// @param adapter adapter\\n    /// @param maturity maturity\\n    /// @param data abi.encoded data:\\n    /// - YT amount the user has sent in\\n    /// - target amount to borrow\\n    /// - deadline for the swap\\n    /// @return tBal amount of Target obtained from a sale of YTs\\n    function _flashBorrowAndSwapFromYTs(\\n        address adapter,\\n        uint256 maturity,\\n        bytes memory data\\n    ) internal returns (uint256 tBal) {\\n        ERC20 target = ERC20(Adapter(adapter).target());\\n        uint256 decimals = target.decimals();\\n        uint256 acceptableError = decimals < 9 ? 1 : PRICE_ESTIMATE_ACCEPTABLE_ERROR / 10**(18 - decimals);\\n        (uint256 ytBalIn, uint256 amountToBorrow, uint256 deadline) = abi.decode(data, (uint256, uint256, uint256));\\n        bool result = Adapter(adapter).flashLoan(\\n            this,\\n            address(target),\\n            amountToBorrow,\\n            abi.encode(adapter, uint256(maturity), ytBalIn, ytBalIn - acceptableError, deadline, true)\\n        );\\n        if (!result) revert Errors.FlashBorrowFailed();\\n        tBal = _balanceOf(address(target), address(this));\\n    }\\n\\n    /// @notice Initiates a flash loan of Target, issues PTs/YTs and swaps the PTs to Target\\n    /// @param adapter adapter\\n    /// @param maturity taturity\\n    /// @param targetIn Target amount the user has sent in\\n    /// @param amountToBorrow Target amount to borrow\\n    /// @param minAccepted minimum amount of Target accepted out for the issued PTs\\n    /// @return targetBal amount of Target remaining after the flashloan has been paid back\\n    /// @return ytBal amount of YTs issued with the borrowed Target and the Target sent in\\n    function _flashBorrowAndSwapToYTs(\\n        address adapter,\\n        uint256 maturity,\\n        uint256 targetIn,\\n        uint256 deadline,\\n        uint256 amountToBorrow,\\n        uint256 minAccepted\\n    ) internal returns (uint256 targetBal, uint256 ytBal) {\\n        bool result = Adapter(adapter).flashLoan(\\n            this,\\n            Adapter(adapter).target(),\\n            amountToBorrow,\\n            abi.encode(adapter, uint256(maturity), targetIn, minAccepted, deadline, false)\\n        );\\n        if (!result) revert Errors.FlashBorrowFailed();\\n\\n        targetBal = _balanceOf(Adapter(adapter).target(), address(this));\\n        ytBal = _balanceOf(divider.yt(adapter, maturity), address(this));\\n        emit YTsPurchased(msg.sender, adapter, maturity, targetIn, targetBal, ytBal);\\n    }\\n\\n    /// @dev ERC-3156 Flash loan callback\\n    function onFlashLoan(\\n        address initiator,\\n        address, /* token */\\n        uint256 amountBorrrowed,\\n        uint256, /* fee */\\n        bytes calldata data\\n    ) external returns (bytes32) {\\n        (\\n            address adapter,\\n            uint256 maturity,\\n            uint256 amountIn,\\n            uint256 minAccepted,\\n            uint256 deadline,\\n            bool ytToTarget\\n        ) = abi.decode(data, (address, uint256, uint256, uint256, uint256, bool));\\n\\n        if (msg.sender != address(adapter)) revert Errors.FlashUntrustedBorrower();\\n        if (initiator != address(this)) revert Errors.FlashUntrustedLoanInitiator();\\n\\n        address target = Adapter(adapter).target();\\n        if (ytToTarget) {\\n            // Swap Target for PTs\\n            uint256 ptBal = _balancerSwap(\\n                target,\\n                divider.pt(adapter, maturity),\\n                _balanceOf(target, address(this)),\\n                deadline,\\n                BalancerPool(spaceFactory.pools(adapter, maturity)).getPoolId(),\\n                minAccepted, // min pt out\\n                payable(address(this))\\n            );\\n\\n            // Combine PTs and YTs\\n            divider.combine(adapter, maturity, ptBal < amountIn ? ptBal : amountIn);\\n        } else {\\n            // Issue PTs and YTs\\n            divider.issue(adapter, maturity, amountIn + amountBorrrowed);\\n            address pt = divider.pt(adapter, maturity);\\n\\n            // Swap PTs for Target\\n            _balancerSwap(\\n                pt,\\n                target,\\n                _balanceOf(pt, address(this)),\\n                deadline,\\n                BalancerPool(spaceFactory.pools(adapter, maturity)).getPoolId(),\\n                minAccepted, // min Target accepted\\n                payable(address(this))\\n            ); // minAccepted should be close to amountBorrrowed so that minimal Target dust is sent back to the caller\\n\\n            // Flashloaner contract will revert if not enough Target has been swapped out to pay back the loan\\n        }\\n\\n        return keccak256(\\\"ERC3156FlashBorrower.onFlashLoan\\\");\\n    }\\n\\n    function _addLiquidityToSpace(\\n        BalancerPool pool,\\n        PoolLiquidity memory liq,\\n        address receiver\\n    ) internal returns (uint256 lpBal) {\\n        IAsset[] memory assets = _convertERC20sToAssets(liq.tokens);\\n        for (uint8 i; i < liq.tokens.length; i++) {\\n            // Tokens and amounts must be in same order\\n            liq.tokens[i].safeApprove(address(balancerVault), liq.amounts[i]);\\n        }\\n\\n        // Behaves like EXACT_TOKENS_IN_FOR_BPT_OUT, user sends precise quantities of tokens,\\n        // and receives an estimated but unknown (computed at run time) quantity of BPT\\n        BalancerVault.JoinPoolRequest memory request = BalancerVault.JoinPoolRequest({\\n            assets: assets,\\n            maxAmountsIn: liq.amounts,\\n            userData: abi.encode(liq.amounts, liq.minBptOut),\\n            fromInternalBalance: false\\n        });\\n        lpBal = _balanceOf(address(pool), receiver);\\n        balancerVault.joinPool(pool.getPoolId(), address(this), receiver, request);\\n        lpBal = _balanceOf(address(pool), receiver) - lpBal;\\n    }\\n\\n    function _removeLiquidityFromSpace(\\n        bytes32 poolId,\\n        address pt,\\n        address target,\\n        uint256[] memory minAmountsOut,\\n        uint256 lpBal\\n    ) internal returns (uint256 tBal, uint256 ptBal) {\\n        // ExitPoolRequest params\\n        (ERC20[] memory tokens, , ) = balancerVault.getPoolTokens(poolId);\\n        BalancerVault.ExitPoolRequest memory request = BalancerVault.ExitPoolRequest({\\n            assets: _convertERC20sToAssets(tokens),\\n            minAmountsOut: minAmountsOut,\\n            userData: abi.encode(lpBal),\\n            toInternalBalance: false\\n        });\\n        tBal = _balanceOf(target, address(this));\\n        ptBal = _balanceOf(pt, address(this));\\n\\n        balancerVault.exitPool(poolId, address(this), payable(address(this)), request);\\n\\n        tBal = _balanceOf(target, address(this)) - tBal;\\n        ptBal = _balanceOf(pt, address(this)) - ptBal;\\n    }\\n\\n    // @dev Swaps ETH->ERC20, ERC20->ERC20 or ERC20->ETH held by this contract using a 0x-API quote\\n    function _fillQuote(SwapQuote calldata quote) internal returns (uint256 boughtAmount) {\\n        if (quote.sellToken == quote.buyToken) return 0; // No swap if the tokens are the same.\\n        if (quote.swapTarget != exchangeProxy) revert Errors.InvalidExchangeProxy();\\n\\n        // Give `spender` an infinite allowance to spend this contract's `sellToken`.\\n        if (address(quote.sellToken) != ETH)\\n            ERC20(address(quote.sellToken)).safeApprove(quote.spender, type(uint256).max);\\n\\n        uint256 sellAmount = address(quote.sellToken) == ETH\\n            ? address(this).balance\\n            : _balanceOf(address(quote.sellToken), address(this));\\n\\n        // Call the encoded swap function call on the contract at `swapTarget`,\\n        // passing along any ETH attached to this function call to cover protocol fees.\\n        (bool success, bytes memory res) = quote.swapTarget.call{ value: msg.value }(quote.swapCallData);\\n        if (!success) revert Errors.ZeroExSwapFailed(res);\\n\\n        // We assume the Periphery does not hold tokens so boughtAmount is always it's balance\\n        boughtAmount = address(quote.buyToken) == ETH\\n            ? address(this).balance\\n            : _balanceOf(address(quote.buyToken), address(this));\\n        sellAmount =\\n            sellAmount -\\n            (\\n                address(quote.sellToken) == ETH\\n                    ? address(this).balance\\n                    : _balanceOf(address(quote.sellToken), address(this))\\n            );\\n        if (boughtAmount == 0 || sellAmount == 0) revert Errors.ZeroSwapAmt();\\n\\n        emit BoughtTokens(address(quote.sellToken), address(quote.buyToken), sellAmount, boughtAmount);\\n    }\\n\\n    /// @notice Given an amount and a quote, decides whether it needs to wrap and make a swap on 0x,\\n    /// simply wrap tokens or do nothing\\n    function _toTarget(\\n        address adapter,\\n        uint256 _amt,\\n        address receiver,\\n        SwapQuote calldata quote\\n    ) internal returns (uint256 amt) {\\n        if (address(quote.sellToken) == Adapter(adapter).target()) {\\n            amt = _amt;\\n        } else if (address(quote.sellToken) == Adapter(adapter).underlying()) {\\n            amt = Adapter(adapter).wrapUnderlying(_amt);\\n        } else {\\n            // sell tokens for underlying and wrap into target\\n            amt = Adapter(adapter).wrapUnderlying(_fillQuote(quote));\\n\\n            // refund any remaining quote.sellToken to receiver\\n            _transfer(\\n                quote.sellToken,\\n                receiver,\\n                address(quote.sellToken) == ETH\\n                    ? address(this).balance\\n                    : _balanceOf(address(quote.sellToken), address(this))\\n            );\\n        }\\n    }\\n\\n    /// @notice Given an amount and a quote, decides whether it needs to unwrap and make a swap on 0x,\\n    /// simply unwrap tokens or do nothing\\n    /// @dev when swapping via 0x, the quote needs the amount of underlying that will be received from\\n    /// the unwrapTarget. This calculation is done off-chain.\\n    function _fromTarget(\\n        address adapter,\\n        uint256 _amt,\\n        address receiver,\\n        SwapQuote calldata quote\\n    ) internal returns (uint256 amt) {\\n        if (address(quote.buyToken) == Adapter(adapter).target()) {\\n            amt = _amt;\\n        } else if (address(quote.buyToken) == Adapter(adapter).underlying()) {\\n            amt = Adapter(adapter).unwrapTarget(_amt);\\n        } else {\\n            Adapter(adapter).unwrapTarget(_amt);\\n            amt = _fillQuote(quote);\\n            // refund excess tokens to receiver\\n            _transfer(quote.sellToken, receiver, _balanceOf(address(quote.sellToken), address(this)));\\n        }\\n    }\\n\\n    function _transferFrom(\\n        PermitData calldata permit,\\n        address token,\\n        uint256 amt\\n    ) internal {\\n        // Generate calldata for a standard safeTransferFrom call.\\n        bytes memory inputData = abi.encodeCall(ERC20.transferFrom, (msg.sender, address(this), amt));\\n\\n        bool success; // Call the token contract as normal, capturing whether it succeeded.\\n        assembly {\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(eq(mload(0), 1), iszero(returndatasize())),\\n                // Counterintuitively, this call() must be positioned after the or() in the\\n                // surrounding and() because and() evaluates its arguments from right to left.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the first slot of scratch space.\\n                call(gas(), token, 0, add(inputData, 32), mload(inputData), 0, 32)\\n            )\\n        }\\n\\n        // We'll fall back to using Permit2 if calling transferFrom on the token directly reverted.\\n        if (!success)\\n            permit2.permitTransferFrom(\\n                permit.msg,\\n                IPermit2.SignatureTransferDetails({ to: address(this), requestedAmount: amt }),\\n                msg.sender,\\n                permit.sig\\n            );\\n    }\\n\\n    function _transfer(\\n        ERC20 token,\\n        address receiver,\\n        uint256 amt\\n    ) internal {\\n        if (amt > 0) {\\n            if (address(token) == ETH) {\\n                (bool sent, ) = receiver.call{ value: amt }(\\\"\\\");\\n                if (!sent) revert Errors.TransferFailed();\\n            } else {\\n                token.safeTransfer(receiver, amt);\\n            }\\n        }\\n    }\\n\\n    function _balanceOf(address token, address user) internal returns (uint256 amt) {\\n        amt = ERC20(token).balanceOf(user);\\n    }\\n\\n    /// @notice From: https://github.com/balancer-labs/balancer-examples/blob/master/packages/liquidity-provision/contracts/LiquidityProvider.sol#L33\\n    /// @dev This helper function is a fast and cheap way to convert between IERC20[] and IAsset[] types\\n    function _convertERC20sToAssets(ERC20[] memory tokens) internal pure returns (IAsset[] memory assets) {\\n        assembly {\\n            assets := tokens\\n        }\\n    }\\n\\n    // required for refunds\\n    receive() external payable {}\\n\\n    /* ========== LOGS ========== */\\n\\n    event FactoryChanged(address indexed factory, bool indexed isOn);\\n    event SpaceFactoryChanged(address oldSpaceFactory, address newSpaceFactory);\\n    event SeriesSponsored(address indexed adapter, uint256 indexed maturity, address indexed sponsor);\\n    event AdapterDeployed(address indexed adapter);\\n    event AdapterOnboarded(address indexed adapter);\\n    event AdapterVerified(address indexed adapter);\\n    event YTsPurchased(\\n        address indexed sender,\\n        address adapter,\\n        uint256 maturity,\\n        uint256 targetIn,\\n        uint256 targetReturned,\\n        uint256 ytOut\\n    );\\n    event Swapped(\\n        address indexed sender,\\n        bytes32 indexed poolId,\\n        address assetIn,\\n        address assetOut,\\n        uint256 amountIn,\\n        uint256 amountOut,\\n        bytes4 indexed sig\\n    );\\n    event BoughtTokens(\\n        address indexed sellToken,\\n        address indexed buyToken,\\n        uint256 sellAmount,\\n        uint256 indexed boughtAmount\\n    );\\n}\\n\",\"keccak256\":\"0xe0f41e0e16d0c5e7cb4f2cfe1e67bb4d5b00deb875da133ffe096a469563e7e6\",\"license\":\"AGPL-3.0-only\"},\"@sense-finance/v1-core/src/adapters/abstract/BaseAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.15;\\n\\n// External references\\nimport { ERC20 } from \\\"solmate/src/tokens/ERC20.sol\\\";\\nimport { SafeTransferLib } from \\\"solmate/src/utils/SafeTransferLib.sol\\\";\\nimport { IERC3156FlashLender } from \\\"../../external/flashloan/IERC3156FlashLender.sol\\\";\\nimport { IERC3156FlashBorrower } from \\\"../../external/flashloan/IERC3156FlashBorrower.sol\\\";\\n\\n// Internal references\\nimport { Divider } from \\\"../../Divider.sol\\\";\\nimport { Errors } from \\\"@sense-finance/v1-utils/src/libs/Errors.sol\\\";\\n\\n/// @title Assign value to Target tokens\\nabstract contract BaseAdapter is IERC3156FlashLender {\\n    using SafeTransferLib for ERC20;\\n\\n    /* ========== CONSTANTS ========== */\\n\\n    bytes32 public constant CALLBACK_SUCCESS = keccak256(\\\"ERC3156FlashBorrower.onFlashLoan\\\");\\n\\n    /* ========== PUBLIC IMMUTABLES ========== */\\n\\n    /// @notice Sense core Divider address\\n    address public immutable divider;\\n\\n    /// @notice Target token to divide\\n    address public immutable target;\\n\\n    /// @notice Underlying for the Target\\n    address public immutable underlying;\\n\\n    /// @notice Issuance fee\\n    uint128 public immutable ifee;\\n\\n    /// @notice adapter params\\n    AdapterParams public adapterParams;\\n\\n    /* ========== DATA STRUCTURES ========== */\\n\\n    struct AdapterParams {\\n        /// @notice Oracle address\\n        address oracle;\\n        /// @notice Token to stake at issuance\\n        address stake;\\n        /// @notice Amount to stake at issuance\\n        uint256 stakeSize;\\n        /// @notice Min maturity (seconds after block.timstamp)\\n        uint256 minm;\\n        /// @notice Max maturity (seconds after block.timstamp)\\n        uint256 maxm;\\n        /// @notice WAD number representing the percentage of the total\\n        /// principal that's set aside for Yield Tokens (e.g. 0.1e18 means that 10% of the principal is reserved).\\n        /// @notice If `0`, it means no principal is set aside for Yield Tokens\\n        uint64 tilt;\\n        /// @notice The number this function returns will be used to determine its access by checking for binary\\n        /// digits using the following scheme:\\u00a0<onRedeem(y/n)><collect(y/n)><combine(y/n)><issue(y/n)>\\n        /// (e.g. 0101 enables `collect` and `issue`, but not `combine`)\\n        uint48 level;\\n        /// @notice 0 for monthly, 1 for weekly\\n        uint16 mode;\\n    }\\n\\n    /* ========== METADATA STORAGE ========== */\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    constructor(\\n        address _divider,\\n        address _target,\\n        address _underlying,\\n        uint128 _ifee,\\n        AdapterParams memory _adapterParams\\n    ) {\\n        divider = _divider;\\n        target = _target;\\n        underlying = _underlying;\\n        ifee = _ifee;\\n        adapterParams = _adapterParams;\\n\\n        name = string(abi.encodePacked(ERC20(_target).name(), \\\" Adapter\\\"));\\n        symbol = string(abi.encodePacked(ERC20(_target).symbol(), \\\"-adapter\\\"));\\n\\n        ERC20(_target).safeApprove(divider, type(uint256).max);\\n        ERC20(_adapterParams.stake).safeApprove(divider, type(uint256).max);\\n    }\\n\\n    /// @notice Loan `amount` target to `receiver`, and takes it back after the callback.\\n    /// @param receiver The contract receiving target, needs to implement the\\n    /// `onFlashLoan(address user, address adapter, uint256 maturity, uint256 amount)` interface.\\n    /// @param amount The amount of target lent.\\n    /// @param data (encoded adapter address, maturity and YT amount the use has sent in)\\n    function flashLoan(\\n        IERC3156FlashBorrower receiver,\\n        address, /* fee */\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (bool) {\\n        if (Divider(divider).periphery() != msg.sender) revert Errors.OnlyPeriphery();\\n        ERC20(target).safeTransfer(address(receiver), amount);\\n        bytes32 keccak = IERC3156FlashBorrower(receiver).onFlashLoan(msg.sender, target, amount, 0, data);\\n        if (keccak != CALLBACK_SUCCESS) revert Errors.FlashCallbackFailed();\\n        ERC20(target).safeTransferFrom(address(receiver), address(this), amount);\\n        return true;\\n    }\\n\\n    /* ========== REQUIRED VALUE GETTERS ========== */\\n\\n    /// @notice Calculate and return this adapter's Scale value for the current timestamp. To be overriden by child contracts\\n    /// @dev For some Targets, such as cTokens, this is simply the exchange rate, or `supply cToken / supply underlying`\\n    /// @dev For other Targets, such as AMM LP shares, specialized logic will be required\\n    /// @dev This function _must_ return a WAD number representing the current exchange rate\\n    /// between the Target and the Underlying.\\n    /// @return value WAD Scale value\\n    function scale() external virtual returns (uint256);\\n\\n    /// @notice Cached scale value getter\\n    /// @dev For situations where you need scale from a view function\\n    function scaleStored() external view virtual returns (uint256);\\n\\n    /// @notice Returns the current price of the underlying in ETH terms\\n    function getUnderlyingPrice() external view virtual returns (uint256);\\n\\n    /* ========== REQUIRED UTILITIES ========== */\\n\\n    /// @notice Deposits underlying `amount`in return for target. Must be overriden by child contracts\\n    /// @param amount Underlying amount\\n    /// @return amount of target returned\\n    function wrapUnderlying(uint256 amount) external virtual returns (uint256);\\n\\n    /// @notice Deposits target `amount`in return for underlying. Must be overriden by child contracts\\n    /// @param amount Target amount\\n    /// @return amount of underlying returned\\n    function unwrapTarget(uint256 amount) external virtual returns (uint256);\\n\\n    function flashFee(address token, uint256) external view returns (uint256) {\\n        if (token != target) revert Errors.TokenNotSupported();\\n        return 0;\\n    }\\n\\n    function maxFlashLoan(address token) external view override returns (uint256) {\\n        return ERC20(token).balanceOf(address(this));\\n    }\\n\\n    /* ========== OPTIONAL HOOKS ========== */\\n\\n    /// @notice Notification whenever the Divider adds or removes Target\\n    function notify(\\n        address, /* usr */\\n        uint256, /* amt */\\n        bool /* join */\\n    ) public virtual {\\n        return;\\n    }\\n\\n    /// @notice Hook called whenever a user redeems PT\\n    function onRedeem(\\n        uint256, /* uBal */\\n        uint256, /* mscale */\\n        uint256, /* maxscale */\\n        uint256 /* tBal */\\n    ) public virtual {\\n        return;\\n    }\\n\\n    /* ========== PUBLIC STORAGE ACCESSORS ========== */\\n\\n    function getMaturityBounds() external view virtual returns (uint256, uint256) {\\n        return (adapterParams.minm, adapterParams.maxm);\\n    }\\n\\n    function getStakeAndTarget()\\n        external\\n        view\\n        returns (\\n            address,\\n            address,\\n            uint256\\n        )\\n    {\\n        return (target, adapterParams.stake, adapterParams.stakeSize);\\n    }\\n\\n    function mode() external view returns (uint256) {\\n        return adapterParams.mode;\\n    }\\n\\n    function tilt() external view returns (uint256) {\\n        return adapterParams.tilt;\\n    }\\n\\n    function level() external view returns (uint256) {\\n        return adapterParams.level;\\n    }\\n}\\n\",\"keccak256\":\"0xda0e2780d7f4c37511bd3fffbcef76df3b5b7f6818db482d2e5e341048af9c0b\",\"license\":\"AGPL-3.0-only\"},\"@sense-finance/v1-core/src/adapters/abstract/factories/BaseFactory.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.15;\\n\\n// Internal references\\nimport { Errors } from \\\"@sense-finance/v1-utils/src/libs/Errors.sol\\\";\\nimport { BaseAdapter } from \\\"../BaseAdapter.sol\\\";\\nimport { Divider } from \\\"../../../Divider.sol\\\";\\nimport { FixedMath } from \\\"../../../external/FixedMath.sol\\\";\\nimport { Trust } from \\\"@sense-finance/v1-utils/src/Trust.sol\\\";\\n\\ninterface ERC20 {\\n    function decimals() external view returns (uint256 decimals);\\n}\\n\\ninterface ChainlinkOracleLike {\\n    function latestRoundData()\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n\\n    function decimals() external view returns (uint256 decimals);\\n}\\n\\nabstract contract BaseFactory is Trust {\\n    using FixedMath for uint256;\\n\\n    /* ========== CONSTANTS ========== */\\n\\n    address public constant ETH_USD_PRICEFEED = 0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419; // Chainlink ETH-USD price feed\\n\\n    /// @notice Sets level to `31` by default, which keeps all Divider lifecycle methods public\\n    /// (`issue`, `combine`, `collect`, etc), but not the `onRedeem` hook.\\n    uint48 public constant DEFAULT_LEVEL = 31;\\n\\n    /* ========== PUBLIC IMMUTABLES ========== */\\n\\n    /// @notice Sense core Divider address\\n    address public immutable divider;\\n\\n    /// @notice Adapter admin address\\n    address public restrictedAdmin;\\n\\n    /// @notice Rewards recipient\\n    address public rewardsRecipient;\\n\\n    /// @notice params for adapters deployed with this factory\\n    FactoryParams public factoryParams;\\n\\n    /* ========== DATA STRUCTURES ========== */\\n\\n    struct FactoryParams {\\n        address oracle; // oracle address\\n        address stake; // token to stake at issuance\\n        uint256 stakeSize; // amount to stake at issuance\\n        uint256 minm; // min maturity (seconds after block.timstamp)\\n        uint256 maxm; // max maturity (seconds after block.timstamp)\\n        uint128 ifee; // issuance fee\\n        uint16 mode; // 0 for monthly, 1 for weekly\\n        uint64 tilt; // tilt\\n        uint256 guard; // adapter guard (in usd, 18 decimals)\\n    }\\n\\n    constructor(\\n        address _divider,\\n        address _restrictedAdmin,\\n        address _rewardsRecipient,\\n        FactoryParams memory _factoryParams\\n    ) Trust(msg.sender) {\\n        divider = _divider;\\n        restrictedAdmin = _restrictedAdmin;\\n        rewardsRecipient = _rewardsRecipient;\\n        factoryParams = _factoryParams;\\n    }\\n\\n    /* ========== REQUIRED DEPLOY ========== */\\n\\n    /// @notice Deploys both an adapter and a target wrapper for the given _target\\n    /// @param _target Address of the Target token\\n    /// @param _data Additional data needed to deploy the adapter\\n    function deployAdapter(address _target, bytes memory _data) external virtual returns (address adapter) {}\\n\\n    /// Set adapter's guard to $100`000 in target\\n    /// @notice if Underlying-ETH price feed returns 0, we set the guard to 100000 target.\\n    function _setGuard(address _adapter) internal {\\n        // We only want to execute this if divider is guarded\\n        if (Divider(divider).guarded()) {\\n            BaseAdapter adapter = BaseAdapter(_adapter);\\n\\n            // Get Underlying-ETH price (18 decimals)\\n            try adapter.getUnderlyingPrice() returns (uint256 underlyingPriceInEth) {\\n                // Get ETH-USD price from Chainlink (8 decimals)\\n                (, int256 ethPrice, , uint256 ethUpdatedAt, ) = ChainlinkOracleLike(ETH_USD_PRICEFEED)\\n                    .latestRoundData();\\n\\n                if (block.timestamp - ethUpdatedAt > 2 hours) revert Errors.InvalidPrice();\\n\\n                // Calculate Underlying-USD price (normalised to 18 deicmals)\\n                uint256 price = underlyingPriceInEth.fmul(uint256(ethPrice), 1e8);\\n\\n                // Calculate Target-USD price (scale and price are in 18 decimals)\\n                price = adapter.scale().fmul(price);\\n\\n                // Calculate guard with factory guard (18 decimals) and target price (18 decimals)\\n                // normalised to target decimals and set it\\n                Divider(divider).setGuard(\\n                    _adapter,\\n                    factoryParams.guard.fdiv(price, 10**ERC20(adapter.target()).decimals())\\n                );\\n            } catch {}\\n        }\\n    }\\n\\n    function setRestrictedAdmin(address _restrictedAdmin) external requiresTrust {\\n        emit RestrictedAdminChanged(restrictedAdmin, _restrictedAdmin);\\n        restrictedAdmin = _restrictedAdmin;\\n    }\\n\\n    /// Set factory rewards recipient\\n    /// @notice all future deployed adapters will have the new rewards recipient\\n    /// @dev existing adapters rewards recipients will not be changed and can be\\n    /// done through `setRewardsRecipient` on each adapter contract\\n    function setRewardsRecipient(address _recipient) external requiresTrust {\\n        emit RewardsRecipientChanged(rewardsRecipient, _recipient);\\n        rewardsRecipient = _recipient;\\n    }\\n\\n    /// @notice sets trusted address for an adapter\\n    /// @dev factory must already be a trusted address for the adapter\\n    function setAdapterTrusted(\\n        address _adapter,\\n        address _user,\\n        bool _trusted\\n    ) public requiresTrust {\\n        Trust(_adapter).setIsTrusted(_user, _trusted);\\n    }\\n\\n    /// Set factory params\\n    /// @dev existing adapters will not be affected\\n    function setFactoryParams(FactoryParams calldata _factoryParams) external requiresTrust {\\n        emit FactoryParamsChanged(_factoryParams);\\n        factoryParams = _factoryParams;\\n    }\\n\\n    /* ========== LOGS ========== */\\n\\n    event RewardsRecipientChanged(address indexed oldRecipient, address indexed newRecipient);\\n    event RestrictedAdminChanged(address indexed oldAdmin, address indexed newAdmin);\\n    event FactoryParamsChanged(FactoryParams factoryParams);\\n}\\n\",\"keccak256\":\"0x78448abe7535b8a0171f9d7dc74a7a3e0f271f93d9423ba029abc80b6a40d73b\",\"license\":\"AGPL-3.0-only\"},\"@sense-finance/v1-core/src/external/DateTime.sol\":{\"content\":\"pragma solidity 0.8.15;\\n\\n/// @author Taken from: https://github.com/bokkypoobah/BokkyPooBahsDateTimeLibrary\\nlibrary DateTime {\\n    uint256 constant SECONDS_PER_DAY = 24 * 60 * 60;\\n    uint256 constant SECONDS_PER_HOUR = 60 * 60;\\n    uint256 constant SECONDS_PER_MINUTE = 60;\\n    int256 constant OFFSET19700101 = 2440588;\\n\\n    function timestampToDate(uint256 timestamp)\\n        internal\\n        pure\\n        returns (\\n            uint256 year,\\n            uint256 month,\\n            uint256 day\\n        )\\n    {\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n\\n    function timestampToDateTime(uint256 timestamp)\\n        internal\\n        pure\\n        returns (\\n            uint256 year,\\n            uint256 month,\\n            uint256 day,\\n            uint256 hour,\\n            uint256 minute,\\n            uint256 second\\n        )\\n    {\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        uint256 secs = timestamp % SECONDS_PER_DAY;\\n        hour = secs / SECONDS_PER_HOUR;\\n        secs = secs % SECONDS_PER_HOUR;\\n        minute = secs / SECONDS_PER_MINUTE;\\n        second = secs % SECONDS_PER_MINUTE;\\n    }\\n\\n    function toDateString(uint256 _timestamp)\\n        internal\\n        pure\\n        returns (\\n            string memory d,\\n            string memory m,\\n            string memory y\\n        )\\n    {\\n        (uint256 year, uint256 month, uint256 day) = timestampToDate(_timestamp);\\n        d = uintToString(day);\\n        m = uintToString(month);\\n        y = uintToString(year);\\n        // append a 0 to numbers < 10 so we should, e.g, 01 instead of just 1\\n        if (day < 10) d = string(abi.encodePacked(\\\"0\\\", d));\\n        if (month < 10) m = string(abi.encodePacked(\\\"0\\\", m));\\n    }\\n\\n    function format(uint256 _timestamp) internal pure returns (string memory datestring) {\\n        string[12] memory months = [\\n            \\\"Jan\\\",\\n            \\\"Feb\\\",\\n            \\\"Mar\\\",\\n            \\\"Apr\\\",\\n            \\\"May\\\",\\n            \\\"June\\\",\\n            \\\"July\\\",\\n            \\\"Aug\\\",\\n            \\\"Sept\\\",\\n            \\\"Oct\\\",\\n            \\\"Nov\\\",\\n            \\\"Dec\\\"\\n        ];\\n        (uint256 year, uint256 month, uint256 day) = timestampToDate(_timestamp);\\n        uint256 last = day % 10;\\n        string memory suffix = \\\"th\\\";\\n        if (day < 11 || day > 20) {\\n            if (last == 1) suffix = \\\"st\\\";\\n            if (last == 2) suffix = \\\"nd\\\";\\n            if (last == 3) suffix = \\\"rd\\\";\\n        }\\n        return string(abi.encodePacked(uintToString(day), suffix, \\\" \\\", months[month - 1], \\\" \\\", uintToString(year)));\\n    }\\n\\n    function getDayOfWeek(uint256 timestamp) internal pure returns (uint256 dayOfWeek) {\\n        uint256 _days = timestamp / SECONDS_PER_DAY;\\n        dayOfWeek = ((_days + 3) % 7) + 1;\\n    }\\n\\n    /// Taken from https://stackoverflow.com/questions/47129173/how-to-convert-uint-to-string-in-solidity\\n    function uintToString(uint256 _i) internal pure returns (string memory _uintAsString) {\\n        if (_i == 0) return \\\"0\\\";\\n        uint256 j = _i;\\n        uint256 len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint256 k = len;\\n        while (_i != 0) {\\n            k = k - 1;\\n            uint8 temp = (48 + uint8(_i - (_i / 10) * 10));\\n            bytes1 b1 = bytes1(temp);\\n            bstr[k] = b1;\\n            _i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate the number of days from 1970/01/01 to year/month/day using\\n    // the date conversion algorithm from\\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\n    // and subtracting the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // days = day\\n    //      - 32075\\n    //      + 1461 * (year + 4800 + (month - 14) / 12) / 4\\n    //      + 367 * (month - 2 - (month - 14) / 12 * 12) / 12\\n    //      - 3 * ((year + 4900 + (month - 14) / 12) / 100) / 4\\n    //      - offset\\n    // ------------------------------------------------------------------------\\n    function _daysFromDate(\\n        uint256 year,\\n        uint256 month,\\n        uint256 day\\n    ) internal pure returns (uint256 _days) {\\n        require(year >= 1970);\\n        int256 _year = int256(year);\\n        int256 _month = int256(month);\\n        int256 _day = int256(day);\\n\\n        int256 __days = _day -\\n            32075 +\\n            (1461 * (_year + 4800 + (_month - 14) / 12)) /\\n            4 +\\n            (367 * (_month - 2 - ((_month - 14) / 12) * 12)) /\\n            12 -\\n            (3 * ((_year + 4900 + (_month - 14) / 12) / 100)) /\\n            4 -\\n            OFFSET19700101;\\n\\n        _days = uint256(__days);\\n    }\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate year/month/day from the number of days since 1970/01/01 using\\n    // the date conversion algorithm from\\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\n    // and adding the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // int L = days + 68569 + offset\\n    // int N = 4 * L / 146097\\n    // L = L - (146097 * N + 3) / 4\\n    // year = 4000 * (L + 1) / 1461001\\n    // L = L - 1461 * year / 4 + 31\\n    // month = 80 * L / 2447\\n    // dd = L - 2447 * month / 80\\n    // L = month / 11\\n    // month = month + 2 - 12 * L\\n    // year = 100 * (N - 49) + year + L\\n    // ------------------------------------------------------------------------\\n    function _daysToDate(uint256 _days)\\n        internal\\n        pure\\n        returns (\\n            uint256 year,\\n            uint256 month,\\n            uint256 day\\n        )\\n    {\\n        int256 __days = int256(_days);\\n\\n        int256 L = __days + 68569 + OFFSET19700101;\\n        int256 N = (4 * L) / 146097;\\n        L = L - (146097 * N + 3) / 4;\\n        int256 _year = (4000 * (L + 1)) / 1461001;\\n        L = L - (1461 * _year) / 4 + 31;\\n        int256 _month = (80 * L) / 2447;\\n        int256 _day = L - (2447 * _month) / 80;\\n        L = _month / 11;\\n        _month = _month + 2 - 12 * L;\\n        _year = 100 * (N - 49) + _year + L;\\n\\n        year = uint256(_year);\\n        month = uint256(_month);\\n        day = uint256(_day);\\n    }\\n}\\n\",\"keccak256\":\"0x161ffa42bb0b7508a9372db90a7710088adbfb38cee34cdf523ff932b9b51043\"},\"@sense-finance/v1-core/src/external/FixedMath.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.15;\\n\\n/// @title Fixed point arithmetic library\\n/// @author Taken from https://github.com/Rari-Capital/solmate/blob/main/src/utils/FixedPointMathLib.sol\\nlibrary FixedMath {\\n    uint256 internal constant WAD = 1e18;\\n    uint256 internal constant RAY = 1e27;\\n\\n    function fmul(\\n        uint256 x,\\n        uint256 y,\\n        uint256 baseUnit\\n    ) internal pure returns (uint256) {\\n        return mulDivDown(x, y, baseUnit); // Equivalent to (x * y) / baseUnit rounded down.\\n    }\\n\\n    function fmul(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, y, WAD); // Equivalent to (x * y) / WAD rounded down.\\n    }\\n\\n    function fmulUp(\\n        uint256 x,\\n        uint256 y,\\n        uint256 baseUnit\\n    ) internal pure returns (uint256) {\\n        return mulDivUp(x, y, baseUnit); // Equivalent to (x * y) / baseUnit rounded up.\\n    }\\n\\n    function fmulUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, y, WAD); // Equivalent to (x * y) / WAD rounded up.\\n    }\\n\\n    function fdiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 baseUnit\\n    ) internal pure returns (uint256) {\\n        return mulDivDown(x, baseUnit, y); // Equivalent to (x * baseUnit) / y rounded down.\\n    }\\n\\n    function fdiv(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, WAD, y); // Equivalent to (x * WAD) / y rounded down.\\n    }\\n\\n    function fdivUp(\\n        uint256 x,\\n        uint256 y,\\n        uint256 baseUnit\\n    ) internal pure returns (uint256) {\\n        return mulDivUp(x, baseUnit, y); // Equivalent to (x * baseUnit) / y rounded up.\\n    }\\n\\n    function fdivUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, WAD, y); // Equivalent to (x * WAD) / y rounded up.\\n    }\\n\\n    function mulDivDown(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            // Store x * y in z for now.\\n            z := mul(x, y)\\n\\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\\n                revert(0, 0)\\n            }\\n\\n            // Divide z by the denominator.\\n            z := div(z, denominator)\\n        }\\n    }\\n\\n    function mulDivUp(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            // Store x * y in z for now.\\n            z := mul(x, y)\\n\\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\\n                revert(0, 0)\\n            }\\n\\n            // First, divide z - 1 by the denominator and add 1.\\n            // We allow z - 1 to underflow if z is 0, because we multiply the\\n            // end result by 0 if z is zero, ensuring we return 0 if z is zero.\\n            z := mul(iszero(iszero(z)), add(div(sub(z, 1), denominator), 1))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x466c07d32dda6d18099092be426495d84246b84d2654f212f69a623a1a63847d\",\"license\":\"AGPL-3.0-only\"},\"@sense-finance/v1-core/src/external/IPermit2.sol\":{\"content\":\"// Minimal Permit2 interface, derived from\\n// https://github.com/Uniswap/permit2/blob/main/src/interfaces/ISignatureTransfer.sol\\nimport { ERC20 } from \\\"solmate/src/tokens/ERC20.sol\\\";\\n\\ninterface IPermit2 {\\n    // Token and amount in a permit message.\\n    struct TokenPermissions {\\n        // Token to transfer.\\n        ERC20 token;\\n        // Amount to transfer.\\n        uint256 amount;\\n    }\\n\\n    // The permit2 message.\\n    struct PermitTransferFrom {\\n        // Permitted token and amount.\\n        TokenPermissions permitted;\\n        // Unique identifier for this permit.\\n        uint256 nonce;\\n        // Expiration for this permit.\\n        uint256 deadline;\\n    }\\n\\n    // The permit2 message for batched transfers.\\n    struct PermitBatchTransferFrom {\\n        // the tokens and corresponding amounts permitted for a transfer\\n        TokenPermissions[] permitted;\\n        // a unique value for every token owner's signature to prevent signature replays\\n        uint256 nonce;\\n        // deadline on the permit signature\\n        uint256 deadline;\\n    }\\n\\n    // Transfer details for permitTransferFrom().\\n    struct SignatureTransferDetails {\\n        // Recipient of tokens.\\n        address to;\\n        // Amount to transfer.\\n        uint256 requestedAmount;\\n    }\\n\\n    // Consume a permit2 message and transfer tokens.\\n    function permitTransferFrom(\\n        PermitTransferFrom calldata permit,\\n        SignatureTransferDetails calldata transferDetails,\\n        address owner,\\n        bytes calldata signature\\n    ) external;\\n\\n    // Consume a permit2 message and do a batched transfer of tokens.\\n    function permitTransferFrom(\\n        PermitBatchTransferFrom memory permit,\\n        SignatureTransferDetails[] calldata transferDetails,\\n        address owner,\\n        bytes calldata signature\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf4fcc66209970204571c366648d0a6798b3b6e8eb386306834b00b916d7c2546\"},\"@sense-finance/v1-core/src/external/balancer/Pool.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.15;\\n\\nimport { ERC20 } from \\\"solmate/src/tokens/ERC20.sol\\\";\\nimport { BalancerVault } from \\\"./Vault.sol\\\";\\nimport { RateProvider } from \\\"./RateProvider.sol\\\";\\n\\ninterface BalancerPool {\\n    function getTimeWeightedAverage(OracleAverageQuery[] memory queries)\\n        external\\n        view\\n        returns (uint256[] memory results);\\n\\n    enum Variable {\\n        PAIR_PRICE,\\n        BPT_PRICE,\\n        INVARIANT\\n    }\\n    struct OracleAverageQuery {\\n        Variable variable;\\n        uint256 secs;\\n        uint256 ago;\\n    }\\n\\n    function getSample(uint256 index)\\n        external\\n        view\\n        returns (\\n            int256 logPairPrice,\\n            int256 accLogPairPrice,\\n            int256 logBptPrice,\\n            int256 accLogBptPrice,\\n            int256 logInvariant,\\n            int256 accLogInvariant,\\n            uint256 timestamp\\n        );\\n\\n    function getPoolId() external view returns (bytes32);\\n\\n    function getVault() external view returns (address);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    struct SwapRequest {\\n        BalancerVault.SwapKind kind;\\n        ERC20 tokenIn;\\n        ERC20 tokenOut;\\n        uint256 amount;\\n        // Misc data\\n        bytes32 poolId;\\n        uint256 lastChangeBlock;\\n        address from;\\n        address to;\\n        bytes userData;\\n    }\\n\\n    function onSwap(\\n        SwapRequest memory swapRequest,\\n        uint256 currentBalanceTokenIn,\\n        uint256 currentBalanceTokenOut\\n    ) external returns (uint256 amount);\\n\\n    function getIndices() external view returns (uint256 pti, uint256 targeti);\\n\\n    function getRateProviders() external view returns (RateProvider[] memory providers);\\n}\\n\",\"keccak256\":\"0x0b8f1d8bcb04c21f0e4778e7b1939fb750d534a296c4e3df76acd5aa5d29f97b\",\"license\":\"AGPL-3.0-only\"},\"@sense-finance/v1-core/src/external/balancer/RateProvider.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.15;\\n\\ninterface RateProvider {\\n    function getRate() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x689224e44f87e478dfdd0c1c12c0231cd5de4a29d058f5a01748a37447b66f21\",\"license\":\"AGPL-3.0-only\"},\"@sense-finance/v1-core/src/external/balancer/Vault.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.15;\\n\\nimport { ERC20 } from \\\"solmate/src/tokens/ERC20.sol\\\";\\n\\ninterface IAsset {}\\n\\ninterface BalancerVault {\\n    struct JoinPoolRequest {\\n        IAsset[] assets;\\n        uint256[] maxAmountsIn;\\n        bytes userData;\\n        bool fromInternalBalance;\\n    }\\n    struct ExitPoolRequest {\\n        IAsset[] assets;\\n        uint256[] minAmountsOut;\\n        bytes userData;\\n        bool toInternalBalance;\\n    }\\n    enum PoolSpecialization {\\n        GENERAL,\\n        MINIMAL_SWAP_INFO,\\n        TWO_TOKEN\\n    }\\n    enum SwapKind {\\n        GIVEN_IN,\\n        GIVEN_OUT\\n    }\\n    enum JoinKind {\\n        INIT,\\n        EXACT_TOKENS_IN_FOR_BPT_OUT,\\n        TOKEN_IN_FOR_EXACT_BPT_OUT\\n    }\\n    enum ExitKind {\\n        EXACT_BPT_IN_FOR_ONE_TOKEN_OUT,\\n        BPT_IN_FOR_EXACT_TOKENS_OUT\\n    }\\n    struct SingleSwap {\\n        bytes32 poolId;\\n        SwapKind kind;\\n        IAsset assetIn;\\n        IAsset assetOut;\\n        uint256 amount;\\n        bytes userData;\\n    }\\n    struct FundManagement {\\n        address sender;\\n        bool fromInternalBalance;\\n        address payable recipient;\\n        bool toInternalBalance;\\n    }\\n\\n    function getPoolTokens(bytes32 poolId)\\n        external\\n        view\\n        returns (\\n            ERC20[] memory tokens,\\n            uint256[] memory balances,\\n            uint256 maxBlockNumber\\n        );\\n\\n    function getPool(bytes32 poolId) external view returns (address, PoolSpecialization);\\n\\n    function swap(\\n        SingleSwap memory singleSwap,\\n        FundManagement memory funds,\\n        uint256 limit,\\n        uint256 deadline\\n    ) external payable returns (uint256);\\n\\n    function joinPool(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        JoinPoolRequest memory request\\n    ) external payable;\\n\\n    function exitPool(\\n        bytes32 poolId,\\n        address sender,\\n        address payable recipient,\\n        ExitPoolRequest memory request\\n    ) external;\\n\\n    function getProtocolFeesCollector() external view returns (address);\\n\\n    function getAuthorizer() external returns (address);\\n}\\n\",\"keccak256\":\"0xc8115ff8e7bcc7e3b775d4e85051409a3e1d2819897133a4c390c3abf84c0348\",\"license\":\"AGPL-3.0-only\"},\"@sense-finance/v1-core/src/external/flashloan/IERC3156FlashBorrower.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\ninterface IERC3156FlashBorrower {\\n    /// @dev Receive a flash loan.\\n    /// @param initiator The initiator of the loan.\\n    /// @param token The loan currency.\\n    /// @param amount The amount of tokens lent.\\n    /// @param fee The additional amount of tokens to repay.\\n    /// @param data Arbitrary data structure, intended to contain user-defined parameters.\\n    /// @return The keccak256 hash of \\\"ERC3156FlashBorrower.onFlashLoan\\\"\\n    function onFlashLoan(\\n        address initiator,\\n        address token,\\n        uint256 amount,\\n        uint256 fee,\\n        bytes calldata data\\n    ) external returns (bytes32);\\n}\\n\",\"keccak256\":\"0xa2007326dfc89668d1864d688373d7e1ee07fee48f605d4f6726224004bdc8e5\"},\"@sense-finance/v1-core/src/external/flashloan/IERC3156FlashLender.sol\":{\"content\":\"pragma solidity ^0.8.0;\\nimport \\\"./IERC3156FlashBorrower.sol\\\";\\n\\ninterface IERC3156FlashLender {\\n    /// @dev The amount of currency available to be lent.\\n    /// @param token The loan currency.\\n    /// @return The amount of `token` that can be borrowed.\\n    function maxFlashLoan(address token) external view returns (uint256);\\n\\n    /// @dev The fee to be charged for a given loan.\\n    /// @param token The loan currency.\\n    /// @param amount The amount of tokens lent.\\n    /// @return The amount of `token` to be charged for the loan, on top of the returned principal.\\n    function flashFee(address token, uint256 amount) external view returns (uint256);\\n\\n    /// @dev Initiate a flash loan.\\n    /// @param receiver The receiver of the tokens in the loan, and the receiver of the callback.\\n    /// @param token The loan currency.\\n    /// @param amount The amount of tokens lent.\\n    /// @param data Arbitrary data structure, intended to contain user-defined parameters.\\n    function flashLoan(\\n        IERC3156FlashBorrower receiver,\\n        address token,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc91333a7ff49db20853c817de2c277a0559a1ee75eb1deeb7d2096a5d1022d61\"},\"@sense-finance/v1-core/src/tokens/Token.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.15;\\n\\n// External references\\nimport { ERC20 } from \\\"solmate/src/tokens/ERC20.sol\\\";\\n\\n// Internal references\\nimport { Trust } from \\\"@sense-finance/v1-utils/src/Trust.sol\\\";\\n\\n/// @title Base Token\\ncontract Token is ERC20, Trust {\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals,\\n        address _trusted\\n    ) ERC20(_name, _symbol, _decimals) Trust(_trusted) {}\\n\\n    /// @param usr The address to send the minted tokens\\n    /// @param amount The amount to be minted\\n    function mint(address usr, uint256 amount) public requiresTrust {\\n        _mint(usr, amount);\\n    }\\n\\n    /// @param usr The address from where to burn tokens from\\n    /// @param amount The amount to be burned\\n    function burn(address usr, uint256 amount) public requiresTrust {\\n        _burn(usr, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xe7ba2a15fdf5f1d20a10c108c5883cd3e35d473c262eee755e579d4e9272fa3a\",\"license\":\"AGPL-3.0-only\"},\"@sense-finance/v1-core/src/tokens/YT.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.15;\\n\\n// Internal references\\nimport { Divider } from \\\"../Divider.sol\\\";\\nimport { Token } from \\\"./Token.sol\\\";\\n\\n/// @title Yield Token\\n/// @notice Strips off excess before every transfer\\ncontract YT is Token {\\n    address public immutable adapter;\\n    address public immutable divider;\\n    uint256 public immutable maturity;\\n\\n    constructor(\\n        address _adapter,\\n        uint256 _maturity,\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals,\\n        address _divider\\n    ) Token(_name, _symbol, _decimals, _divider) {\\n        adapter = _adapter;\\n        maturity = _maturity;\\n        divider = _divider;\\n    }\\n\\n    function collect() external returns (uint256 _collected) {\\n        return Divider(divider).collect(msg.sender, adapter, maturity, 0, address(0));\\n    }\\n\\n    function transfer(address to, uint256 value) public override returns (bool) {\\n        Divider(divider).collect(msg.sender, adapter, maturity, value, to);\\n        return super.transfer(to, value);\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) public override returns (bool) {\\n        if (value > 0) Divider(divider).collect(from, adapter, maturity, value, to);\\n        return super.transferFrom(from, to, value);\\n    }\\n}\\n\",\"keccak256\":\"0x81bdc71bc663bd88015cdf4e43c235345b7479f5d86e7b3a59ad64a8df3203f8\",\"license\":\"AGPL-3.0-only\"},\"@sense-finance/v1-utils/src/Trust.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.7.0;\\n\\n/// @notice Ultra minimal authorization logic for smart contracts.\\n/// @author From https://github.com/Rari-Capital/solmate/blob/fab107565a51674f3a3b5bfdaacc67f6179b1a9b/src/auth/Trust.sol\\nabstract contract Trust {\\n    event UserTrustUpdated(address indexed user, bool trusted);\\n\\n    mapping(address => bool) public isTrusted;\\n\\n    constructor(address initialUser) {\\n        isTrusted[initialUser] = true;\\n\\n        emit UserTrustUpdated(initialUser, true);\\n    }\\n\\n    function setIsTrusted(address user, bool trusted) public virtual requiresTrust {\\n        isTrusted[user] = trusted;\\n\\n        emit UserTrustUpdated(user, trusted);\\n    }\\n\\n    modifier requiresTrust() {\\n        require(isTrusted[msg.sender], \\\"UNTRUSTED\\\");\\n\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x2d3887076c81425d3954aea7735aebd9093e3df69c8132b1713fae4a34201d43\",\"license\":\"AGPL-3.0-only\"},\"@sense-finance/v1-utils/src/libs/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.4;\\n\\nlibrary Errors {\\n    // Auth\\n    error CombineRestricted();\\n    error IssuanceRestricted();\\n    error NotAuthorized();\\n    error OnlyYT();\\n    error OnlyDivider();\\n    error OnlyPeriphery();\\n    error OnlyPermissionless();\\n    error OnlyAdapter();\\n    error RedeemRestricted();\\n    error Untrusted();\\n\\n    // Adapters\\n    error TokenNotSupported();\\n    error FlashCallbackFailed();\\n    error SenderNotEligible();\\n    error TargetMismatch();\\n    error TargetNotSupported();\\n    error InvalidAdapterType();\\n    error PriceOracleNotFound();\\n\\n    // Divider\\n    error AlreadySettled();\\n    error CollectNotSettled();\\n    error GuardCapReached();\\n    error IssuanceFeeCapExceeded();\\n    error IssueOnSettle();\\n    error NotSettled();\\n\\n    // Input & validations\\n    error AlreadyInitialized();\\n    error DuplicateSeries();\\n    error ExistingValue();\\n    error InvalidAdapter();\\n    error InvalidMaturity();\\n    error InvalidParam();\\n    error NotImplemented();\\n    error OutOfWindowBoundaries();\\n    error SeriesDoesNotExist();\\n    error SwapTooSmall();\\n    error TargetParamsNotSet();\\n    error PoolParamsNotSet();\\n    error PTParamsNotSet();\\n    error AttemptFailed();\\n    error InvalidPrice();\\n    error BadContractInteration();\\n\\n    // Periphery\\n    error FactoryNotSupported();\\n    error FlashBorrowFailed();\\n    error FlashUntrustedBorrower();\\n    error FlashUntrustedLoanInitiator();\\n    error UnexpectedSwapAmount();\\n    error TooMuchLeftoverTarget();\\n    error InvalidExchangeProxy();\\n    error ZeroExSwapFailed(bytes);\\n    error ZeroSwapAmt();\\n    error InvalidQuote();\\n\\n    // Fuse\\n    error AdapterNotSet();\\n    error FailedBecomeAdmin();\\n    error FailedAddTargetMarket();\\n    error FailedToAddPTMarket();\\n    error FailedAddLpMarket();\\n    error OracleNotReady();\\n    error PoolAlreadyDeployed();\\n    error PoolNotDeployed();\\n    error PoolNotSet();\\n    error SeriesNotQueued();\\n    error TargetExists();\\n    error TargetNotInFuse();\\n\\n    // Tokens\\n    error MintFailed();\\n    error RedeemFailed();\\n    error TransferFailed();\\n}\\n\",\"keccak256\":\"0xbc7698753872ab9aebc0b8d27e2543701ea3c2f9200fc509f7d38883835287ab\",\"license\":\"AGPL-3.0-only\"},\"@sense-finance/v1-utils/src/libs/Levels.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.7.0;\\n\\nlibrary Levels {\\n    uint256 private constant _INIT_BIT = 0x1;\\n    uint256 private constant _ISSUE_BIT = 0x2;\\n    uint256 private constant _COMBINE_BIT = 0x4;\\n    uint256 private constant _COLLECT_BIT = 0x8;\\n    uint256 private constant _REDEEM_BIT = 0x10;\\n    uint256 private constant _REDEEM_HOOK_BIT = 0x20;\\n\\n    function initRestricted(uint256 level) internal pure returns (bool) {\\n        return level & _INIT_BIT != _INIT_BIT;\\n    }\\n\\n    function issueRestricted(uint256 level) internal pure returns (bool) {\\n        return level & _ISSUE_BIT != _ISSUE_BIT;\\n    }\\n\\n    function combineRestricted(uint256 level) internal pure returns (bool) {\\n        return level & _COMBINE_BIT != _COMBINE_BIT;\\n    }\\n\\n    function collectDisabled(uint256 level) internal pure returns (bool) {\\n        return level & _COLLECT_BIT != _COLLECT_BIT;\\n    }\\n\\n    function redeemRestricted(uint256 level) internal pure returns (bool) {\\n        return level & _REDEEM_BIT != _REDEEM_BIT;\\n    }\\n\\n    function redeemHookDisabled(uint256 level) internal pure returns (bool) {\\n        return level & _REDEEM_HOOK_BIT != _REDEEM_HOOK_BIT;\\n    }\\n}\\n\",\"keccak256\":\"0x6c71e17beb73fca7577fb8868086159303eaecb1b397a446e8891b42f73fd502\",\"license\":\"AGPL-3.0-only\"},\"solmate/src/tokens/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC20.sol)\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\\nabstract contract ERC20 {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    uint8 public immutable decimals;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC20 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            EIP-2612 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal immutable INITIAL_CHAIN_ID;\\n\\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n\\n        INITIAL_CHAIN_ID = block.chainid;\\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               ERC20 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\\n        balanceOf[msg.sender] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(msg.sender, to, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\\n\\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\\n\\n        balanceOf[from] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             EIP-2612 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n        // Unchecked because the only math done is incrementing\\n        // the owner's nonce which cannot realistically overflow.\\n        unchecked {\\n            address recoveredAddress = ecrecover(\\n                keccak256(\\n                    abi.encodePacked(\\n                        \\\"\\\\x19\\\\x01\\\",\\n                        DOMAIN_SEPARATOR(),\\n                        keccak256(\\n                            abi.encode(\\n                                keccak256(\\n                                    \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\n                                ),\\n                                owner,\\n                                spender,\\n                                value,\\n                                nonces[owner]++,\\n                                deadline\\n                            )\\n                        )\\n                    )\\n                ),\\n                v,\\n                r,\\n                s\\n            );\\n\\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"INVALID_SIGNER\\\");\\n\\n            allowance[recoveredAddress][spender] = value;\\n        }\\n\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\\n    }\\n\\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                    keccak256(bytes(name)),\\n                    keccak256(\\\"1\\\"),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 amount) internal virtual {\\n        totalSupply += amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal virtual {\\n        balanceOf[from] -= amount;\\n\\n        // Cannot underflow because a user's balance\\n        // will never be larger than the total supply.\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n}\\n\",\"keccak256\":\"0x43aa1509bb753f053143530705d9c4eee415691d26a4779769bf028a74e6ac69\",\"license\":\"MIT\"},\"solmate/src/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\n/// @notice Gas optimized reentrancy protection for smart contracts.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/ReentrancyGuard.sol)\\n/// @author Modified from OpenZeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/security/ReentrancyGuard.sol)\\nabstract contract ReentrancyGuard {\\n    uint256 private locked = 1;\\n\\n    modifier nonReentrant() virtual {\\n        require(locked == 1, \\\"REENTRANCY\\\");\\n\\n        locked = 2;\\n\\n        _;\\n\\n        locked = 1;\\n    }\\n}\\n\",\"keccak256\":\"0xa0e50a0f232da7f289430601ba927c315266b20ec739761430b0fde926fefe55\",\"license\":\"MIT\"},\"solmate/src/utils/SafeTransferLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport {ERC20} from \\\"../tokens/ERC20.sol\\\";\\n\\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/SafeTransferLib.sol)\\n/// @dev Caution! This library won't check that a token has code, responsibility is delegated to the caller.\\nlibrary SafeTransferLib {\\n    /*//////////////////////////////////////////////////////////////\\n                             ETH OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        bool success;\\n\\n        assembly {\\n            // Transfer the ETH and store if it succeeded or not.\\n            success := call(gas(), to, amount, 0, 0, 0, 0)\\n        }\\n\\n        require(success, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            ERC20 OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferFrom(\\n        ERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        assembly {\\n            // We'll write our calldata to this slot below, but restore it later.\\n            let memPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(0, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\\n            mstore(4, from) // Append the \\\"from\\\" argument.\\n            mstore(36, to) // Append the \\\"to\\\" argument.\\n            mstore(68, amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 100 because that's the total length of our calldata (4 + 32 * 3)\\n                // Counterintuitively, this call() must be positioned after the or() in the\\n                // surrounding and() because and() evaluates its arguments from right to left.\\n                call(gas(), token, 0, 0, 100, 0, 32)\\n            )\\n\\n            mstore(0x60, 0) // Restore the zero slot to zero.\\n            mstore(0x40, memPointer) // Restore the memPointer.\\n        }\\n\\n        require(success, \\\"TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        assembly {\\n            // We'll write our calldata to this slot below, but restore it later.\\n            let memPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(0, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\\n            mstore(4, to) // Append the \\\"to\\\" argument.\\n            mstore(36, amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 68 because that's the total length of our calldata (4 + 32 * 2)\\n                // Counterintuitively, this call() must be positioned after the or() in the\\n                // surrounding and() because and() evaluates its arguments from right to left.\\n                call(gas(), token, 0, 0, 68, 0, 32)\\n            )\\n\\n            mstore(0x60, 0) // Restore the zero slot to zero.\\n            mstore(0x40, memPointer) // Restore the memPointer.\\n        }\\n\\n        require(success, \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeApprove(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        assembly {\\n            // We'll write our calldata to this slot below, but restore it later.\\n            let memPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(0, 0x095ea7b300000000000000000000000000000000000000000000000000000000)\\n            mstore(4, to) // Append the \\\"to\\\" argument.\\n            mstore(36, amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 68 because that's the total length of our calldata (4 + 32 * 2)\\n                // Counterintuitively, this call() must be positioned after the or() in the\\n                // surrounding and() because and() evaluates its arguments from right to left.\\n                call(gas(), token, 0, 0, 68, 0, 32)\\n            )\\n\\n            mstore(0x60, 0) // Restore the zero slot to zero.\\n            mstore(0x40, memPointer) // Restore the memPointer.\\n        }\\n\\n        require(success, \\\"APPROVE_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x5f2e1158c68c1f3d15b80e8a7dd92b6849f873066969562ad33c0abb80e536ff\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106101905760003560e01c8063857bee5f116100d7578063c3abbc6111610085578063c3abbc61146104c6578063c3fc76fb146104e6578063c7c30be1146104f9578063ce3a91281461052d578063d1fad33314610546578063da43f3d614610574578063fab5268914610594578063fdb8c046146105c457600080fd5b8063857bee5f146103f05780638596d158146104105780638cc5cbc41461042357806396d6487914610436578063a239739614610466578063b16bdcfe14610486578063bfe642ca146104a657600080fd5b806323e30c8b1161013f57806323e30c8b146102f95780632e635fd014610319578063378efa371461032c57806371013c101461036057806372661ff11461038057806374e97152146103935780637fa020fe146103bb5780638322fff2146103ce57600080fd5b806243c14b1461019c578063039c839b146101d45780630db065f41461020257806312261ee7146102425780631393916a14610283578063158274a5146102a55780631fc3e733146102d957600080fd5b3661019757005b600080fd5b6101af6101aa366004614a69565b6105dd565b604080516001600160a01b039384168152929091166020830152015b60405180910390f35b3480156101e057600080fd5b506101f46101ef366004614afb565b61075a565b6040519081526020016101cb565b34801561020e57600080fd5b5061023261021d366004614b63565b60036020526000908152604090205460ff1681565b60405190151581526020016101cb565b34801561024e57600080fd5b506102767f000000000000000000000000000000000000000000000000000000000000000081565b6040516101cb9190614b80565b34801561028f57600080fd5b506102a361029e366004614b94565b610794565b005b3480156102b157600080fd5b506102767f000000000000000000000000000000000000000000000000000000000000000081565b3480156102e557600080fd5b506101af6102f4366004614bcd565b610829565b34801561030557600080fd5b506101f4610314366004614c57565b610926565b6101f4610327366004614cd2565b610dbb565b34801561033857600080fd5b506102767f000000000000000000000000000000000000000000000000000000000000000081565b34801561036c57600080fd5b506102a361037b366004614b94565b610ddc565b6101f461038e366004614d81565b610ea0565b6103a66103a1366004614f61565b61118e565b604080519283526020830191909152016101cb565b6103a66103c9366004614fef565b6111da565b3480156103da57600080fd5b50610276600080516020615e7c83398151915281565b3480156103fc57600080fd5b50600154610276906001600160a01b031681565b6101f461041e366004614cd2565b611334565b6101f4610431366004614cd2565b6113e9565b34801561044257600080fd5b50610232610451366004614b63565b60006020819052908152604090205460ff1681565b34801561047257600080fd5b506102a3610481366004614b94565b6113fd565b34801561049257600080fd5b506101f46104a13660046150a8565b6114c8565b3480156104b257600080fd5b506102766104c13660046150dd565b6116fc565b3480156104d257600080fd5b506102a36104e1366004614b63565b6117fb565b6101f46104f4366004615141565b611836565b34801561050557600080fd5b506102767f000000000000000000000000000000000000000000000000000000000000000081565b34801561053957600080fd5b506101f464e8d4a5100081565b6105596105543660046151e3565b611a3f565b604080519384526020840192909252908201526060016101cb565b34801561058057600080fd5b506102a361058f366004614b63565b611aac565b3480156105a057600080fd5b506102326105af366004614b63565b60026020526000908152604090205460ff1681565b3480156105d057600080fd5b506101f46402540be40081565b600080600080886001600160a01b03166327b327d06040518163ffffffff1660e01b8152600401606060405180830381865afa158015610621573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061064591906152ae565b9093509150600080516020615e7c83398151915290506106686020870187614b63565b6001600160a01b03161461069157610691866106876020880188614b63565b8760400135611b44565b6001600160a01b0382166106a86020870187614b63565b6001600160a01b0316146106c1576106bf85611c54565b505b6106ce8989898585611f64565b90945092506106f2336106e18430612193565b6001600160a01b0385169190612203565b61074e6107026020870187614b63565b33600080516020615e7c83398151915261071f60208a018a614b63565b6001600160a01b0316146107485761074361073d60208a018a614b63565b30612193565b612287565b47612287565b50509550959350505050565b600033301461077c5760405163fb02114960e01b815260040160405180910390fd5b61078a86868686428761233f565b9695505050505050565b3360009081526020819052604090205460ff166107cc5760405162461bcd60e51b81526004016107c3906152f1565b60405180910390fd5b6001600160a01b03821660008181526020818152604091829020805460ff191685151590811790915591519182527fe95aec380cae16330d146d5499ef7db6f3657e477104a733e771bc09e500d986910160405180910390a25050565b600080600080866001600160a01b03166327b327d06040518163ffffffff1660e01b8152600401606060405180830381865afa15801561086d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089191906152ae565b6040516323b872dd60e01b815291945092506001600160a01b03841691506323b872dd906108c790339030908690600401615314565b6020604051808303816000875af11580156108e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090a9190615338565b506109188787878585611f64565b935093505050935093915050565b600080808080808061093a888a018a615355565b955095509550955095509550856001600160a01b0316336001600160a01b03161461097857604051632668780560e11b815260040160405180910390fd5b6001600160a01b038d1630146109a157604051630295451160e31b815260040160405180910390fd5b6000866001600160a01b031663d4b839926040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109e1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a0591906153b3565b90508115610c43576000610b99827f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d10eb4b98b8b6040518363ffffffff1660e01b8152600401610a619291906153d0565b602060405180830381865afa158015610a7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa291906153b3565b610aac8530612193565b87600160009054906101000a90046001600160a01b03166001600160a01b0316638f38a5558e8e6040518363ffffffff1660e01b8152600401610af09291906153d0565b602060405180830381865afa158015610b0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b3191906153b3565b6001600160a01b03166338fff2d06040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b9291906153e9565b8a306128b3565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ba89bebd8989898510610bd95789610bdb565b845b6040518463ffffffff1660e01b8152600401610bf993929190615402565b6020604051808303816000875af1158015610c18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c3c91906153e9565b5050610d88565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663dfe5ef4888888f89610c809190615439565b6040518463ffffffff1660e01b8152600401610c9e93929190615402565b6020604051808303816000875af1158015610cbd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce191906153e9565b5060405163d10eb4b960e01b81526000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063d10eb4b990610d33908b908b906004016153d0565b602060405180830381865afa158015610d50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d7491906153b3565b9050610d858183610aac8430612193565b50505b507f439148f0bbc682ca079e46d6e2c2f0c1e3b820f1a291b069d8882abf8cf18dd99d9c50505050505050505050505050565b6000610dcf898989898960018a8a8a612a54565b9998505050505050505050565b3360009081526020819052604090205460ff16610e0b5760405162461bcd60e51b81526004016107c3906152f1565b6001600160a01b03821660009081526002602052604090205481151560ff909116151503610e4c576040516338af801d60e21b815260040160405180910390fd5b6001600160a01b038216600081815260026020526040808220805460ff191685151590811790915590519092917fe63b400aabb14e166c6cf1b963fc9332222bc4dfe22a7fa4a487411d6cb83b3191a35050565b6000600080516020615e7c833981519152610ebe6020840184614b63565b6001600160a01b031614610ee357610ee383610edd6020850185614b63565b87611b44565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663dfe5ef488888610f208b8a8a89612acc565b6040518463ffffffff1660e01b8152600401610f3e93929190615402565b6020604051808303816000875af1158015610f5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f8191906153e9565b60405163d10eb4b960e01b81529091506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063d10eb4b990610fd2908a908a906004016153d0565b602060405180830381865afa158015610fef573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061101391906153b3565b6001600160a01b031663a9059cbb85836040518363ffffffff1660e01b81526004016110409291906153d0565b6020604051808303816000875af115801561105f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110839190615338565b5060405163574e779560e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063574e7795906110d2908a908a906004016153d0565b602060405180830381865afa1580156110ef573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061111391906153b3565b6001600160a01b031663a9059cbb85836040518363ffffffff1660e01b81526004016111409291906153d0565b6020604051808303816000875af115801561115f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111839190615338565b509695505050505050565b6000806111a08a8a8a8a8a8a8a612cfc565b90925090506111b18a8387866131c6565b91506111cd6111c66040850160208601614b63565b8684612287565b9850989650505050505050565b600080600080516020615e7c8339815191526111f96020850185614b63565b6001600160a01b03161461121e5761121e846112186020860186614b63565b8b611b44565b6112378b8b61122f8e8d8a89612acc565b8b8b8b6133a6565b80925081935050506112b685838d6001600160a01b031663d4b839926040518163ffffffff1660e01b8152600401602060405180830381865afa158015611282573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112a691906153b3565b6001600160a01b03169190612203565b61132685827f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663574e77958f8f6040518363ffffffff1660e01b81526004016113099291906153d0565b602060405180830381865afa158015611282573d6000803e3d6000fd5b995099975050505050505050565b6000600080516020615e7c8339815191526113526020840184614b63565b6001600160a01b03161461137757611377836113716020850185614b63565b89611b44565b61139089896113888c8b8988612acc565b898989613609565b90506113dd6113a26020840184614b63565b85600080516020615e7c8339815191526113bf6020870187614b63565b6001600160a01b0316146107485761074361073d6020870187614b63565b98975050505050505050565b6000610dcf898989898960008a8a8a612a54565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a1256f9f6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561145b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061147f9190615338565b15801561149c57503360009081526020819052604090205460ff16155b156114ba576040516321c64d4b60e21b815260040160405180910390fd5b6114c482826137e7565b5050565b60405163574e779560e01b81526000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063574e77959061151990879087906004016153d0565b602060405180830381865afa158015611536573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061155a91906153b3565b6001600160a01b03166323b872dd3330856040518463ffffffff1660e01b815260040161158993929190615314565b6020604051808303816000875af11580156115a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115cc9190615338565b506040805160e081018252600060a0820181815260c083018290528284019081526060830182905260808301919091528152815180830183526002815261060f60f31b602082810191909152820152905163039c839b60e01b8152309163039c839b916116449133918991899189919060040161549e565b6020604051808303816000875af1158015611663573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061168791906153e9565b90506116f5846001600160a01b031663d4b839926040518163ffffffff1660e01b8152600401602060405180830381865afa1580156116ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ee91906153b3565b3383612287565b9392505050565b6001600160a01b03841660009081526002602052604081205460ff166117355760405163722ceb5560e11b815260040160405180910390fd5b604051633cad2dcd60e01b81526001600160a01b03861690633cad2dcd906117659087908790879060040161553a565b6020604051808303816000875af1158015611784573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117a891906153b3565b6040519091506001600160a01b038216907f5c4dabb7dca79d442edd65b39b410aef25f4eea4a498150e7e442d5ca508f6d590600090a26117e8816139c0565b6117f38160016137e7565b949350505050565b3360009081526020819052604090205460ff1661182a5760405162461bcd60e51b81526004016107c3906152f1565b611833816139c0565b50565b60408051600280825260608201909252600091829190816020015b60408051808201909152600080825260208201528152602001906001900390816118515790505090506040518060400160405280306001600160a01b0316815260200187815250816000815181106118ab576118ab61555f565b60200260200101819052506040518060400160405280306001600160a01b0316815260200187815250816001815181106118e7576118e761555f565b60209081029190910101526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663edd9444b61192b8680615575565b833361193a60208a018a615595565b6040518663ffffffff1660e01b815260040161195a959493929190615654565b600060405180830381600087803b15801561197457600080fd5b505af1158015611988573d6000803e3d6000fd5b50505050611a2a887f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ba89bebd8b8b8b6040518463ffffffff1660e01b81526004016119e093929190615402565b6020604051808303816000875af11580156119ff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a2391906153e9565b87866131c6565b91506111836111c66040850160208601614b63565b60008080600080516020615e7c833981519152611a5f6020860186614b63565b6001600160a01b031614611a7e57611a7e856112186020870187614b63565b611a988b8b611a8f8e8d8b8a612acc565b8b8b8b8b613a0c565b919d909c50909a5098505050505050505050565b3360009081526020819052604090205460ff16611adb5760405162461bcd60e51b81526004016107c3906152f1565b600154604080516001600160a01b03928316815291831660208301527f561ac07fd1f491d12bc2774d0ae20a65b9f4b67297f14592626f265defc9c2c6910160405180910390a1600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000333083604051602401611b5b93929190615314565b60408051601f19818403018152919052602080820180516001600160e01b03166323b872dd60e01b1781528251929350600092839182885af13d156001600051141716905080611c4d5760408051808201909152308152602081018490526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906330f28b7a90879033611bfa6080840184615595565b6040518663ffffffff1660e01b8152600401611c1a95949392919061572d565b600060405180830381600087803b158015611c3457600080fd5b505af1158015611c48573d6000803e3d6000fd5b505050505b5050505050565b6000611c666040830160208401614b63565b6001600160a01b0316611c7c6020840184614b63565b6001600160a01b031603611c9257506000919050565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016611ccc60a0840160808501614b63565b6001600160a01b031614611cf3576040516301fb841560e31b815260040160405180910390fd5b600080516020615e7c833981519152611d0f6020840184614b63565b6001600160a01b031614611d5057611d50611d306080840160608501614b63565b600019611d406020860186614b63565b6001600160a01b03169190613b17565b6000600080516020615e7c833981519152611d6e6020850185614b63565b6001600160a01b031614611d9157611d8c61073d6020850185614b63565b611d93565b475b9050600080611da860a0860160808701614b63565b6001600160a01b031634611dbf60a0880188615595565b604051611dcd929190615793565b60006040518083038185875af1925050503d8060008114611e0a576040519150601f19603f3d011682016040523d82523d6000602084013e611e0f565b606091505b509150915081611e34578060405163377e60f160e01b81526004016107c391906157a3565b600080516020615e7c833981519152611e536040870160208801614b63565b6001600160a01b031614611e7957611e7461073d6040870160208801614b63565b611e7b565b475b9350600080516020615e7c833981519152611e996020870187614b63565b6001600160a01b031614611ebc57611eb761073d6020870187614b63565b611ebe565b475b611ec890846157b6565b9250831580611ed5575082155b15611ef35760405163d44b934560e01b815260040160405180910390fd5b83611f046040870160208801614b63565b6001600160a01b0316611f1a6020880188614b63565b6001600160a01b03167f314898f27b62de59a1d7326707c74b7991036f43ed22658d064228c032e76fda86604051611f5491815260200190565b60405180910390a4505050919050565b600080611f9b6001600160a01b0385167f000000000000000000000000000000000000000000000000000000000000000085613b17565b604051631f1cb97760e11b81526001600160a01b038881166004830152602482018890523360448301527f00000000000000000000000000000000000000000000000000000000000000001690633e3972ee9060640160408051808303816000875af115801561200f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061203391906157cd565b6001600160a01b038916600090815260036020526040902054919350915060ff16156120d457600154604051630ecaea7360e01b81526001600160a01b0390911690630ecaea739061208b908a908a906004016153d0565b6020604051808303816000875af11580156120aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120ce91906153b3565b50612151565b841561215157600154604051630ecaea7360e01b81526001600160a01b0390911690630ecaea739061210c908a908a906004016153d0565b6020604051808303816000875af115801561212b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061214f91906153b3565b505b604051339087906001600160a01b038a16907fe385633dd30b0221b25f7a6f7e18c5992b339b5686322abe8ceb999e81249cd190600090a49550959350505050565b6040516370a0823160e01b81526000906001600160a01b038416906370a08231906121c2908590600401614b80565b602060405180830381865afa1580156121df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116f591906153e9565b600060405163a9059cbb60e01b6000528360045282602452602060006044600080895af13d15601f3d11600160005114161716915060006060528060405250806122815760405162461bcd60e51b815260206004820152600f60248201526e1514905394d1915497d19052531151608a1b60448201526064016107c3565b50505050565b801561233a5773eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed196001600160a01b03841601612326576000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146122ff576040519150601f19603f3d011682016040523d82523d6000602084013e612304565b606091505b5050905080612281576040516312171d8360e31b815260040160405180910390fd5b61233a6001600160a01b0384168383612203565b505050565b600064e8d4a510007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663574e779588886040518363ffffffff1660e01b81526004016123959291906153d0565b602060405180830381865afa1580156123b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123d691906153b3565b6001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015612413573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061243791906157fc565b612442906012615819565b61244d90600a615920565b612457908661592f565b11612475576040516340a037a360e11b815260040160405180910390fd5b6001600160a01b038716301480159061248e5750333014155b1561252c5761252c827f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663574e779589896040518363ffffffff1660e01b81526004016124e59291906153d0565b602060405180830381865afa158015612502573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061252691906153b3565b86611b44565b600154604051638f38a55560e01b815260009182916001600160a01b0390911690638f38a55590612563908b908b906004016153d0565b602060405180830381865afa158015612580573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125a491906153b3565b90506000816001600160a01b03166338fff2d06040518163ffffffff1660e01b8152600401602060405180830381865afa1580156125e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061260a91906153e9565b9050600080836001600160a01b0316635863056d6040518163ffffffff1660e01b81526004016040805180830381865afa15801561264c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612670919061594e565b915091506000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f94d4668866040518263ffffffff1660e01b81526004016126c591815260200190565b600060405180830381865afa1580156126e2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261270a91908101906159cd565b5091509150856001600160a01b0316639d2c110c60405180610120016040528060018081111561273c5761273c615a9a565b81526020018587815181106127535761275361555f565b60200260200101516001600160a01b0316815260200185888151811061277b5761277b61555f565b60200260200101516001600160a01b031681526020018e81526020018881526020016000815260200160006001600160a01b0316815260200160006001600160a01b03168152602001604051806020016040528060008152508152508386815181106127e9576127e961555f565b60200260200101518488815181106128035761280361555f565b60200260200101516040518463ffffffff1660e01b815260040161282993929190615ad2565b6020604051808303816000875af1158015612848573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061286c91906153e9565b96505050505050506113dd878787848860405160200161289f939291909283526020830191909152604082015260600190565b604051602081830303815290604052613b94565b60006128e96001600160a01b0389167f000000000000000000000000000000000000000000000000000000000000000088613b17565b6040805160c081018252858152600060208083018290526001600160a01b03808d16848601528b811660608086019190915260808086018d90528651808501885285815260a0870152865190810187523081529283018490528782168387015282019290925292516352bbbe2960e01b81529192917f0000000000000000000000000000000000000000000000000000000000000000909116906352bbbe299061299d90859085908a908d90600401615b99565b6020604051808303816000875af11580156129bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129e091906153e9565b604080516001600160a01b038d811682528c1660208201529081018a9052606081018290529093506001600160e01b03196000351690879033907f771a8215d0541283507c0ebd99d6a6406b7254dc8feccdaa6c160c305d68d7489060800160405180910390a45050979650505050505050565b60008460ff16600114612a7357612a6e8a8a8a8a87613da0565b612a81565b612a81338b8b8b8b8861233f565b9050612a8f8a8286856131c6565b905085811015612ab2576040516351eb56bb60e01b815260040160405180910390fd5b610dcf612ac56040840160208501614b63565b8583612287565b6000846001600160a01b031663d4b839926040518163ffffffff1660e01b8152600401602060405180830381865afa158015612b0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b3091906153b3565b6001600160a01b0316612b466020840184614b63565b6001600160a01b031603612b5b5750826117f3565b846001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa158015612b99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bbd91906153b3565b6001600160a01b0316612bd36020840184614b63565b6001600160a01b031603612c5457604051634aae9fed60e01b8152600481018590526001600160a01b03861690634aae9fed906024015b6020604051808303816000875af1158015612c29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c4d91906153e9565b90506117f3565b846001600160a01b0316634aae9fed612c6c84611c54565b6040518263ffffffff1660e01b8152600401612c8a91815260200190565b6020604051808303816000875af1158015612ca9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ccd91906153e9565b90506117f3612cdf6020840184614b63565b84600080516020615e7c8339815191526113bf6020870187614b63565b600154604051638f38a55560e01b81526000918291829182916001600160a01b0390911690638f38a55590612d37908e908e906004016153d0565b602060405180830381865afa158015612d54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d7891906153b3565b9050612d8585828b611b44565b806001600160a01b03166338fff2d06040518163ffffffff1660e01b8152600401602060405180830381865afa158015612dc3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612de791906153e9565b91505060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d10eb4b98c8c6040518363ffffffff1660e01b8152600401612e3a9291906153d0565b602060405180830381865afa158015612e57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e7b91906153b3565b90506000612ef183838e6001600160a01b031663d4b839926040518163ffffffff1660e01b8152600401602060405180830381865afa158015612ec2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ee691906153b3565b8c602001518e61414e565b809250819650505060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166395197d308e8e6040518363ffffffff1660e01b8152600401612f499291906153d0565b602060405180830381865afa158015612f66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f8a91906153e9565b11156130b057612fff8c6001600160a01b0316636fd5ae156040518163ffffffff1660e01b8152600401602060405180830381865afa158015612fd1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ff591906153e9565b6010908116141590565b1561300c5780935061313e565b604051632b83cccd60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690632b83cccd9061305c908f908f908690600401615402565b6020604051808303816000875af115801561307b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061309f91906153e9565b6130a99086615439565b945061313e565b6000811180156130bd5750875b1561313a5761309f828d6001600160a01b031663d4b839926040518163ffffffff1660e01b8152600401602060405180830381865afa158015613104573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061312891906153b3565b838c60400151878e60000151306128b3565b8093505b83156131b75760405163a9059cbb60e01b81526001600160a01b0383169063a9059cbb90613172908a9088906004016153d0565b6020604051808303816000875af1158015613191573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131b59190615338565b505b50505097509795505050505050565b6000846001600160a01b031663d4b839926040518163ffffffff1660e01b8152600401602060405180830381865afa158015613206573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061322a91906153b3565b6001600160a01b03166132436040840160208501614b63565b6001600160a01b0316036132585750826117f3565b846001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa158015613296573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132ba91906153b3565b6001600160a01b03166132d36040840160208501614b63565b6001600160a01b03160361330e576040516351c39ea160e01b8152600481018590526001600160a01b038616906351c39ea190602401612c0a565b6040516351c39ea160e01b8152600481018590526001600160a01b038616906351c39ea1906024016020604051808303816000875af1158015613355573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061337991906153e9565b5061338382611c54565b90506117f36133956020840184614b63565b8461074361073d6020870187614b63565b6000806000886001600160a01b0316635cffe9de308b6001600160a01b031663d4b839926040518163ffffffff1660e01b8152600401602060405180830381865afa1580156133f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061341d91906153b3565b888d8d8d8b8e600060405160200161343a96959493929190615c54565b6040516020818303038152906040526040518563ffffffff1660e01b81526004016134689493929190615c89565b6020604051808303816000875af1158015613487573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134ab9190615338565b9050806134cb576040516310f99cf760e31b815260040160405180910390fd5b613530896001600160a01b031663d4b839926040518163ffffffff1660e01b8152600401602060405180830381865afa15801561350c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061073d91906153b3565b92506135a07f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663574e77958b8b6040518363ffffffff1660e01b81526004016135839291906153d0565b602060405180830381865afa15801561350c573d6000803e3d6000fd5b604080516001600160a01b038c168152602081018b9052908101899052606081018590526080810182905290925033907f25841a32c1c1cef7b2d2bcea90bd94fcafbcd2459595475b86087699c16dc4959060a00160405180910390a250965096945050505050565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d10eb4b989896040518363ffffffff1660e01b815260040161365a9291906153d0565b602060405180830381865afa158015613677573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061369b91906153b3565b600154604051638f38a55560e01b81529192506000916001600160a01b0390911690638f38a555906136d3908c908c906004016153d0565b602060405180830381865afa1580156136f0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061371491906153b3565b9050610dcf896001600160a01b031663d4b839926040518163ffffffff1660e01b8152600401602060405180830381865afa158015613757573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061377b91906153b3565b838989856001600160a01b03166338fff2d06040518163ffffffff1660e01b8152600401602060405180830381865afa1580156137bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137e091906153e9565b8a8a6128b3565b6000826001600160a01b031663d4b839926040518163ffffffff1660e01b8152600401602060405180830381865afa158015613827573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061384b91906153b3565b90506138836001600160a01b0382167f0000000000000000000000000000000000000000000000000000000000000000600019613b17565b6138996001600160a01b03821684600019613b17565b61390283600019856001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa1580156138de573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d4091906153b3565b8115613987576040516360d54d4160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906360d54d4190613954908690600401614b80565b600060405180830381600087803b15801561396e57600080fd5b505af1158015613982573d6000803e3d6000fd5b505050505b6040516001600160a01b038416907fae4a2338a83fc8bfaca3a6cbb54494b5c00e9d8a65dc9cf39135b00da497798290600090a2505050565b6001600160a01b038116600081815260036020526040808220805460ff19166001179055517ff9f4ea4fb47406a3baf9adc8bd38b1c82e5a5fee5de9b3c5af3218400fb530c09190a250565b6000806000613a228a8a8a8a6020015189614310565b90925090508115613b0a578560ff16600003613ab757613a4a308b8b858b604001518961233f565b8751909350831015613a6f576040516351eb56bb60e01b815260040160405180910390fd5b613ab285848c6001600160a01b031663d4b839926040518163ffffffff1660e01b8152600401602060405180830381865afa158015611282573d6000803e3d6000fd5b613b0a565b613b0a85837f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663574e77958e8e6040518363ffffffff1660e01b81526004016113099291906153d0565b9750975097945050505050565b600060405163095ea7b360e01b6000528360045282602452602060006044600080895af13d15601f3d11600160005114161716915060006060528060405250806122815760405162461bcd60e51b815260206004820152600e60248201526d1054141493d59157d1905253115160921b60448201526064016107c3565b600080846001600160a01b031663d4b839926040518163ffffffff1660e01b8152600401602060405180830381865afa158015613bd5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613bf991906153b3565b90506000816001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015613c3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c5f91906157fc565b60ff169050600060098210613c9857613c798260126157b6565b613c8490600a615cbc565b613c93906402540be400615cc8565b613c9b565b60015b9050600080600087806020019051810190613cb69190615cea565b9194509250905060006001600160a01b038b16635cffe9de3089868f8f8a613cde8d826157b6565b8a6001604051602001613cf696959493929190615c54565b6040516020818303038152906040526040518563ffffffff1660e01b8152600401613d249493929190615c89565b6020604051808303816000875af1158015613d43573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d679190615338565b905080613d87576040516310f99cf760e31b815260040160405180910390fd5b613d918730612193565b9b9a5050505050505050505050565b6000613df4827f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d10eb4b989896040518363ffffffff1660e01b81526004016124e59291906153d0565b60405163095197d360e41b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906395197d3090613e45908a908a906004016153d0565b602060405180830381865afa158015613e62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e8691906153e9565b118015613ed15750613ecf866001600160a01b0316636fd5ae156040518163ffffffff1660e01b8152600401602060405180830381865afa158015612fd1573d6000803e3d6000fd5b155b15613f7057604051632b83cccd60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690632b83cccd90613f2690899089908990600401615402565b6020604051808303816000875af1158015613f45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f6991906153e9565b9050614145565b60405163d10eb4b960e01b815261078a906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063d10eb4b990613fc2908a908a906004016153d0565b602060405180830381865afa158015613fdf573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061400391906153b3565b876001600160a01b031663d4b839926040518163ffffffff1660e01b8152600401602060405180830381865afa158015614041573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061406591906153b3565b600154604051638f38a55560e01b8152889188916001600160a01b0390911690638f38a5559061409b908e908e906004016153d0565b602060405180830381865afa1580156140b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140dc91906153b3565b6001600160a01b03166338fff2d06040518163ffffffff1660e01b8152600401602060405180830381865afa158015614119573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061413d91906153e9565b6000306128b3565b95945050505050565b60008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f94d4668896040518263ffffffff1660e01b81526004016141a191815260200190565b600060405180830381865afa1580156141be573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526141e691908101906159cd565b50509050600060405180608001604052806141fe8490565b81526020018781526020018660405160200161421c91815260200190565b60405160208183030381529060405281526020016000151581525090506142438730612193565b935061424f8830612193565b604051638bdb391360e01b81529093506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690638bdb3913906142a4908c90309081908790600401615ddf565b600060405180830381600087803b1580156142be57600080fd5b505af11580156142d2573d6000803e3d6000fd5b50505050836142e18830612193565b6142eb91906157b6565b9350826142f88930612193565b61430291906157b6565b925050509550959350505050565b600154604051638f38a55560e01b8152600091829182916001600160a01b031690638f38a55590614347908b908b906004016153d0565b602060405180830381865afa158015614364573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061438891906153b3565b90506000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f94d4668846001600160a01b03166338fff2d06040518163ffffffff1660e01b8152600401602060405180830381865afa1580156143fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061441e91906153e9565b6040518263ffffffff1660e01b815260040161443c91815260200190565b600060405180830381865afa158015614459573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261448191908101906159cd565b5091509150600080846001600160a01b0316635863056d6040518163ffffffff1660e01b81526004016040805180830381865afa1580156144c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906144ea919061594e565b9150915060008383815181106145025761450261555f565b602002602001015160001415905060008161451e57600061455c565b61455c8e8686815181106145345761453461555f565b602002602001015187868151811061454e5761454e61555f565b60200260200101518f6146a6565b90506000811161456d576000614600565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663dfe5ef488f8f846040518463ffffffff1660e01b81526004016145bd93929190615402565b6020604051808303816000875af11580156145dc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061460091906153e9565b604080516002808252606082018352929b506000929091602083019080368337019050509050614630828e6157b6565b8185815181106146425761464261555f565b602002602001018181525050898186815181106146615761466161555f565b6020026020010181815250506146928860405180606001604052808a81526020018481526020018f8152508d6147b5565b985050505050505050509550959350505050565b60006141456147ae8561479d866147978a6001600160a01b031663b8c15a9f6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156146f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906147189190615e11565b614733906001600160801b0316670de0b6b3a76400006157b6565b8b6001600160a01b031663f51e181a6040518163ffffffff1660e01b81526004016020604051808303816000875af1158015614773573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061479791906153e9565b906149b6565b6147a79190615439565b86906149d1565b83906149b6565b815160009060005b84515160ff8216101561485a576148487f000000000000000000000000000000000000000000000000000000000000000086602001518360ff16815181106148075761480761555f565b602002602001015187600001518460ff16815181106148285761482861555f565b60200260200101516001600160a01b0316613b179092919063ffffffff16565b8061485281615e3a565b9150506147bd565b50600060405180608001604052808381526020018660200151815260200186602001518760400151604051602001614893929190615e59565b60405160208183030381529060405281526020016000151581525090506148ba8685612193565b92507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b95cac28876001600160a01b03166338fff2d06040518163ffffffff1660e01b8152600401602060405180830381865afa158015614929573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061494d91906153e9565b3087856040518563ffffffff1660e01b815260040161496f9493929190615ddf565b600060405180830381600087803b15801561498957600080fd5b505af115801561499d573d6000803e3d6000fd5b50505050826149ac8786612193565b61078a91906157b6565b60006116f58383670de0b6b3a76400006149e2565b92915050565b60006116f583670de0b6b3a7640000845b8282028115158415858304851417166149fa57600080fd5b0492915050565b6001600160a01b038116811461183357600080fd5b8035614a2181614a01565b919050565b801515811461183357600080fd5b8035614a2181614a26565b600060a08284031215614a5157600080fd5b50919050565b600060c08284031215614a5157600080fd5b600080600080600060a08688031215614a8157600080fd5b8535614a8c81614a01565b9450602086013593506040860135614aa381614a26565b925060608601356001600160401b0380821115614abf57600080fd5b614acb89838a01614a3f565b93506080880135915080821115614ae157600080fd5b50614aee88828901614a57565b9150509295509295909350565b600080600080600060a08688031215614b1357600080fd5b8535614b1e81614a01565b94506020860135614b2e81614a01565b9350604086013592506060860135915060808601356001600160401b03811115614b5757600080fd5b614aee88828901614a3f565b600060208284031215614b7557600080fd5b81356116f581614a01565b6001600160a01b0391909116815260200190565b60008060408385031215614ba757600080fd5b8235614bb281614a01565b91506020830135614bc281614a26565b809150509250929050565b600080600060608486031215614be257600080fd5b8335614bed81614a01565b9250602084013591506040840135614c0481614a26565b809150509250925092565b60008083601f840112614c2157600080fd5b5081356001600160401b03811115614c3857600080fd5b602083019150836020828501011115614c5057600080fd5b9250929050565b60008060008060008060a08789031215614c7057600080fd5b8635614c7b81614a01565b95506020870135614c8b81614a01565b9450604087013593506060870135925060808701356001600160401b03811115614cb457600080fd5b614cc089828a01614c0f565b979a9699509497509295939492505050565b600080600080600080600080610100898b031215614cef57600080fd5b8835614cfa81614a01565b97506020890135965060408901359550606089013594506080890135935060a0890135614d2681614a01565b925060c08901356001600160401b0380821115614d4257600080fd5b614d4e8c838d01614a3f565b935060e08b0135915080821115614d6457600080fd5b50614d718b828c01614a57565b9150509295985092959890939650565b60008060008060008060c08789031215614d9a57600080fd5b8635614da581614a01565b955060208701359450604087013593506060870135614dc381614a01565b925060808701356001600160401b0380821115614ddf57600080fd5b614deb8a838b01614a3f565b935060a0890135915080821115614e0157600080fd5b50614e0e89828a01614a57565b9150509295509295509295565b634e487b7160e01b600052604160045260246000fd5b604051606081016001600160401b0381118282101715614e5357614e53614e1b565b60405290565b604051601f8201601f191681016001600160401b0381118282101715614e8157614e81614e1b565b604052919050565b60006001600160401b03821115614ea257614ea2614e1b565b5060051b60200190565b600060608284031215614ebe57600080fd5b614ec6614e31565b9050813581526020808301356001600160401b03811115614ee657600080fd5b8301601f81018513614ef757600080fd5b8035614f0a614f0582614e89565b614e59565b81815260059190911b82018301908381019087831115614f2957600080fd5b928401925b82841015614f4757833582529284019290840190614f2e565b808587015250505050506040820135604082015292915050565b600080600080600080600080610100898b031215614f7e57600080fd5b614f8789614a16565b9750602089013596506040890135955060608901356001600160401b0380821115614fb157600080fd5b614fbd8c838d01614eac565b9650614fcb60808c01614a34565b9550614fd960a08c01614a16565b945060c08b0135915080821115614d4257600080fd5b60008060008060008060008060006101208a8c03121561500e57600080fd5b893561501981614a01565b985060208a0135975060408a0135965060608a0135955060808a0135945060a08a0135935060c08a013561504c81614a01565b925060e08a01356001600160401b038082111561506857600080fd5b6150748d838e01614a3f565b93506101008c013591508082111561508b57600080fd5b506150988c828d01614a57565b9150509295985092959850929598565b6000806000606084860312156150bd57600080fd5b83356150c881614a01565b95602085013595506040909401359392505050565b600080600080606085870312156150f357600080fd5b84356150fe81614a01565b9350602085013561510e81614a01565b925060408501356001600160401b0381111561512957600080fd5b61513587828801614c0f565b95989497509550505050565b60008060008060008060c0878903121561515a57600080fd5b863561516581614a01565b95506020870135945060408701359350606087013561518381614a01565b925060808701356001600160401b038082111561519f57600080fd5b908801906040828b0312156151b357600080fd5b90925060a08801359080821115614e0157600080fd5b60ff8116811461183357600080fd5b8035614a21816151c9565b600080600080600080600080888a0361014081121561520157600080fd5b893561520c81614a01565b985060208a0135975060408a013596506060605f198201121561522e57600080fd5b50615237614e31565b60608a0135815260808a0135602082015260a08a01356040820152945061526060c08a016151d8565b935061526e60e08a01614a16565b92506101008901356001600160401b038082111561528b57600080fd5b6152978c838d01614a3f565b93506101208b0135915080821115614d6457600080fd5b6000806000606084860312156152c357600080fd5b83516152ce81614a01565b60208501519093506152df81614a01565b80925050604084015190509250925092565b602080825260099082015268155395149554d5115160ba1b604082015260600190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b60006020828403121561534a57600080fd5b81516116f581614a26565b60008060008060008060c0878903121561536e57600080fd5b863561537981614a01565b95506020870135945060408701359350606087013592506080870135915060a08701356153a581614a26565b809150509295509295509295565b6000602082840312156153c557600080fd5b81516116f581614a01565b6001600160a01b03929092168252602082015260400190565b6000602082840312156153fb57600080fd5b5051919050565b6001600160a01b039390931683526020830191909152604082015260600190565b634e487b7160e01b600052601160045260246000fd5b6000821982111561544c5761544c615423565b500190565b6000815180845260005b818110156154775760208185018101518683018201520161545b565b81811115615489576000602083870101525b50601f01601f19169290920160200192915050565b600060018060a01b038088168352808716602084015285604084015284606084015260a06080840152835180518281511660a0860152602081015160c086015250602081015160e085015260408101516101008501525050602083015160a06101208401526113dd610140840182615451565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6001600160a01b03841681526040602082018190526000906141459083018486615511565b634e487b7160e01b600052603260045260246000fd5b60008235605e1983360301811261558b57600080fd5b9190910192915050565b6000808335601e198436030181126155ac57600080fd5b8301803591506001600160401b038211156155c657600080fd5b602001915036819003821315614c5057600080fd5b80356155e681614a01565b6001600160a01b03168252602090810135910152565b600081518084526020808501945080840160005b838110156156495761563687835180516001600160a01b03168252602090810151910152565b6040969096019590820190600101615610565b509495945050505050565b60808152600060e082018735601e1989360301811261567257600080fd5b88016020810190356001600160401b0381111561568e57600080fd5b8060061b36038213156156a057600080fd5b60606080860152918290529060009061010085015b818310156156da576156c781856155db565b60409384019360019390930192016156b5565b60208b013560a087015260408b013560c08701528581036020870152615700818b6155fc565b935050505061571a60408401876001600160a01b03169052565b82810360608401526113dd818587615511565b600061010061573c83896155db565b6040880135604084015260608801356060840152615770608084018880516001600160a01b03168252602090810151910152565b6001600160a01b03861660c084015260e083018190526113dd8184018587615511565b8183823760009101908152919050565b6020815260006116f56020830184615451565b6000828210156157c8576157c8615423565b500390565b600080604083850312156157e057600080fd5b82516157eb81614a01565b6020840151909250614bc281614a01565b60006020828403121561580e57600080fd5b81516116f5816151c9565b600060ff821660ff84168082101561583357615833615423565b90039392505050565b600181815b8085111561587757816000190482111561585d5761585d615423565b8085161561586a57918102915b93841c9390800290615841565b509250929050565b60008261588e575060016149cb565b8161589b575060006149cb565b81600181146158b157600281146158bb576158d7565b60019150506149cb565b60ff8411156158cc576158cc615423565b50506001821b6149cb565b5060208310610133831016604e8410600b84101617156158fa575081810a6149cb565b615904838361583c565b806000190482111561591857615918615423565b029392505050565b60006116f560ff84168361587f565b600081600019048311821515161561594957615949615423565b500290565b6000806040838503121561596157600080fd5b505080516020909101519092909150565b600082601f83011261598357600080fd5b81516020615993614f0583614e89565b82815260059290921b840181019181810190868411156159b257600080fd5b8286015b8481101561118357805183529183019183016159b6565b6000806000606084860312156159e257600080fd5b83516001600160401b03808211156159f957600080fd5b818601915086601f830112615a0d57600080fd5b81516020615a1d614f0583614e89565b82815260059290921b8401810191818101908a841115615a3c57600080fd5b948201945b83861015615a63578551615a5481614a01565b82529482019490820190615a41565b91890151919750909350505080821115615a7c57600080fd5b50615a8986828701615972565b925050604084015190509250925092565b634e487b7160e01b600052602160045260246000fd5b60028110615ace57634e487b7160e01b600052602160045260246000fd5b9052565b60608152615ae4606082018551615ab0565b60006020850151615b0060808401826001600160a01b03169052565b5060408501516001600160a01b03811660a084015250606085015160c0830152608085015160e083015260a0850151610100818185015260c08701519150610120615b55818601846001600160a01b03169052565b60e08801516001600160a01b0316610140860152908701516101608501919091529050615b86610180840182615451565b6020840195909552505060400152919050565b60e08152845160e082015260006020860151615bb9610100840182615ab0565b5060408601516001600160a01b03908116610120840152606087015116610140830152608086015161016083015260a086015160c0610180840152615c026101a0840182615451565b915050615c42602083018680516001600160a01b039081168352602080830151151590840152604080830151909116908301526060908101511515910152565b60a082019390935260c0015292915050565b6001600160a01b039690961686526020860194909452604085019290925260608401526080830152151560a082015260c00190565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061078a90830184615451565b60006116f5838361587f565b600082615ce557634e487b7160e01b600052601260045260246000fd5b500490565b600080600060608486031215615cff57600080fd5b8351925060208401519150604084015190509250925092565b600081518084526020808501945080840160005b8381101561564957815187529582019590820190600101615d2c565b8051608080845281519084018190526000916020919082019060a0860190845b81811015615d8d5783516001600160a01b031683529284019291840191600101615d68565b505082850151915085810383870152615da68183615d18565b9250505060408301518482036040860152615dc18282615451565b9150506060830151615dd7606086018215159052565b509392505050565b8481526001600160a01b0384811660208301528316604082015260806060820181905260009061078a90830184615d48565b600060208284031215615e2357600080fd5b81516001600160801b03811681146116f557600080fd5b600060ff821660ff8103615e5057615e50615423565b60010192915050565b604081526000615e6c6040830185615d18565b9050826020830152939250505056fe000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeea2646970667358221220b5fcc0b96e85a00b660cdecc902c357ce18a2f40ae19454f59f3409304f13abd64736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addLiquidity(address,uint256,uint256,(uint256,uint256,uint256),uint8,address,(((address,uint256),uint256,uint256),bytes),(address,address,uint256,address,address,bytes))": {
        "details": "see return description of _addLiquidityif quote.sellToken is neither target nor underlying, it will be swapped for underlying on 0x and wrapped into the target",
        "params": {
          "adapter": "Adapter address for the Series",
          "amt": "Amount to provide",
          "maturity": "Maturity date for the Series",
          "mode": "0 = issues and sell YT, 1 = issue and hold YT",
          "params": "AddLiquidityParams struct with the params for the addLiquidity call",
          "permit": "Permit to pull the tokens to swap from",
          "quote": "Quote with swap details",
          "receiver": "Address to receive the BPT"
        }
      },
      "combine(address,uint256,uint256,address,(((address,uint256)[],uint256,uint256),bytes),(address,address,uint256,address,address,bytes))": {
        "details": "if quote.buyToken is neither target nor underlying, it will unwrap target and swap it on 0x",
        "params": {
          "adapter": "Adapter address for the Series",
          "maturity": "Maturity date for the Series",
          "permit": "Permit to pull PT and YT",
          "quote": "Quote with swap details",
          "receiver": "Address where the resulting Target will be transferred",
          "uBal": "Amount of PT and YT to burn"
        },
        "returns": {
          "amt": "Amount of tokens received from reconstituting target"
        }
      },
      "deployAdapter(address,address,bytes)": {
        "details": "Called by external address, deploy a new Adapter via an Adapter Factory",
        "params": {
          "data": "Additional encoded data needed to deploy the adapter",
          "f": "Factory to use",
          "target": "Target to onboard"
        }
      },
      "issue(address,uint256,uint256,address,(((address,uint256),uint256,uint256),bytes),(address,address,uint256,address,address,bytes))": {
        "details": "The balance of PTs and YTs minted will be the same value in units of underlying (less fees)if quote.sellToken is neither target nor underlying, it will swap on 0x and wrap to target and swap it on 0x",
        "params": {
          "adapter": "Adapter address for the Series",
          "amt": "Amount to issue with",
          "maturity": "Maturity date for the Series [unix time]",
          "permit": "Permit to pull tokens",
          "quote": "Quote with swap details",
          "receiver": "Address where the resulting PTs and YTs will be transferred to"
        },
        "returns": {
          "uBal": "Amount of PTs and YTs minted"
        }
      },
      "onFlashLoan(address,address,uint256,uint256,bytes)": {
        "details": "ERC-3156 Flash loan callback"
      },
      "onboardAdapter(address,bool)": {
        "details": "Called by a trusted address, approves Target for issuance, and onboards adapter to the Divider",
        "params": {
          "adapter": "Adapter to onboard",
          "addAdapter": "Whether to call divider.addAdapter or not (useful e.g when upgrading Periphery)"
        }
      },
      "removeLiquidity(address,uint256,uint256,(uint256,uint256[],uint256),bool,address,(((address,uint256),uint256,uint256),bytes),(address,address,uint256,address,address,bytes))": {
        "details": "More info on `minAmountsOut`: https://github.com/balancer-labs/docs-developers/blob/main/resources/joins-and-exits/pool-exits.md#minamountsoutif quote.buyToken is neither target nor underlying, it will unwrap target and swap it on 0x if quote.buyToken is PT, it will return target and PTs",
        "params": {
          "adapter": "Adapter address for the Series",
          "lpBal": "Balance of LP tokens to provide",
          "maturity": "Maturity date for the Series",
          "params": "RemoveLiquidityParams struct with the params for the removeLiquidity call",
          "permit": "Permit to pull the LP tokens",
          "quote": "Quote with swap details",
          "receiver": "Address to receive the Underlying",
          "swapPTs": "Whether to swap PTs or not. If false, it will transfer PTs to the user"
        },
        "returns": {
          "amt": "amount of tokens received and ptBal PTs (in case it's called after maturity and redeem is restricted or intoTarget is false)"
        }
      },
      "setFactory(address,bool)": {
        "params": {
          "f": "Factory's address",
          "isOn": "Flag setting this factory to enabled or disabled"
        }
      },
      "setSpaceFactory(address)": {
        "params": {
          "newSpaceFactory": "The Space Factory addresss to set"
        }
      },
      "sponsorSeries(address,uint256,bool)": {
        "details": "Called by an external address, initializes a new series in the Divider",
        "params": {
          "adapter": "Adapter to associate with the Series",
          "maturity": "Maturity date for the Series, in units of unix time",
          "withPool": "Whether to deploy a Space pool or not (only works for unverified adapters)"
        }
      },
      "sponsorSeries(address,uint256,bool,(((address,uint256),uint256,uint256),bytes),(address,address,uint256,address,address,bytes))": {
        "details": "Called by an external address, initializes a new series in the Divider",
        "params": {
          "adapter": "Adapter to associate with the Series",
          "maturity": "Maturity date for the Series, in units of unix time",
          "permit": "Permit to pull the tokens to swap from",
          "quote": "Quote with swap details",
          "withPool": "Whether to deploy a Space pool or not (only works for unverified adapters)"
        }
      },
      "swapForPTs(address,uint256,uint256,uint256,uint256,address,(((address,uint256),uint256,uint256),bytes),(address,address,uint256,address,address,bytes))": {
        "details": "if quote.sellToken is neither target nor underlying, it will be swapped for underlying on 0x and wrapped into the target",
        "params": {
          "adapter": "Adapter address for the Series",
          "amt": "Amount to swap for PTs",
          "maturity": "Maturity date for the Series",
          "minAccepted": "Min accepted amount of PT",
          "permit": "Permit to pull the tokens to swap from",
          "quote": "Quote with swap details",
          "receiver": "Address to receive the PT"
        },
        "returns": {
          "ptBal": "amount of PT received"
        }
      },
      "swapForYTs(address,uint256,uint256,uint256,uint256,uint256,address,(((address,uint256),uint256,uint256),bytes),(address,address,uint256,address,address,bytes))": {
        "details": "if quote.sellToken is neither target nor underlying, it will be swapped for underlying on 0x and wrapped into the target",
        "params": {
          "adapter": "Adapter address for the Series",
          "amt": "Amount to sell",
          "maturity": "Maturity date for the Series",
          "minAccepted": "Min accepted amount of YT",
          "permit": "Permit to pull the tokens to swap from",
          "quote": "Quote with swap details",
          "receiver": "Address to receive the YT",
          "targetToBorrow": "Amount of Target to borrow"
        },
        "returns": {
          "targetBal": "amount of Target sent back",
          "ytBal": "amount of YT received"
        }
      },
      "swapPTs(address,uint256,uint256,uint256,uint256,address,(((address,uint256),uint256,uint256),bytes),(address,address,uint256,address,address,bytes))": {
        "details": "if quote.buyToken is neither target nor underlying, it will unwrap target and swap it on 0x",
        "params": {
          "adapter": "Adapter address for the series",
          "maturity": "Maturity date for the series",
          "minAccepted": "Min accepted amount of quote.buyToken the user receives",
          "permit": "Permit to pull PTs",
          "ptBal": "Balance of PT to sell",
          "quote": "Quote with swap details",
          "receiver": "Address to receive the tokens"
        },
        "returns": {
          "amt": "amount of tokens received"
        }
      },
      "swapYTs(address,uint256,uint256,uint256,uint256,address,(((address,uint256),uint256,uint256),bytes),(address,address,uint256,address,address,bytes))": {
        "details": "if quote.buyToken is neither target nor underlying, it will unwrap target and swap it on 0x",
        "params": {
          "adapter": "Adapter address for the Series",
          "maturity": "Maturity date for the Series",
          "minAccepted": "Min accepted amount of tokens when selling them on Space",
          "permit": "Permit to pull YTs",
          "quote": "Quote with swap details",
          "receiver": "Address to receive the Target",
          "ytBal": "Balance of YTs to swap"
        },
        "returns": {
          "amt": "amount of Target received"
        }
      },
      "verifyAdapter(address)": {
        "details": "Verifies an Adapter",
        "params": {
          "adapter": "Adapter to verify"
        }
      }
    },
    "title": "Periphery",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "ETH()": {
        "notice": "ETH address"
      },
      "MIN_YT_SWAP_IN()": {
        "notice": "Lower bound on the amount of Claim tokens one can swap in for Target"
      },
      "PRICE_ESTIMATE_ACCEPTABLE_ERROR()": {
        "notice": "Acceptable error when estimating the tokens resulting from a specific swap"
      },
      "addLiquidity(address,uint256,uint256,(uint256,uint256,uint256),uint8,address,(((address,uint256),uint256,uint256),bytes),(address,address,uint256,address,address,bytes))": {
        "notice": "Adds liquidity providing any Token"
      },
      "balancerVault()": {
        "notice": "Sense core Divider address"
      },
      "combine(address,uint256,uint256,address,(((address,uint256)[],uint256,uint256),bytes),(address,address,uint256,address,address,bytes))": {
        "notice": "Reconstitute Target by burning PT and YT"
      },
      "deployAdapter(address,address,bytes)": {
        "notice": "Deploy and onboard a Adapter"
      },
      "divider()": {
        "notice": "Sense core Divider address"
      },
      "factories(address)": {
        "notice": "adapter factories -> is supported"
      },
      "issue(address,uint256,uint256,address,(((address,uint256),uint256,uint256),bytes),(address,address,uint256,address,address,bytes))": {
        "notice": "Mint PTs & YTs of a specific Series"
      },
      "onboardAdapter(address,bool)": {
        "notice": "Onboard a single Adapter w/o needing a factory"
      },
      "permit2()": {
        "notice": "Permit2 contract"
      },
      "removeLiquidity(address,uint256,uint256,(uint256,uint256[],uint256),bool,address,(((address,uint256),uint256,uint256),bytes),(address,address,uint256,address,address,bytes))": {
        "notice": "Removes liquidity providing an amount of LP tokens and returns underlying"
      },
      "setFactory(address,bool)": {
        "notice": "Enable or disable a factory"
      },
      "setSpaceFactory(address)": {
        "notice": "Update the address for the Space Factory"
      },
      "spaceFactory()": {
        "notice": "Sense core Divider address"
      },
      "sponsorSeries(address,uint256,bool)": {
        "notice": "Sponsor a new Series in any adapter previously onboarded onto the Divider"
      },
      "sponsorSeries(address,uint256,bool,(((address,uint256),uint256,uint256),bytes),(address,address,uint256,address,address,bytes))": {
        "notice": "Sponsor a new Series in any adapter previously onboarded onto the Divider"
      },
      "swapForPTs(address,uint256,uint256,uint256,uint256,address,(((address,uint256),uint256,uint256),bytes),(address,address,uint256,address,address,bytes))": {
        "notice": "Swap for PTs of a particular series"
      },
      "swapForYTs(address,uint256,uint256,uint256,uint256,uint256,address,(((address,uint256),uint256,uint256),bytes),(address,address,uint256,address,address,bytes))": {
        "notice": "Swap to YTs of a particular series"
      },
      "swapPTs(address,uint256,uint256,uint256,uint256,address,(((address,uint256),uint256,uint256),bytes),(address,address,uint256,address,address,bytes))": {
        "notice": "Swap PTs of a particular series"
      },
      "swapYTs(address,uint256,uint256,uint256,uint256,address,(((address,uint256),uint256,uint256),bytes),(address,address,uint256,address,address,bytes))": {
        "notice": "Swap YTs of a particular series"
      },
      "swapYTsForTarget(address,uint256,uint256)": {
        "notice": "this function is here for backwards compatibility with AutoRoller. It does not suppport the use of `deadline` parameter. Use `swapYTs` instead."
      },
      "verified(address)": {
        "notice": "adapter -> bool"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 24559,
        "contract": "@sense-finance/v1-core/src/Periphery.sol:Periphery",
        "label": "isTrusted",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 4828,
        "contract": "@sense-finance/v1-core/src/Periphery.sol:Periphery",
        "label": "spaceFactory",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(SpaceFactoryLike)4783"
      },
      {
        "astId": 4833,
        "contract": "@sense-finance/v1-core/src/Periphery.sol:Periphery",
        "label": "factories",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 4838,
        "contract": "@sense-finance/v1-core/src/Periphery.sol:Periphery",
        "label": "verified",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(SpaceFactoryLike)4783": {
        "encoding": "inplace",
        "label": "contract SpaceFactoryLike",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}