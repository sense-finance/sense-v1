{
  "address": "0x5f6e8e9C888760856e22057CBc81dD9e0494aA34",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IVault",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_divider",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_ts",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_g1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_g2",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_oracleEnabled",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "trusted",
          "type": "bool"
        }
      ],
      "name": "UserTrustUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "adapter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        }
      ],
      "name": "create",
      "outputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "divider",
      "outputs": [
        {
          "internalType": "contract DividerLike",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "g1",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "g2",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isTrusted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracleEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pools",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "trusted",
          "type": "bool"
        }
      ],
      "name": "setIsTrusted",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_ts",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_g1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_g2",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_oracleEnabled",
          "type": "bool"
        }
      ],
      "name": "setParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "adapter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "setPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vault",
      "outputs": [
        {
          "internalType": "contract IVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x8e46871b89f29007fd9d2ccbb5ba93f57092d9c584511e2c8891da55c4ac7680",
  "receipt": {
    "to": null,
    "from": "0x59A181710F926Eae6FddfbF27a14259E8DD00cA2",
    "contractAddress": "0x5f6e8e9C888760856e22057CBc81dD9e0494aA34",
    "transactionIndex": 45,
    "gasUsed": "5425250",
    "logsBloom": "0x
    "blockHash": "0xdc9f096aa0ec25bf80fc9857baa61e56ec9b603c13687cfd24b7efd3bb9f9e4f",
    "transactionHash": "0x8e46871b89f29007fd9d2ccbb5ba93f57092d9c584511e2c8891da55c4ac7680",
    "logs": [
      {
        "transactionIndex": 45,
        "blockNumber": 14805049,
        "transactionHash": "0x8e46871b89f29007fd9d2ccbb5ba93f57092d9c584511e2c8891da55c4ac7680",
        "address": "0x5f6e8e9C888760856e22057CBc81dD9e0494aA34",
        "topics": [
          "0xe95aec380cae16330d146d5499ef7db6f3657e477104a733e771bc09e500d986",
          "0x00000000000000000000000059a181710f926eae6fddfbf27a14259e8dd00ca2"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 57,
        "blockHash": "0xdc9f096aa0ec25bf80fc9857baa61e56ec9b603c13687cfd24b7efd3bb9f9e4f"
      }
    ],
    "blockNumber": 14805049,
    "cumulativeGasUsed": "7384511",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xBA12222222228d8Ba445958a75a0704d566BF2C8",
    "0x86bA3E96Be68563E41c2f5769F1AF9fAf758e6E0",
    "2640612622",
    "950000000000000000",
    "1052631578947368421",
    true
  ],
  "numDeployments": 1,
  "solcInputHash": "2be197607f5db077d6c9e4e2754d46b6",
  "metadata": "{\"compiler\":{\"version\":\"0.7.5+commit.eb77ed08\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IVault\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_divider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_g1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_g2\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_oracleEnabled\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"trusted\",\"type\":\"bool\"}],\"name\":\"UserTrustUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"divider\",\"outputs\":[{\"internalType\":\"contract DividerLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"g1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"g2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isTrusted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"trusted\",\"type\":\"bool\"}],\"name\":\"setIsTrusted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_g1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_g2\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_oracleEnabled\",\"type\":\"bool\"}],\"name\":\"setParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"setPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"setPool(address,uint256,address)\":{\"details\":\"Adding a pool to the mapping prevents a new pool from being deployed for that Series from this factory\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"create(address,uint256)\":{\"notice\":\"Deploys a new `Space` contract\"},\"divider()\":{\"notice\":\"Sense Divider\"},\"oracleEnabled()\":{\"notice\":\"Oracle flag\"},\"pools(address,uint256)\":{\"notice\":\"Pool registry (adapter -> maturity -> pool address)\"},\"setPool(address,uint256,address)\":{\"notice\":\"Authd action to set a pool address on the \\\"pools\\\" registry\"},\"ts()\":{\"notice\":\"Yieldspace config\"},\"vault()\":{\"notice\":\"Balancer Vault\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/v1-space/src/SpaceFactory.sol\":\"SpaceFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":500},\"remappings\":[]},\"sources\":{\"@balancer-labs/v2-pool-utils/contracts/BalancerPoolToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol\\\";\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20Permit.sol\\\";\\n\\n/**\\n * @title Highly opinionated token implementation\\n * @author Balancer Labs\\n * @dev\\n * - Includes functions to increase and decrease allowance as a workaround\\n *   for the well-known issue with `approve`:\\n *   https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n * - Allows for 'infinite allowance', where an allowance of 0xff..ff is not\\n *   decreased by calls to transferFrom\\n * - Lets a token holder use `transferFrom` to send their own tokens,\\n *   without first setting allowance\\n * - Emits 'Approval' events whenever allowance is changed by `transferFrom`\\n */\\ncontract BalancerPoolToken is ERC20, ERC20Permit {\\n    constructor(string memory tokenName, string memory tokenSymbol)\\n        ERC20(tokenName, tokenSymbol)\\n        ERC20Permit(tokenName)\\n    {\\n        // solhint-disable-previous-line no-empty-blocks\\n    }\\n\\n    // Overrides\\n\\n    /**\\n     * @dev Override to allow for 'infinite allowance' and let the token owner use `transferFrom` with no self-allowance\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public override returns (bool) {\\n        uint256 currentAllowance = allowance(sender, msg.sender);\\n        _require(msg.sender == sender || currentAllowance >= amount, Errors.ERC20_TRANSFER_EXCEEDS_ALLOWANCE);\\n\\n        _transfer(sender, recipient, amount);\\n\\n        if (msg.sender != sender && currentAllowance != uint256(-1)) {\\n            // Because of the previous require, we know that if msg.sender != sender then currentAllowance >= amount\\n            _approve(sender, msg.sender, currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Override to allow decreasing allowance by more than the current amount (setting it to zero)\\n     */\\n    function decreaseAllowance(address spender, uint256 amount) public override returns (bool) {\\n        uint256 currentAllowance = allowance(msg.sender, spender);\\n\\n        if (amount >= currentAllowance) {\\n            _approve(msg.sender, spender, 0);\\n        } else {\\n            // No risk of underflow due to if condition\\n            _approve(msg.sender, spender, currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    // Internal functions\\n\\n    function _mintPoolTokens(address recipient, uint256 amount) internal {\\n        _mint(recipient, amount);\\n    }\\n\\n    function _burnPoolTokens(address sender, uint256 amount) internal {\\n        _burn(sender, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x5e178753cb96551bc6f2c6ca456a037fd2b5ae39f5ae287735f1f60771701add\",\"license\":\"GPL-3.0-or-later\"},\"@balancer-labs/v2-pool-utils/contracts/factories/BasePoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@balancer-labs/v2-vault/contracts/interfaces/IVault.sol\\\";\\n\\n/**\\n * @dev Base contract for Pool factories.\\n *\\n * Pools are deployed from factories to allow third parties to reason about them. Unknown Pools may have arbitrary\\n * logic: being able to assert that a Pool's behavior follows certain rules (those imposed by the contracts created by\\n * the factory) is very powerful.\\n */\\nabstract contract BasePoolFactory {\\n    IVault private immutable _vault;\\n    mapping(address => bool) private _isPoolFromFactory;\\n\\n    event PoolCreated(address indexed pool);\\n\\n    constructor(IVault vault) {\\n        _vault = vault;\\n    }\\n\\n    /**\\n     * @dev Returns the Vault's address.\\n     */\\n    function getVault() public view returns (IVault) {\\n        return _vault;\\n    }\\n\\n    /**\\n     * @dev Returns true if `pool` was created by this factory.\\n     */\\n    function isPoolFromFactory(address pool) external view returns (bool) {\\n        return _isPoolFromFactory[pool];\\n    }\\n\\n    /**\\n     * @dev Registers a new created pool.\\n     *\\n     * Emits a `PoolCreated` event.\\n     */\\n    function _register(address pool) internal {\\n        _isPoolFromFactory[pool] = true;\\n        emit PoolCreated(pool);\\n    }\\n}\\n\",\"keccak256\":\"0x47468fb01511f3784b69e3b7ad82793eb7aef0a509876cc6c9a164f7bacb4540\",\"license\":\"GPL-3.0-or-later\"},\"@balancer-labs/v2-solidity-utils/contracts/helpers/BalancerErrors.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\n// solhint-disable\\n\\n/**\\n * @dev Reverts if `condition` is false, with a revert reason containing `errorCode`. Only codes up to 999 are\\n * supported.\\n */\\nfunction _require(bool condition, uint256 errorCode) pure {\\n    if (!condition) _revert(errorCode);\\n}\\n\\n/**\\n * @dev Reverts with a revert reason containing `errorCode`. Only codes up to 999 are supported.\\n */\\nfunction _revert(uint256 errorCode) pure {\\n    // We're going to dynamically create a revert string based on the error code, with the following format:\\n    // 'BAL#{errorCode}'\\n    // where the code is left-padded with zeroes to three digits (so they range from 000 to 999).\\n    //\\n    // We don't have revert strings embedded in the contract to save bytecode size: it takes much less space to store a\\n    // number (8 to 16 bits) than the individual string characters.\\n    //\\n    // The dynamic string creation algorithm that follows could be implemented in Solidity, but assembly allows for a\\n    // much denser implementation, again saving bytecode size. Given this function unconditionally reverts, this is a\\n    // safe place to rely on it without worrying about how its usage might affect e.g. memory contents.\\n    assembly {\\n        // First, we need to compute the ASCII representation of the error code. We assume that it is in the 0-999\\n        // range, so we only need to convert three digits. To convert the digits to ASCII, we add 0x30, the value for\\n        // the '0' character.\\n\\n        let units := add(mod(errorCode, 10), 0x30)\\n\\n        errorCode := div(errorCode, 10)\\n        let tenths := add(mod(errorCode, 10), 0x30)\\n\\n        errorCode := div(errorCode, 10)\\n        let hundreds := add(mod(errorCode, 10), 0x30)\\n\\n        // With the individual characters, we can now construct the full string. The \\\"BAL#\\\" part is a known constant\\n        // (0x42414c23): we simply shift this by 24 (to provide space for the 3 bytes of the error code), and add the\\n        // characters to it, each shifted by a multiple of 8.\\n        // The revert reason is then shifted left by 200 bits (256 minus the length of the string, 7 characters * 8 bits\\n        // per character = 56) to locate it in the most significant part of the 256 slot (the beginning of a byte\\n        // array).\\n\\n        let revertReason := shl(200, add(0x42414c23000000, add(add(units, shl(8, tenths)), shl(16, hundreds))))\\n\\n        // We can now encode the reason in memory, which can be safely overwritten as we're about to revert. The encoded\\n        // message will have the following layout:\\n        // [ revert reason identifier ] [ string location offset ] [ string length ] [ string contents ]\\n\\n        // The Solidity revert reason identifier is 0x08c739a0, the function selector of the Error(string) function. We\\n        // also write zeroes to the next 28 bytes of memory, but those are about to be overwritten.\\n        mstore(0x0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\\n        // Next is the offset to the location of the string, which will be placed immediately after (20 bytes away).\\n        mstore(0x04, 0x0000000000000000000000000000000000000000000000000000000000000020)\\n        // The string length is fixed: 7 characters.\\n        mstore(0x24, 7)\\n        // Finally, the string itself is stored.\\n        mstore(0x44, revertReason)\\n\\n        // Even if the string is only 7 bytes long, we need to return a full 32 byte slot containing it. The length of\\n        // the encoded message is therefore 4 + 32 + 32 + 32 = 100.\\n        revert(0, 100)\\n    }\\n}\\n\\nlibrary Errors {\\n    // Math\\n    uint256 internal constant ADD_OVERFLOW = 0;\\n    uint256 internal constant SUB_OVERFLOW = 1;\\n    uint256 internal constant SUB_UNDERFLOW = 2;\\n    uint256 internal constant MUL_OVERFLOW = 3;\\n    uint256 internal constant ZERO_DIVISION = 4;\\n    uint256 internal constant DIV_INTERNAL = 5;\\n    uint256 internal constant X_OUT_OF_BOUNDS = 6;\\n    uint256 internal constant Y_OUT_OF_BOUNDS = 7;\\n    uint256 internal constant PRODUCT_OUT_OF_BOUNDS = 8;\\n    uint256 internal constant INVALID_EXPONENT = 9;\\n\\n    // Input\\n    uint256 internal constant OUT_OF_BOUNDS = 100;\\n    uint256 internal constant UNSORTED_ARRAY = 101;\\n    uint256 internal constant UNSORTED_TOKENS = 102;\\n    uint256 internal constant INPUT_LENGTH_MISMATCH = 103;\\n    uint256 internal constant ZERO_TOKEN = 104;\\n\\n    // Shared pools\\n    uint256 internal constant MIN_TOKENS = 200;\\n    uint256 internal constant MAX_TOKENS = 201;\\n    uint256 internal constant MAX_SWAP_FEE_PERCENTAGE = 202;\\n    uint256 internal constant MIN_SWAP_FEE_PERCENTAGE = 203;\\n    uint256 internal constant MINIMUM_BPT = 204;\\n    uint256 internal constant CALLER_NOT_VAULT = 205;\\n    uint256 internal constant UNINITIALIZED = 206;\\n    uint256 internal constant BPT_IN_MAX_AMOUNT = 207;\\n    uint256 internal constant BPT_OUT_MIN_AMOUNT = 208;\\n    uint256 internal constant EXPIRED_PERMIT = 209;\\n    uint256 internal constant NOT_TWO_TOKENS = 210;\\n\\n    // Pools\\n    uint256 internal constant MIN_AMP = 300;\\n    uint256 internal constant MAX_AMP = 301;\\n    uint256 internal constant MIN_WEIGHT = 302;\\n    uint256 internal constant MAX_STABLE_TOKENS = 303;\\n    uint256 internal constant MAX_IN_RATIO = 304;\\n    uint256 internal constant MAX_OUT_RATIO = 305;\\n    uint256 internal constant MIN_BPT_IN_FOR_TOKEN_OUT = 306;\\n    uint256 internal constant MAX_OUT_BPT_FOR_TOKEN_IN = 307;\\n    uint256 internal constant NORMALIZED_WEIGHT_INVARIANT = 308;\\n    uint256 internal constant INVALID_TOKEN = 309;\\n    uint256 internal constant UNHANDLED_JOIN_KIND = 310;\\n    uint256 internal constant ZERO_INVARIANT = 311;\\n    uint256 internal constant ORACLE_INVALID_SECONDS_QUERY = 312;\\n    uint256 internal constant ORACLE_NOT_INITIALIZED = 313;\\n    uint256 internal constant ORACLE_QUERY_TOO_OLD = 314;\\n    uint256 internal constant ORACLE_INVALID_INDEX = 315;\\n    uint256 internal constant ORACLE_BAD_SECS = 316;\\n    uint256 internal constant AMP_END_TIME_TOO_CLOSE = 317;\\n    uint256 internal constant AMP_ONGOING_UPDATE = 318;\\n    uint256 internal constant AMP_RATE_TOO_HIGH = 319;\\n    uint256 internal constant AMP_NO_ONGOING_UPDATE = 320;\\n    uint256 internal constant STABLE_INVARIANT_DIDNT_CONVERGE = 321;\\n    uint256 internal constant STABLE_GET_BALANCE_DIDNT_CONVERGE = 322;\\n    uint256 internal constant RELAYER_NOT_CONTRACT = 323;\\n    uint256 internal constant BASE_POOL_RELAYER_NOT_CALLED = 324;\\n    uint256 internal constant REBALANCING_RELAYER_REENTERED = 325;\\n    uint256 internal constant GRADUAL_UPDATE_TIME_TRAVEL = 326;\\n    uint256 internal constant SWAPS_DISABLED = 327;\\n    uint256 internal constant CALLER_IS_NOT_LBP_OWNER = 328;\\n    uint256 internal constant PRICE_RATE_OVERFLOW = 329;\\n    uint256 internal constant INVALID_JOIN_EXIT_KIND_WHILE_SWAPS_DISABLED = 330;\\n    uint256 internal constant WEIGHT_CHANGE_TOO_FAST = 331;\\n    uint256 internal constant LOWER_GREATER_THAN_UPPER_TARGET = 332;\\n    uint256 internal constant UPPER_TARGET_TOO_HIGH = 333;\\n    uint256 internal constant UNHANDLED_BY_LINEAR_POOL = 334;\\n    uint256 internal constant OUT_OF_TARGET_RANGE = 335;\\n\\n    // Lib\\n    uint256 internal constant REENTRANCY = 400;\\n    uint256 internal constant SENDER_NOT_ALLOWED = 401;\\n    uint256 internal constant PAUSED = 402;\\n    uint256 internal constant PAUSE_WINDOW_EXPIRED = 403;\\n    uint256 internal constant MAX_PAUSE_WINDOW_DURATION = 404;\\n    uint256 internal constant MAX_BUFFER_PERIOD_DURATION = 405;\\n    uint256 internal constant INSUFFICIENT_BALANCE = 406;\\n    uint256 internal constant INSUFFICIENT_ALLOWANCE = 407;\\n    uint256 internal constant ERC20_TRANSFER_FROM_ZERO_ADDRESS = 408;\\n    uint256 internal constant ERC20_TRANSFER_TO_ZERO_ADDRESS = 409;\\n    uint256 internal constant ERC20_MINT_TO_ZERO_ADDRESS = 410;\\n    uint256 internal constant ERC20_BURN_FROM_ZERO_ADDRESS = 411;\\n    uint256 internal constant ERC20_APPROVE_FROM_ZERO_ADDRESS = 412;\\n    uint256 internal constant ERC20_APPROVE_TO_ZERO_ADDRESS = 413;\\n    uint256 internal constant ERC20_TRANSFER_EXCEEDS_ALLOWANCE = 414;\\n    uint256 internal constant ERC20_DECREASED_ALLOWANCE_BELOW_ZERO = 415;\\n    uint256 internal constant ERC20_TRANSFER_EXCEEDS_BALANCE = 416;\\n    uint256 internal constant ERC20_BURN_EXCEEDS_ALLOWANCE = 417;\\n    uint256 internal constant SAFE_ERC20_CALL_FAILED = 418;\\n    uint256 internal constant ADDRESS_INSUFFICIENT_BALANCE = 419;\\n    uint256 internal constant ADDRESS_CANNOT_SEND_VALUE = 420;\\n    uint256 internal constant SAFE_CAST_VALUE_CANT_FIT_INT256 = 421;\\n    uint256 internal constant GRANT_SENDER_NOT_ADMIN = 422;\\n    uint256 internal constant REVOKE_SENDER_NOT_ADMIN = 423;\\n    uint256 internal constant RENOUNCE_SENDER_NOT_ALLOWED = 424;\\n    uint256 internal constant BUFFER_PERIOD_EXPIRED = 425;\\n    uint256 internal constant CALLER_IS_NOT_OWNER = 426;\\n    uint256 internal constant NEW_OWNER_IS_ZERO = 427;\\n    uint256 internal constant CODE_DEPLOYMENT_FAILED = 428;\\n    uint256 internal constant CALL_TO_NON_CONTRACT = 429;\\n    uint256 internal constant LOW_LEVEL_CALL_FAILED = 430;\\n\\n    // Vault\\n    uint256 internal constant INVALID_POOL_ID = 500;\\n    uint256 internal constant CALLER_NOT_POOL = 501;\\n    uint256 internal constant SENDER_NOT_ASSET_MANAGER = 502;\\n    uint256 internal constant USER_DOESNT_ALLOW_RELAYER = 503;\\n    uint256 internal constant INVALID_SIGNATURE = 504;\\n    uint256 internal constant EXIT_BELOW_MIN = 505;\\n    uint256 internal constant JOIN_ABOVE_MAX = 506;\\n    uint256 internal constant SWAP_LIMIT = 507;\\n    uint256 internal constant SWAP_DEADLINE = 508;\\n    uint256 internal constant CANNOT_SWAP_SAME_TOKEN = 509;\\n    uint256 internal constant UNKNOWN_AMOUNT_IN_FIRST_SWAP = 510;\\n    uint256 internal constant MALCONSTRUCTED_MULTIHOP_SWAP = 511;\\n    uint256 internal constant INTERNAL_BALANCE_OVERFLOW = 512;\\n    uint256 internal constant INSUFFICIENT_INTERNAL_BALANCE = 513;\\n    uint256 internal constant INVALID_ETH_INTERNAL_BALANCE = 514;\\n    uint256 internal constant INVALID_POST_LOAN_BALANCE = 515;\\n    uint256 internal constant INSUFFICIENT_ETH = 516;\\n    uint256 internal constant UNALLOCATED_ETH = 517;\\n    uint256 internal constant ETH_TRANSFER = 518;\\n    uint256 internal constant CANNOT_USE_ETH_SENTINEL = 519;\\n    uint256 internal constant TOKENS_MISMATCH = 520;\\n    uint256 internal constant TOKEN_NOT_REGISTERED = 521;\\n    uint256 internal constant TOKEN_ALREADY_REGISTERED = 522;\\n    uint256 internal constant TOKENS_ALREADY_SET = 523;\\n    uint256 internal constant TOKENS_LENGTH_MUST_BE_2 = 524;\\n    uint256 internal constant NONZERO_TOKEN_BALANCE = 525;\\n    uint256 internal constant BALANCE_TOTAL_OVERFLOW = 526;\\n    uint256 internal constant POOL_NO_TOKENS = 527;\\n    uint256 internal constant INSUFFICIENT_FLASH_LOAN_BALANCE = 528;\\n\\n    // Fees\\n    uint256 internal constant SWAP_FEE_PERCENTAGE_TOO_HIGH = 600;\\n    uint256 internal constant FLASH_LOAN_FEE_PERCENTAGE_TOO_HIGH = 601;\\n    uint256 internal constant INSUFFICIENT_FLASH_LOAN_FEE_AMOUNT = 602;\\n}\\n\",\"keccak256\":\"0x14f18d0c0051d5412a250536a9850f2698fe1ede9e4760d94142762a039f053b\",\"license\":\"GPL-3.0-or-later\"},\"@balancer-labs/v2-solidity-utils/contracts/helpers/ISignaturesValidator.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface for the SignatureValidator helper, used to support meta-transactions.\\n */\\ninterface ISignaturesValidator {\\n    /**\\n     * @dev Returns the EIP712 domain separator.\\n     */\\n    function getDomainSeparator() external view returns (bytes32);\\n\\n    /**\\n     * @dev Returns the next nonce used by an address to sign messages.\\n     */\\n    function getNextNonce(address user) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x2fe46b13b7c8bfc6f5c539c0b73d6325813f383f551b71fb6bca8dafd06964e1\",\"license\":\"GPL-3.0-or-later\"},\"@balancer-labs/v2-solidity-utils/contracts/helpers/ITemporarilyPausable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface for the TemporarilyPausable helper.\\n */\\ninterface ITemporarilyPausable {\\n    /**\\n     * @dev Emitted every time the pause state changes by `_setPaused`.\\n     */\\n    event PausedStateChanged(bool paused);\\n\\n    /**\\n     * @dev Returns the current paused state.\\n     */\\n    function getPausedState()\\n        external\\n        view\\n        returns (\\n            bool paused,\\n            uint256 pauseWindowEndTime,\\n            uint256 bufferPeriodEndTime\\n        );\\n}\\n\",\"keccak256\":\"0xb3e5b7c63f80b80ef3f0138eac56c397a439bf6b667fc06d5061aa869828b562\",\"license\":\"GPL-3.0-or-later\"},\"@balancer-labs/v2-solidity-utils/contracts/helpers/LogCompression.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../math/LogExpMath.sol\\\";\\n\\n/**\\n * @dev Library for encoding and decoding values stored inside a 256 bit word. Typically used to pack multiple values in\\n * a single storage slot, saving gas by performing less storage accesses.\\n *\\n * Each value is defined by its size and the least significant bit in the word, also known as offset. For example, two\\n * 128 bit values may be encoded in a word by assigning one an offset of 0, and the other an offset of 128.\\n */\\nlibrary LogCompression {\\n    int256 private constant _LOG_COMPRESSION_FACTOR = 1e14;\\n    int256 private constant _HALF_LOG_COMPRESSION_FACTOR = 0.5e14;\\n\\n    /**\\n     * @dev Returns the natural logarithm of `value`, dropping most of the decimal places to arrive at a value that,\\n     * when passed to `fromLowResLog`, will have a maximum relative error of ~0.05% compared to `value`.\\n     *\\n     * Values returned from this function should not be mixed with other fixed-point values (as they have a different\\n     * number of digits), but can be added or subtracted. Use `fromLowResLog` to undo this process and return to an\\n     * 18 decimal places fixed point value.\\n     *\\n     * Because so much precision is lost, the logarithmic values can be stored using much fewer bits than the original\\n     * value required.\\n     */\\n    function toLowResLog(uint256 value) internal pure returns (int256) {\\n        int256 ln = LogExpMath.ln(int256(value));\\n\\n        // Rounding division for signed numerator\\n        int256 lnWithError = (ln > 0 ? ln + _HALF_LOG_COMPRESSION_FACTOR : ln - _HALF_LOG_COMPRESSION_FACTOR);\\n        return lnWithError / _LOG_COMPRESSION_FACTOR;\\n    }\\n\\n    /**\\n     * @dev Restores `value` from logarithmic space. `value` is expected to be the result of a call to `toLowResLog`,\\n     * any other function that returns 4 decimals fixed point logarithms, or the sum of such values.\\n     */\\n    function fromLowResLog(int256 value) internal pure returns (uint256) {\\n        return uint256(LogExpMath.exp(value * _LOG_COMPRESSION_FACTOR));\\n    }\\n}\\n\",\"keccak256\":\"0xa42dbeb7daac5e4f89d5aad5737317162275ae3466e0b7acce766768cbdb15dc\",\"license\":\"GPL-3.0-or-later\"},\"@balancer-labs/v2-solidity-utils/contracts/helpers/WordCodec.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Library for encoding and decoding values stored inside a 256 bit word. Typically used to pack multiple values in\\n * a single storage slot, saving gas by performing less storage accesses.\\n *\\n * Each value is defined by its size and the least significant bit in the word, also known as offset. For example, two\\n * 128 bit values may be encoded in a word by assigning one an offset of 0, and the other an offset of 128.\\n */\\nlibrary WordCodec {\\n    // Masks are values with the least significant N bits set. They can be used to extract an encoded value from a word,\\n    // or to insert a new one replacing the old.\\n    uint256 private constant _MASK_1 = 2**(1) - 1;\\n    uint256 private constant _MASK_5 = 2**(5) - 1;\\n    uint256 private constant _MASK_7 = 2**(7) - 1;\\n    uint256 private constant _MASK_10 = 2**(10) - 1;\\n    uint256 private constant _MASK_16 = 2**(16) - 1;\\n    uint256 private constant _MASK_22 = 2**(22) - 1;\\n    uint256 private constant _MASK_31 = 2**(31) - 1;\\n    uint256 private constant _MASK_32 = 2**(32) - 1;\\n    uint256 private constant _MASK_53 = 2**(53) - 1;\\n    uint256 private constant _MASK_64 = 2**(64) - 1;\\n    uint256 private constant _MASK_128 = 2**(128) - 1;\\n    uint256 private constant _MASK_192 = 2**(192) - 1;\\n\\n    // Largest positive values that can be represented as N bits signed integers.\\n    int256 private constant _MAX_INT_22 = 2**(21) - 1;\\n    int256 private constant _MAX_INT_53 = 2**(52) - 1;\\n\\n    // In-place insertion\\n\\n    /**\\n     * @dev Inserts a boolean value shifted by an offset into a 256 bit word, replacing the old value. Returns the new\\n     * word.\\n     */\\n    function insertBool(\\n        bytes32 word,\\n        bool value,\\n        uint256 offset\\n    ) internal pure returns (bytes32) {\\n        bytes32 clearedWord = bytes32(uint256(word) & ~(_MASK_1 << offset));\\n        return clearedWord | bytes32(uint256(value ? 1 : 0) << offset);\\n    }\\n\\n    // Unsigned\\n\\n    /**\\n     * @dev Inserts a 5 bit unsigned integer shifted by an offset into a 256 bit word, replacing the old value. Returns\\n     * the new word.\\n     *\\n     * Assumes `value` only uses its least significant 5 bits, otherwise it may overwrite sibling bytes.\\n     */\\n    function insertUint5(\\n        bytes32 word,\\n        uint256 value,\\n        uint256 offset\\n    ) internal pure returns (bytes32) {\\n        bytes32 clearedWord = bytes32(uint256(word) & ~(_MASK_5 << offset));\\n        return clearedWord | bytes32(value << offset);\\n    }\\n\\n    /**\\n     * @dev Inserts a 7 bit unsigned integer shifted by an offset into a 256 bit word, replacing the old value. Returns\\n     * the new word.\\n     *\\n     * Assumes `value` only uses its least significant 7 bits, otherwise it may overwrite sibling bytes.\\n     */\\n    function insertUint7(\\n        bytes32 word,\\n        uint256 value,\\n        uint256 offset\\n    ) internal pure returns (bytes32) {\\n        bytes32 clearedWord = bytes32(uint256(word) & ~(_MASK_7 << offset));\\n        return clearedWord | bytes32(value << offset);\\n    }\\n\\n    /**\\n     * @dev Inserts a 10 bit unsigned integer shifted by an offset into a 256 bit word, replacing the old value. Returns\\n     * the new word.\\n     *\\n     * Assumes `value` only uses its least significant 10 bits, otherwise it may overwrite sibling bytes.\\n     */\\n    function insertUint10(\\n        bytes32 word,\\n        uint256 value,\\n        uint256 offset\\n    ) internal pure returns (bytes32) {\\n        bytes32 clearedWord = bytes32(uint256(word) & ~(_MASK_10 << offset));\\n        return clearedWord | bytes32(value << offset);\\n    }\\n\\n    /**\\n     * @dev Inserts a 16 bit unsigned integer shifted by an offset into a 256 bit word, replacing the old value.\\n     * Returns the new word.\\n     *\\n     * Assumes `value` only uses its least significant 16 bits, otherwise it may overwrite sibling bytes.\\n     */\\n    function insertUint16(\\n        bytes32 word,\\n        uint256 value,\\n        uint256 offset\\n    ) internal pure returns (bytes32) {\\n        bytes32 clearedWord = bytes32(uint256(word) & ~(_MASK_16 << offset));\\n        return clearedWord | bytes32(value << offset);\\n    }\\n\\n    /**\\n     * @dev Inserts a 31 bit unsigned integer shifted by an offset into a 256 bit word, replacing the old value. Returns\\n     * the new word.\\n     *\\n     * Assumes `value` can be represented using 31 bits.\\n     */\\n    function insertUint31(\\n        bytes32 word,\\n        uint256 value,\\n        uint256 offset\\n    ) internal pure returns (bytes32) {\\n        bytes32 clearedWord = bytes32(uint256(word) & ~(_MASK_31 << offset));\\n        return clearedWord | bytes32(value << offset);\\n    }\\n\\n    /**\\n     * @dev Inserts a 32 bit unsigned integer shifted by an offset into a 256 bit word, replacing the old value. Returns\\n     * the new word.\\n     *\\n     * Assumes `value` only uses its least significant 32 bits, otherwise it may overwrite sibling bytes.\\n     */\\n    function insertUint32(\\n        bytes32 word,\\n        uint256 value,\\n        uint256 offset\\n    ) internal pure returns (bytes32) {\\n        bytes32 clearedWord = bytes32(uint256(word) & ~(_MASK_32 << offset));\\n        return clearedWord | bytes32(value << offset);\\n    }\\n\\n    /**\\n     * @dev Inserts a 64 bit unsigned integer shifted by an offset into a 256 bit word, replacing the old value. Returns\\n     * the new word.\\n     *\\n     * Assumes `value` only uses its least significant 64 bits, otherwise it may overwrite sibling bytes.\\n     */\\n    function insertUint64(\\n        bytes32 word,\\n        uint256 value,\\n        uint256 offset\\n    ) internal pure returns (bytes32) {\\n        bytes32 clearedWord = bytes32(uint256(word) & ~(_MASK_64 << offset));\\n        return clearedWord | bytes32(value << offset);\\n    }\\n\\n    // Signed\\n\\n    /**\\n     * @dev Inserts a 22 bits signed integer shifted by an offset into a 256 bit word, replacing the old value. Returns\\n     * the new word.\\n     *\\n     * Assumes `value` can be represented using 22 bits.\\n     */\\n    function insertInt22(\\n        bytes32 word,\\n        int256 value,\\n        uint256 offset\\n    ) internal pure returns (bytes32) {\\n        bytes32 clearedWord = bytes32(uint256(word) & ~(_MASK_22 << offset));\\n        // Integer values need masking to remove the upper bits of negative values.\\n        return clearedWord | bytes32((uint256(value) & _MASK_22) << offset);\\n    }\\n\\n    // Bytes\\n\\n    /**\\n     * @dev Inserts 192 bit shifted by an offset into a 256 bit word, replacing the old value. Returns the new word.\\n     *\\n     * Assumes `value` can be represented using 192 bits.\\n     */\\n    function insertBits192(\\n        bytes32 word,\\n        bytes32 value,\\n        uint256 offset\\n    ) internal pure returns (bytes32) {\\n        bytes32 clearedWord = bytes32(uint256(word) & ~(_MASK_192 << offset));\\n        return clearedWord | bytes32((uint256(value) & _MASK_192) << offset);\\n    }\\n\\n    // Encoding\\n\\n    // Unsigned\\n\\n    /**\\n     * @dev Encodes an unsigned integer shifted by an offset. This performs no size checks: it is up to the caller to\\n     * ensure that the values are bounded.\\n     *\\n     * The return value can be logically ORed with other encoded values to form a 256 bit word.\\n     */\\n    function encodeUint(uint256 value, uint256 offset) internal pure returns (bytes32) {\\n        return bytes32(value << offset);\\n    }\\n\\n    // Signed\\n\\n    /**\\n     * @dev Encodes a 22 bits signed integer shifted by an offset.\\n     *\\n     * The return value can be logically ORed with other encoded values to form a 256 bit word.\\n     */\\n    function encodeInt22(int256 value, uint256 offset) internal pure returns (bytes32) {\\n        // Integer values need masking to remove the upper bits of negative values.\\n        return bytes32((uint256(value) & _MASK_22) << offset);\\n    }\\n\\n    /**\\n     * @dev Encodes a 53 bits signed integer shifted by an offset.\\n     *\\n     * The return value can be logically ORed with other encoded values to form a 256 bit word.\\n     */\\n    function encodeInt53(int256 value, uint256 offset) internal pure returns (bytes32) {\\n        // Integer values need masking to remove the upper bits of negative values.\\n        return bytes32((uint256(value) & _MASK_53) << offset);\\n    }\\n\\n    // Decoding\\n\\n    /**\\n     * @dev Decodes and returns a boolean shifted by an offset from a 256 bit word.\\n     */\\n    function decodeBool(bytes32 word, uint256 offset) internal pure returns (bool) {\\n        return (uint256(word >> offset) & _MASK_1) == 1;\\n    }\\n\\n    // Unsigned\\n\\n    /**\\n     * @dev Decodes and returns a 5 bit unsigned integer shifted by an offset from a 256 bit word.\\n     */\\n    function decodeUint5(bytes32 word, uint256 offset) internal pure returns (uint256) {\\n        return uint256(word >> offset) & _MASK_5;\\n    }\\n\\n    /**\\n     * @dev Decodes and returns a 7 bit unsigned integer shifted by an offset from a 256 bit word.\\n     */\\n    function decodeUint7(bytes32 word, uint256 offset) internal pure returns (uint256) {\\n        return uint256(word >> offset) & _MASK_7;\\n    }\\n\\n    /**\\n     * @dev Decodes and returns a 10 bit unsigned integer shifted by an offset from a 256 bit word.\\n     */\\n    function decodeUint10(bytes32 word, uint256 offset) internal pure returns (uint256) {\\n        return uint256(word >> offset) & _MASK_10;\\n    }\\n\\n    /**\\n     * @dev Decodes and returns a 16 bit unsigned integer shifted by an offset from a 256 bit word.\\n     */\\n    function decodeUint16(bytes32 word, uint256 offset) internal pure returns (uint256) {\\n        return uint256(word >> offset) & _MASK_16;\\n    }\\n\\n    /**\\n     * @dev Decodes and returns a 31 bit unsigned integer shifted by an offset from a 256 bit word.\\n     */\\n    function decodeUint31(bytes32 word, uint256 offset) internal pure returns (uint256) {\\n        return uint256(word >> offset) & _MASK_31;\\n    }\\n\\n    /**\\n     * @dev Decodes and returns a 32 bit unsigned integer shifted by an offset from a 256 bit word.\\n     */\\n    function decodeUint32(bytes32 word, uint256 offset) internal pure returns (uint256) {\\n        return uint256(word >> offset) & _MASK_32;\\n    }\\n\\n    /**\\n     * @dev Decodes and returns a 64 bit unsigned integer shifted by an offset from a 256 bit word.\\n     */\\n    function decodeUint64(bytes32 word, uint256 offset) internal pure returns (uint256) {\\n        return uint256(word >> offset) & _MASK_64;\\n    }\\n\\n    /**\\n     * @dev Decodes and returns a 128 bit unsigned integer shifted by an offset from a 256 bit word.\\n     */\\n    function decodeUint128(bytes32 word, uint256 offset) internal pure returns (uint256) {\\n        return uint256(word >> offset) & _MASK_128;\\n    }\\n\\n    // Signed\\n\\n    /**\\n     * @dev Decodes and returns a 22 bits signed integer shifted by an offset from a 256 bit word.\\n     */\\n    function decodeInt22(bytes32 word, uint256 offset) internal pure returns (int256) {\\n        int256 value = int256(uint256(word >> offset) & _MASK_22);\\n        // In case the decoded value is greater than the max positive integer that can be represented with 22 bits,\\n        // we know it was originally a negative integer. Therefore, we mask it to restore the sign in the 256 bit\\n        // representation.\\n        return value > _MAX_INT_22 ? (value | int256(~_MASK_22)) : value;\\n    }\\n\\n    /**\\n     * @dev Decodes and returns a 53 bits signed integer shifted by an offset from a 256 bit word.\\n     */\\n    function decodeInt53(bytes32 word, uint256 offset) internal pure returns (int256) {\\n        int256 value = int256(uint256(word >> offset) & _MASK_53);\\n        // In case the decoded value is greater than the max positive integer that can be represented with 53 bits,\\n        // we know it was originally a negative integer. Therefore, we mask it to restore the sign in the 256 bit\\n        // representation.\\n\\n        return value > _MAX_INT_53 ? (value | int256(~_MASK_53)) : value;\\n    }\\n}\\n\",\"keccak256\":\"0x249ab0ca13bd69ddf63b40d5b00ddd3c8bd7ddccb50d48c95692c32afa331fa2\",\"license\":\"GPL-3.0-or-later\"},\"@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./LogExpMath.sol\\\";\\nimport \\\"../helpers/BalancerErrors.sol\\\";\\n\\n/* solhint-disable private-vars-leading-underscore */\\n\\nlibrary FixedPoint {\\n    uint256 internal constant ONE = 1e18; // 18 decimal places\\n    uint256 internal constant MAX_POW_RELATIVE_ERROR = 10000; // 10^(-14)\\n\\n    // Minimum base for the power function when the exponent is 'free' (larger than ONE).\\n    uint256 internal constant MIN_POW_BASE_FREE_EXPONENT = 0.7e18;\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Fixed Point addition is the same as regular checked addition\\n\\n        uint256 c = a + b;\\n        _require(c >= a, Errors.ADD_OVERFLOW);\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Fixed Point addition is the same as regular checked addition\\n\\n        _require(b <= a, Errors.SUB_OVERFLOW);\\n        uint256 c = a - b;\\n        return c;\\n    }\\n\\n    function mulDown(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 product = a * b;\\n        _require(a == 0 || product / a == b, Errors.MUL_OVERFLOW);\\n\\n        return product / ONE;\\n    }\\n\\n    function mulUp(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 product = a * b;\\n        _require(a == 0 || product / a == b, Errors.MUL_OVERFLOW);\\n\\n        if (product == 0) {\\n            return 0;\\n        } else {\\n            // The traditional divUp formula is:\\n            // divUp(x, y) := (x + y - 1) / y\\n            // To avoid intermediate overflow in the addition, we distribute the division and get:\\n            // divUp(x, y) := (x - 1) / y + 1\\n            // Note that this requires x != 0, which we already tested for.\\n\\n            return ((product - 1) / ONE) + 1;\\n        }\\n    }\\n\\n    function divDown(uint256 a, uint256 b) internal pure returns (uint256) {\\n        _require(b != 0, Errors.ZERO_DIVISION);\\n\\n        if (a == 0) {\\n            return 0;\\n        } else {\\n            uint256 aInflated = a * ONE;\\n            _require(aInflated / a == ONE, Errors.DIV_INTERNAL); // mul overflow\\n\\n            return aInflated / b;\\n        }\\n    }\\n\\n    function divUp(uint256 a, uint256 b) internal pure returns (uint256) {\\n        _require(b != 0, Errors.ZERO_DIVISION);\\n\\n        if (a == 0) {\\n            return 0;\\n        } else {\\n            uint256 aInflated = a * ONE;\\n            _require(aInflated / a == ONE, Errors.DIV_INTERNAL); // mul overflow\\n\\n            // The traditional divUp formula is:\\n            // divUp(x, y) := (x + y - 1) / y\\n            // To avoid intermediate overflow in the addition, we distribute the division and get:\\n            // divUp(x, y) := (x - 1) / y + 1\\n            // Note that this requires x != 0, which we already tested for.\\n\\n            return ((aInflated - 1) / b) + 1;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns x^y, assuming both are fixed point numbers, rounding down. The result is guaranteed to not be above\\n     * the true value (that is, the error function expected - actual is always positive).\\n     */\\n    function powDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        uint256 raw = LogExpMath.pow(x, y);\\n        uint256 maxError = add(mulUp(raw, MAX_POW_RELATIVE_ERROR), 1);\\n\\n        if (raw < maxError) {\\n            return 0;\\n        } else {\\n            return sub(raw, maxError);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns x^y, assuming both are fixed point numbers, rounding up. The result is guaranteed to not be below\\n     * the true value (that is, the error function expected - actual is always negative).\\n     */\\n    function powUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        uint256 raw = LogExpMath.pow(x, y);\\n        uint256 maxError = add(mulUp(raw, MAX_POW_RELATIVE_ERROR), 1);\\n\\n        return add(raw, maxError);\\n    }\\n\\n    /**\\n     * @dev Returns the complement of a value (1 - x), capped to 0 if x is larger than 1.\\n     *\\n     * Useful when computing the complement for values with some level of relative error, as it strips this error and\\n     * prevents intermediate negative values.\\n     */\\n    function complement(uint256 x) internal pure returns (uint256) {\\n        return (x < ONE) ? (ONE - x) : 0;\\n    }\\n}\\n\",\"keccak256\":\"0x38720507bb6c838df83953d1ffa88b97d0e06baefa0e3e387303cb8a090a49f5\",\"license\":\"GPL-3.0-or-later\"},\"@balancer-labs/v2-solidity-utils/contracts/math/LogExpMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated\\n// documentation files (the \\u201cSoftware\\u201d), to deal in the Software without restriction, including without limitation the\\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to\\n// permit persons to whom the Software is furnished to do so, subject to the following conditions:\\n\\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the\\n// Software.\\n\\n// THE SOFTWARE IS PROVIDED \\u201cAS IS\\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE\\n// WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../helpers/BalancerErrors.sol\\\";\\n\\n/* solhint-disable */\\n\\n/**\\n * @dev Exponentiation and logarithm functions for 18 decimal fixed point numbers (both base and exponent/argument).\\n *\\n * Exponentiation and logarithm with arbitrary bases (x^y and log_x(y)) are implemented by conversion to natural\\n * exponentiation and logarithm (where the base is Euler's number).\\n *\\n * @author Fernando Martinelli - @fernandomartinelli\\n * @author Sergio Yuhjtman - @sergioyuhjtman\\n * @author Daniel Fernandez - @dmf7z\\n */\\nlibrary LogExpMath {\\n    // All fixed point multiplications and divisions are inlined. This means we need to divide by ONE when multiplying\\n    // two numbers, and multiply by ONE when dividing them.\\n\\n    // All arguments and return values are 18 decimal fixed point numbers.\\n    int256 constant ONE_18 = 1e18;\\n\\n    // Internally, intermediate values are computed with higher precision as 20 decimal fixed point numbers, and in the\\n    // case of ln36, 36 decimals.\\n    int256 constant ONE_20 = 1e20;\\n    int256 constant ONE_36 = 1e36;\\n\\n    // The domain of natural exponentiation is bound by the word size and number of decimals used.\\n    //\\n    // Because internally the result will be stored using 20 decimals, the largest possible result is\\n    // (2^255 - 1) / 10^20, which makes the largest exponent ln((2^255 - 1) / 10^20) = 130.700829182905140221.\\n    // The smallest possible result is 10^(-18), which makes largest negative argument\\n    // ln(10^(-18)) = -41.446531673892822312.\\n    // We use 130.0 and -41.0 to have some safety margin.\\n    int256 constant MAX_NATURAL_EXPONENT = 130e18;\\n    int256 constant MIN_NATURAL_EXPONENT = -41e18;\\n\\n    // Bounds for ln_36's argument. Both ln(0.9) and ln(1.1) can be represented with 36 decimal places in a fixed point\\n    // 256 bit integer.\\n    int256 constant LN_36_LOWER_BOUND = ONE_18 - 1e17;\\n    int256 constant LN_36_UPPER_BOUND = ONE_18 + 1e17;\\n\\n    uint256 constant MILD_EXPONENT_BOUND = 2**254 / uint256(ONE_20);\\n\\n    // 18 decimal constants\\n    int256 constant x0 = 128000000000000000000; // 2\\u02c67\\n    int256 constant a0 = 38877084059945950922200000000000000000000000000000000000; // e\\u02c6(x0) (no decimals)\\n    int256 constant x1 = 64000000000000000000; // 2\\u02c66\\n    int256 constant a1 = 6235149080811616882910000000; // e\\u02c6(x1) (no decimals)\\n\\n    // 20 decimal constants\\n    int256 constant x2 = 3200000000000000000000; // 2\\u02c65\\n    int256 constant a2 = 7896296018268069516100000000000000; // e\\u02c6(x2)\\n    int256 constant x3 = 1600000000000000000000; // 2\\u02c64\\n    int256 constant a3 = 888611052050787263676000000; // e\\u02c6(x3)\\n    int256 constant x4 = 800000000000000000000; // 2\\u02c63\\n    int256 constant a4 = 298095798704172827474000; // e\\u02c6(x4)\\n    int256 constant x5 = 400000000000000000000; // 2\\u02c62\\n    int256 constant a5 = 5459815003314423907810; // e\\u02c6(x5)\\n    int256 constant x6 = 200000000000000000000; // 2\\u02c61\\n    int256 constant a6 = 738905609893065022723; // e\\u02c6(x6)\\n    int256 constant x7 = 100000000000000000000; // 2\\u02c60\\n    int256 constant a7 = 271828182845904523536; // e\\u02c6(x7)\\n    int256 constant x8 = 50000000000000000000; // 2\\u02c6-1\\n    int256 constant a8 = 164872127070012814685; // e\\u02c6(x8)\\n    int256 constant x9 = 25000000000000000000; // 2\\u02c6-2\\n    int256 constant a9 = 128402541668774148407; // e\\u02c6(x9)\\n    int256 constant x10 = 12500000000000000000; // 2\\u02c6-3\\n    int256 constant a10 = 113314845306682631683; // e\\u02c6(x10)\\n    int256 constant x11 = 6250000000000000000; // 2\\u02c6-4\\n    int256 constant a11 = 106449445891785942956; // e\\u02c6(x11)\\n\\n    /**\\n     * @dev Exponentiation (x^y) with unsigned 18 decimal fixed point base and exponent.\\n     *\\n     * Reverts if ln(x) * y is smaller than `MIN_NATURAL_EXPONENT`, or larger than `MAX_NATURAL_EXPONENT`.\\n     */\\n    function pow(uint256 x, uint256 y) internal pure returns (uint256) {\\n        if (y == 0) {\\n            // We solve the 0^0 indetermination by making it equal one.\\n            return uint256(ONE_18);\\n        }\\n\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        // Instead of computing x^y directly, we instead rely on the properties of logarithms and exponentiation to\\n        // arrive at that result. In particular, exp(ln(x)) = x, and ln(x^y) = y * ln(x). This means\\n        // x^y = exp(y * ln(x)).\\n\\n        // The ln function takes a signed value, so we need to make sure x fits in the signed 256 bit range.\\n        _require(x < 2**255, Errors.X_OUT_OF_BOUNDS);\\n        int256 x_int256 = int256(x);\\n\\n        // We will compute y * ln(x) in a single step. Depending on the value of x, we can either use ln or ln_36. In\\n        // both cases, we leave the division by ONE_18 (due to fixed point multiplication) to the end.\\n\\n        // This prevents y * ln(x) from overflowing, and at the same time guarantees y fits in the signed 256 bit range.\\n        _require(y < MILD_EXPONENT_BOUND, Errors.Y_OUT_OF_BOUNDS);\\n        int256 y_int256 = int256(y);\\n\\n        int256 logx_times_y;\\n        if (LN_36_LOWER_BOUND < x_int256 && x_int256 < LN_36_UPPER_BOUND) {\\n            int256 ln_36_x = _ln_36(x_int256);\\n\\n            // ln_36_x has 36 decimal places, so multiplying by y_int256 isn't as straightforward, since we can't just\\n            // bring y_int256 to 36 decimal places, as it might overflow. Instead, we perform two 18 decimal\\n            // multiplications and add the results: one with the first 18 decimals of ln_36_x, and one with the\\n            // (downscaled) last 18 decimals.\\n            logx_times_y = ((ln_36_x / ONE_18) * y_int256 + ((ln_36_x % ONE_18) * y_int256) / ONE_18);\\n        } else {\\n            logx_times_y = _ln(x_int256) * y_int256;\\n        }\\n        logx_times_y /= ONE_18;\\n\\n        // Finally, we compute exp(y * ln(x)) to arrive at x^y\\n        _require(\\n            MIN_NATURAL_EXPONENT <= logx_times_y && logx_times_y <= MAX_NATURAL_EXPONENT,\\n            Errors.PRODUCT_OUT_OF_BOUNDS\\n        );\\n\\n        return uint256(exp(logx_times_y));\\n    }\\n\\n    /**\\n     * @dev Natural exponentiation (e^x) with signed 18 decimal fixed point exponent.\\n     *\\n     * Reverts if `x` is smaller than MIN_NATURAL_EXPONENT, or larger than `MAX_NATURAL_EXPONENT`.\\n     */\\n    function exp(int256 x) internal pure returns (int256) {\\n        _require(x >= MIN_NATURAL_EXPONENT && x <= MAX_NATURAL_EXPONENT, Errors.INVALID_EXPONENT);\\n\\n        if (x < 0) {\\n            // We only handle positive exponents: e^(-x) is computed as 1 / e^x. We can safely make x positive since it\\n            // fits in the signed 256 bit range (as it is larger than MIN_NATURAL_EXPONENT).\\n            // Fixed point division requires multiplying by ONE_18.\\n            return ((ONE_18 * ONE_18) / exp(-x));\\n        }\\n\\n        // First, we use the fact that e^(x+y) = e^x * e^y to decompose x into a sum of powers of two, which we call x_n,\\n        // where x_n == 2^(7 - n), and e^x_n = a_n has been precomputed. We choose the first x_n, x0, to equal 2^7\\n        // because all larger powers are larger than MAX_NATURAL_EXPONENT, and therefore not present in the\\n        // decomposition.\\n        // At the end of this process we will have the product of all e^x_n = a_n that apply, and the remainder of this\\n        // decomposition, which will be lower than the smallest x_n.\\n        // exp(x) = k_0 * a_0 * k_1 * a_1 * ... + k_n * a_n * exp(remainder), where each k_n equals either 0 or 1.\\n        // We mutate x by subtracting x_n, making it the remainder of the decomposition.\\n\\n        // The first two a_n (e^(2^7) and e^(2^6)) are too large if stored as 18 decimal numbers, and could cause\\n        // intermediate overflows. Instead we store them as plain integers, with 0 decimals.\\n        // Additionally, x0 + x1 is larger than MAX_NATURAL_EXPONENT, which means they will not both be present in the\\n        // decomposition.\\n\\n        // For each x_n, we test if that term is present in the decomposition (if x is larger than it), and if so deduct\\n        // it and compute the accumulated product.\\n\\n        int256 firstAN;\\n        if (x >= x0) {\\n            x -= x0;\\n            firstAN = a0;\\n        } else if (x >= x1) {\\n            x -= x1;\\n            firstAN = a1;\\n        } else {\\n            firstAN = 1; // One with no decimal places\\n        }\\n\\n        // We now transform x into a 20 decimal fixed point number, to have enhanced precision when computing the\\n        // smaller terms.\\n        x *= 100;\\n\\n        // `product` is the accumulated product of all a_n (except a0 and a1), which starts at 20 decimal fixed point\\n        // one. Recall that fixed point multiplication requires dividing by ONE_20.\\n        int256 product = ONE_20;\\n\\n        if (x >= x2) {\\n            x -= x2;\\n            product = (product * a2) / ONE_20;\\n        }\\n        if (x >= x3) {\\n            x -= x3;\\n            product = (product * a3) / ONE_20;\\n        }\\n        if (x >= x4) {\\n            x -= x4;\\n            product = (product * a4) / ONE_20;\\n        }\\n        if (x >= x5) {\\n            x -= x5;\\n            product = (product * a5) / ONE_20;\\n        }\\n        if (x >= x6) {\\n            x -= x6;\\n            product = (product * a6) / ONE_20;\\n        }\\n        if (x >= x7) {\\n            x -= x7;\\n            product = (product * a7) / ONE_20;\\n        }\\n        if (x >= x8) {\\n            x -= x8;\\n            product = (product * a8) / ONE_20;\\n        }\\n        if (x >= x9) {\\n            x -= x9;\\n            product = (product * a9) / ONE_20;\\n        }\\n\\n        // x10 and x11 are unnecessary here since we have high enough precision already.\\n\\n        // Now we need to compute e^x, where x is small (in particular, it is smaller than x9). We use the Taylor series\\n        // expansion for e^x: 1 + x + (x^2 / 2!) + (x^3 / 3!) + ... + (x^n / n!).\\n\\n        int256 seriesSum = ONE_20; // The initial one in the sum, with 20 decimal places.\\n        int256 term; // Each term in the sum, where the nth term is (x^n / n!).\\n\\n        // The first term is simply x.\\n        term = x;\\n        seriesSum += term;\\n\\n        // Each term (x^n / n!) equals the previous one times x, divided by n. Since x is a fixed point number,\\n        // multiplying by it requires dividing by ONE_20, but dividing by the non-fixed point n values does not.\\n\\n        term = ((term * x) / ONE_20) / 2;\\n        seriesSum += term;\\n\\n        term = ((term * x) / ONE_20) / 3;\\n        seriesSum += term;\\n\\n        term = ((term * x) / ONE_20) / 4;\\n        seriesSum += term;\\n\\n        term = ((term * x) / ONE_20) / 5;\\n        seriesSum += term;\\n\\n        term = ((term * x) / ONE_20) / 6;\\n        seriesSum += term;\\n\\n        term = ((term * x) / ONE_20) / 7;\\n        seriesSum += term;\\n\\n        term = ((term * x) / ONE_20) / 8;\\n        seriesSum += term;\\n\\n        term = ((term * x) / ONE_20) / 9;\\n        seriesSum += term;\\n\\n        term = ((term * x) / ONE_20) / 10;\\n        seriesSum += term;\\n\\n        term = ((term * x) / ONE_20) / 11;\\n        seriesSum += term;\\n\\n        term = ((term * x) / ONE_20) / 12;\\n        seriesSum += term;\\n\\n        // 12 Taylor terms are sufficient for 18 decimal precision.\\n\\n        // We now have the first a_n (with no decimals), and the product of all other a_n present, and the Taylor\\n        // approximation of the exponentiation of the remainder (both with 20 decimals). All that remains is to multiply\\n        // all three (one 20 decimal fixed point multiplication, dividing by ONE_20, and one integer multiplication),\\n        // and then drop two digits to return an 18 decimal value.\\n\\n        return (((product * seriesSum) / ONE_20) * firstAN) / 100;\\n    }\\n\\n    /**\\n     * @dev Logarithm (log(arg, base), with signed 18 decimal fixed point base and argument.\\n     */\\n    function log(int256 arg, int256 base) internal pure returns (int256) {\\n        // This performs a simple base change: log(arg, base) = ln(arg) / ln(base).\\n\\n        // Both logBase and logArg are computed as 36 decimal fixed point numbers, either by using ln_36, or by\\n        // upscaling.\\n\\n        int256 logBase;\\n        if (LN_36_LOWER_BOUND < base && base < LN_36_UPPER_BOUND) {\\n            logBase = _ln_36(base);\\n        } else {\\n            logBase = _ln(base) * ONE_18;\\n        }\\n\\n        int256 logArg;\\n        if (LN_36_LOWER_BOUND < arg && arg < LN_36_UPPER_BOUND) {\\n            logArg = _ln_36(arg);\\n        } else {\\n            logArg = _ln(arg) * ONE_18;\\n        }\\n\\n        // When dividing, we multiply by ONE_18 to arrive at a result with 18 decimal places\\n        return (logArg * ONE_18) / logBase;\\n    }\\n\\n    /**\\n     * @dev Natural logarithm (ln(a)) with signed 18 decimal fixed point argument.\\n     */\\n    function ln(int256 a) internal pure returns (int256) {\\n        // The real natural logarithm is not defined for negative numbers or zero.\\n        _require(a > 0, Errors.OUT_OF_BOUNDS);\\n        if (LN_36_LOWER_BOUND < a && a < LN_36_UPPER_BOUND) {\\n            return _ln_36(a) / ONE_18;\\n        } else {\\n            return _ln(a);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal natural logarithm (ln(a)) with signed 18 decimal fixed point argument.\\n     */\\n    function _ln(int256 a) private pure returns (int256) {\\n        if (a < ONE_18) {\\n            // Since ln(a^k) = k * ln(a), we can compute ln(a) as ln(a) = ln((1/a)^(-1)) = - ln((1/a)). If a is less\\n            // than one, 1/a will be greater than one, and this if statement will not be entered in the recursive call.\\n            // Fixed point division requires multiplying by ONE_18.\\n            return (-_ln((ONE_18 * ONE_18) / a));\\n        }\\n\\n        // First, we use the fact that ln^(a * b) = ln(a) + ln(b) to decompose ln(a) into a sum of powers of two, which\\n        // we call x_n, where x_n == 2^(7 - n), which are the natural logarithm of precomputed quantities a_n (that is,\\n        // ln(a_n) = x_n). We choose the first x_n, x0, to equal 2^7 because the exponential of all larger powers cannot\\n        // be represented as 18 fixed point decimal numbers in 256 bits, and are therefore larger than a.\\n        // At the end of this process we will have the sum of all x_n = ln(a_n) that apply, and the remainder of this\\n        // decomposition, which will be lower than the smallest a_n.\\n        // ln(a) = k_0 * x_0 + k_1 * x_1 + ... + k_n * x_n + ln(remainder), where each k_n equals either 0 or 1.\\n        // We mutate a by subtracting a_n, making it the remainder of the decomposition.\\n\\n        // For reasons related to how `exp` works, the first two a_n (e^(2^7) and e^(2^6)) are not stored as fixed point\\n        // numbers with 18 decimals, but instead as plain integers with 0 decimals, so we need to multiply them by\\n        // ONE_18 to convert them to fixed point.\\n        // For each a_n, we test if that term is present in the decomposition (if a is larger than it), and if so divide\\n        // by it and compute the accumulated sum.\\n\\n        int256 sum = 0;\\n        if (a >= a0 * ONE_18) {\\n            a /= a0; // Integer, not fixed point division\\n            sum += x0;\\n        }\\n\\n        if (a >= a1 * ONE_18) {\\n            a /= a1; // Integer, not fixed point division\\n            sum += x1;\\n        }\\n\\n        // All other a_n and x_n are stored as 20 digit fixed point numbers, so we convert the sum and a to this format.\\n        sum *= 100;\\n        a *= 100;\\n\\n        // Because further a_n are  20 digit fixed point numbers, we multiply by ONE_20 when dividing by them.\\n\\n        if (a >= a2) {\\n            a = (a * ONE_20) / a2;\\n            sum += x2;\\n        }\\n\\n        if (a >= a3) {\\n            a = (a * ONE_20) / a3;\\n            sum += x3;\\n        }\\n\\n        if (a >= a4) {\\n            a = (a * ONE_20) / a4;\\n            sum += x4;\\n        }\\n\\n        if (a >= a5) {\\n            a = (a * ONE_20) / a5;\\n            sum += x5;\\n        }\\n\\n        if (a >= a6) {\\n            a = (a * ONE_20) / a6;\\n            sum += x6;\\n        }\\n\\n        if (a >= a7) {\\n            a = (a * ONE_20) / a7;\\n            sum += x7;\\n        }\\n\\n        if (a >= a8) {\\n            a = (a * ONE_20) / a8;\\n            sum += x8;\\n        }\\n\\n        if (a >= a9) {\\n            a = (a * ONE_20) / a9;\\n            sum += x9;\\n        }\\n\\n        if (a >= a10) {\\n            a = (a * ONE_20) / a10;\\n            sum += x10;\\n        }\\n\\n        if (a >= a11) {\\n            a = (a * ONE_20) / a11;\\n            sum += x11;\\n        }\\n\\n        // a is now a small number (smaller than a_11, which roughly equals 1.06). This means we can use a Taylor series\\n        // that converges rapidly for values of `a` close to one - the same one used in ln_36.\\n        // Let z = (a - 1) / (a + 1).\\n        // ln(a) = 2 * (z + z^3 / 3 + z^5 / 5 + z^7 / 7 + ... + z^(2 * n + 1) / (2 * n + 1))\\n\\n        // Recall that 20 digit fixed point division requires multiplying by ONE_20, and multiplication requires\\n        // division by ONE_20.\\n        int256 z = ((a - ONE_20) * ONE_20) / (a + ONE_20);\\n        int256 z_squared = (z * z) / ONE_20;\\n\\n        // num is the numerator of the series: the z^(2 * n + 1) term\\n        int256 num = z;\\n\\n        // seriesSum holds the accumulated sum of each term in the series, starting with the initial z\\n        int256 seriesSum = num;\\n\\n        // In each step, the numerator is multiplied by z^2\\n        num = (num * z_squared) / ONE_20;\\n        seriesSum += num / 3;\\n\\n        num = (num * z_squared) / ONE_20;\\n        seriesSum += num / 5;\\n\\n        num = (num * z_squared) / ONE_20;\\n        seriesSum += num / 7;\\n\\n        num = (num * z_squared) / ONE_20;\\n        seriesSum += num / 9;\\n\\n        num = (num * z_squared) / ONE_20;\\n        seriesSum += num / 11;\\n\\n        // 6 Taylor terms are sufficient for 36 decimal precision.\\n\\n        // Finally, we multiply by 2 (non fixed point) to compute ln(remainder)\\n        seriesSum *= 2;\\n\\n        // We now have the sum of all x_n present, and the Taylor approximation of the logarithm of the remainder (both\\n        // with 20 decimals). All that remains is to sum these two, and then drop two digits to return a 18 decimal\\n        // value.\\n\\n        return (sum + seriesSum) / 100;\\n    }\\n\\n    /**\\n     * @dev Intrnal high precision (36 decimal places) natural logarithm (ln(x)) with signed 18 decimal fixed point argument,\\n     * for x close to one.\\n     *\\n     * Should only be used if x is between LN_36_LOWER_BOUND and LN_36_UPPER_BOUND.\\n     */\\n    function _ln_36(int256 x) private pure returns (int256) {\\n        // Since ln(1) = 0, a value of x close to one will yield a very small result, which makes using 36 digits\\n        // worthwhile.\\n\\n        // First, we transform x to a 36 digit fixed point value.\\n        x *= ONE_18;\\n\\n        // We will use the following Taylor expansion, which converges very rapidly. Let z = (x - 1) / (x + 1).\\n        // ln(x) = 2 * (z + z^3 / 3 + z^5 / 5 + z^7 / 7 + ... + z^(2 * n + 1) / (2 * n + 1))\\n\\n        // Recall that 36 digit fixed point division requires multiplying by ONE_36, and multiplication requires\\n        // division by ONE_36.\\n        int256 z = ((x - ONE_36) * ONE_36) / (x + ONE_36);\\n        int256 z_squared = (z * z) / ONE_36;\\n\\n        // num is the numerator of the series: the z^(2 * n + 1) term\\n        int256 num = z;\\n\\n        // seriesSum holds the accumulated sum of each term in the series, starting with the initial z\\n        int256 seriesSum = num;\\n\\n        // In each step, the numerator is multiplied by z^2\\n        num = (num * z_squared) / ONE_36;\\n        seriesSum += num / 3;\\n\\n        num = (num * z_squared) / ONE_36;\\n        seriesSum += num / 5;\\n\\n        num = (num * z_squared) / ONE_36;\\n        seriesSum += num / 7;\\n\\n        num = (num * z_squared) / ONE_36;\\n        seriesSum += num / 9;\\n\\n        num = (num * z_squared) / ONE_36;\\n        seriesSum += num / 11;\\n\\n        num = (num * z_squared) / ONE_36;\\n        seriesSum += num / 13;\\n\\n        num = (num * z_squared) / ONE_36;\\n        seriesSum += num / 15;\\n\\n        // 8 Taylor terms are sufficient for 36 decimal precision.\\n\\n        // All that remains is multiplying by 2 (non fixed point).\\n        return seriesSum * 2;\\n    }\\n}\\n\",\"keccak256\":\"0x66c6a4efc58bcc18d11fdc3236ec53f6044944918e86116f3aa3deee1daac8ef\",\"license\":\"MIT\"},\"@balancer-labs/v2-solidity-utils/contracts/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../helpers/BalancerErrors.sol\\\";\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow checks.\\n * Adapted from OpenZeppelin's SafeMath library\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the addition of two unsigned integers of 256 bits, reverting on overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        _require(c >= a, Errors.ADD_OVERFLOW);\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a + b;\\n        _require((b >= 0 && c >= a) || (b < 0 && c < a), Errors.ADD_OVERFLOW);\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers of 256 bits, reverting on overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        _require(b <= a, Errors.SUB_OVERFLOW);\\n        uint256 c = a - b;\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a - b;\\n        _require((b >= 0 && c <= a) || (b < 0 && c > a), Errors.SUB_OVERFLOW);\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers of 256 bits.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers of 256 bits.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a * b;\\n        _require(a == 0 || c / a == b, Errors.MUL_OVERFLOW);\\n        return c;\\n    }\\n\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        bool roundUp\\n    ) internal pure returns (uint256) {\\n        return roundUp ? divUp(a, b) : divDown(a, b);\\n    }\\n\\n    function divDown(uint256 a, uint256 b) internal pure returns (uint256) {\\n        _require(b != 0, Errors.ZERO_DIVISION);\\n        return a / b;\\n    }\\n\\n    function divUp(uint256 a, uint256 b) internal pure returns (uint256) {\\n        _require(b != 0, Errors.ZERO_DIVISION);\\n\\n        if (a == 0) {\\n            return 0;\\n        } else {\\n            return 1 + (a - 1) / b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb665c41c5d079058a53d3041d464ca5b6cac21de6a1e9ec514185c85eff2c5fa\",\"license\":\"MIT\"},\"@balancer-labs/v2-solidity-utils/contracts/misc/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../openzeppelin/IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for WETH9.\\n * See https://github.com/gnosis/canonical-weth/blob/0dd1ea3e295eef916d0c6223ec63141137d22d67/contracts/WETH9.sol\\n */\\ninterface IWETH is IERC20 {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x19a0628bedbe48178a4c90509a40d750d5039677b964ec533a24361a8d97274b\",\"license\":\"GPL-3.0-or-later\"},\"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        _HASHED_NAME = keccak256(bytes(name));\\n        _HASHED_VERSION = keccak256(bytes(version));\\n        _TYPE_HASH = keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view virtual returns (bytes32) {\\n        return keccak256(abi.encode(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION, _getChainId(), address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", _domainSeparatorV4(), structHash));\\n    }\\n\\n    function _getChainId() private view returns (uint256 chainId) {\\n        // Silence state mutability warning without generating bytecode.\\n        // See https://github.com/ethereum/solidity/issues/10090#issuecomment-741789128 and\\n        // https://github.com/ethereum/solidity/issues/2691\\n        this;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            chainId := chainid()\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0cf3ec5d6130aac057e69df14b1ff87baf9c6c2cb13bc545952def004e629ac0\",\"license\":\"MIT\"},\"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../helpers/BalancerErrors.sol\\\";\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(msg.sender, recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(\\n            sender,\\n            msg.sender,\\n            _allowances[sender][msg.sender].sub(amount, Errors.ERC20_TRANSFER_EXCEEDS_ALLOWANCE)\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(\\n            msg.sender,\\n            spender,\\n            _allowances[msg.sender][spender].sub(subtractedValue, Errors.ERC20_DECREASED_ALLOWANCE_BELOW_ZERO)\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        _require(sender != address(0), Errors.ERC20_TRANSFER_FROM_ZERO_ADDRESS);\\n        _require(recipient != address(0), Errors.ERC20_TRANSFER_TO_ZERO_ADDRESS);\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, Errors.ERC20_TRANSFER_EXCEEDS_BALANCE);\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        _require(account != address(0), Errors.ERC20_BURN_FROM_ZERO_ADDRESS);\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, Errors.ERC20_BURN_EXCEEDS_ALLOWANCE);\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4bd56e87f0041ba666a540160962cd9f1eed11164a9a91af180550d69da4c8bc\",\"license\":\"MIT\"},\"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./ERC20.sol\\\";\\nimport \\\"./IERC20Permit.sol\\\";\\nimport \\\"./EIP712.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * _Available since v3.4._\\n */\\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712 {\\n    mapping(address => uint256) private _nonces;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private immutable _PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n     */\\n    constructor(string memory name) EIP712(name, \\\"1\\\") {}\\n\\n    /**\\n     * @dev See {IERC20Permit-permit}.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        // solhint-disable-next-line not-rely-on-time\\n        _require(block.timestamp <= deadline, Errors.EXPIRED_PERMIT);\\n\\n        uint256 nonce = _nonces[owner];\\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, nonce, deadline));\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ecrecover(hash, v, r, s);\\n        _require((signer != address(0)) && (signer == owner), Errors.INVALID_SIGNATURE);\\n\\n        _nonces[owner] = nonce + 1;\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-nonces}.\\n     */\\n    function nonces(address owner) public view override returns (uint256) {\\n        return _nonces[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n}\\n\",\"keccak256\":\"0x28f96497e4b653b5ae3b3f1f34ce749dab19c1034304f77398c4958e8af7e900\",\"license\":\"MIT\"},\"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xd828a935a72a6d182912abba290e4debb8c684c36fd756088f7acb30e0b2bb76\",\"license\":\"MIT\"},\"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over `owner`'s tokens,\\n     * given `owner`'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for `permit`, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xffe929ce55ef0cbdcc60eee8bc9375c295757ad13afe3d757646538aa0429ff5\",\"license\":\"MIT\"},\"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../helpers/BalancerErrors.sol\\\";\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        _require(c >= a, Errors.ADD_OVERFLOW);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, Errors.SUB_OVERFLOW);\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, uint256 errorCode) internal pure returns (uint256) {\\n        _require(b <= a, errorCode);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n}\\n\",\"keccak256\":\"0xafe0542eb14932a66ce6280fbe9991130ead5bbcb7836d0a822fc4a59810c100\",\"license\":\"MIT\"},\"@balancer-labs/v2-vault/contracts/interfaces/IAsset.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev This is an empty interface used to represent either ERC20-conforming token contracts or ETH (using the zero\\n * address sentinel value). We're just relying on the fact that `interface` can be used to declare new address-like\\n * types.\\n *\\n * This concept is unrelated to a Pool's Asset Managers.\\n */\\ninterface IAsset {\\n    // solhint-disable-previous-line no-empty-blocks\\n}\\n\",\"keccak256\":\"0x70ecf1d48c285d78718bd2e159345677038ed8a81c74444bedd6a5c61af9aff6\",\"license\":\"GPL-3.0-or-later\"},\"@balancer-labs/v2-vault/contracts/interfaces/IAuthorizer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\ninterface IAuthorizer {\\n    /**\\n     * @dev Returns true if `account` can perform the action described by `actionId` in the contract `where`.\\n     */\\n    function canPerform(\\n        bytes32 actionId,\\n        address account,\\n        address where\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x792871e208bba1dad291f8d1cffad86f4afa5e2360816bd9c43481f7297155f5\",\"license\":\"GPL-3.0-or-later\"},\"@balancer-labs/v2-vault/contracts/interfaces/IBasePool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IVault.sol\\\";\\nimport \\\"./IPoolSwapStructs.sol\\\";\\n\\n/**\\n * @dev Interface for adding and removing liquidity that all Pool contracts should implement. Note that this is not\\n * the complete Pool contract interface, as it is missing the swap hooks. Pool contracts should also inherit from\\n * either IGeneralPool or IMinimalSwapInfoPool\\n */\\ninterface IBasePool is IPoolSwapStructs {\\n    /**\\n     * @dev Called by the Vault when a user calls `IVault.joinPool` to add liquidity to this Pool. Returns how many of\\n     * each registered token the user should provide, as well as the amount of protocol fees the Pool owes to the Vault.\\n     * The Vault will then take tokens from `sender` and add them to the Pool's balances, as well as collect\\n     * the reported amount in protocol fees, which the pool should calculate based on `protocolSwapFeePercentage`.\\n     *\\n     * Protocol fees are reported and charged on join events so that the Pool is free of debt whenever new users join.\\n     *\\n     * `sender` is the account performing the join (from which tokens will be withdrawn), and `recipient` is the account\\n     * designated to receive any benefits (typically pool shares). `balances` contains the total balances\\n     * for each token the Pool registered in the Vault, in the same order that `IVault.getPoolTokens` would return.\\n     *\\n     * `lastChangeBlock` is the last block in which *any* of the Pool's registered tokens last changed its total\\n     * balance.\\n     *\\n     * `userData` contains any pool-specific instructions needed to perform the calculations, such as the type of\\n     * join (e.g., proportional given an amount of pool shares, single-asset, multi-asset, etc.)\\n     *\\n     * Contracts implementing this function should check that the caller is indeed the Vault before performing any\\n     * state-changing operations, such as minting pool shares.\\n     */\\n    function onJoinPool(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        uint256[] memory balances,\\n        uint256 lastChangeBlock,\\n        uint256 protocolSwapFeePercentage,\\n        bytes memory userData\\n    ) external returns (uint256[] memory amountsIn, uint256[] memory dueProtocolFeeAmounts);\\n\\n    /**\\n     * @dev Called by the Vault when a user calls `IVault.exitPool` to remove liquidity from this Pool. Returns how many\\n     * tokens the Vault should deduct from the Pool's balances, as well as the amount of protocol fees the Pool owes\\n     * to the Vault. The Vault will then take tokens from the Pool's balances and send them to `recipient`,\\n     * as well as collect the reported amount in protocol fees, which the Pool should calculate based on\\n     * `protocolSwapFeePercentage`.\\n     *\\n     * Protocol fees are charged on exit events to guarantee that users exiting the Pool have paid their share.\\n     *\\n     * `sender` is the account performing the exit (typically the pool shareholder), and `recipient` is the account\\n     * to which the Vault will send the proceeds. `balances` contains the total token balances for each token\\n     * the Pool registered in the Vault, in the same order that `IVault.getPoolTokens` would return.\\n     *\\n     * `lastChangeBlock` is the last block in which *any* of the Pool's registered tokens last changed its total\\n     * balance.\\n     *\\n     * `userData` contains any pool-specific instructions needed to perform the calculations, such as the type of\\n     * exit (e.g., proportional given an amount of pool shares, single-asset, multi-asset, etc.)\\n     *\\n     * Contracts implementing this function should check that the caller is indeed the Vault before performing any\\n     * state-changing operations, such as burning pool shares.\\n     */\\n    function onExitPool(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        uint256[] memory balances,\\n        uint256 lastChangeBlock,\\n        uint256 protocolSwapFeePercentage,\\n        bytes memory userData\\n    ) external returns (uint256[] memory amountsOut, uint256[] memory dueProtocolFeeAmounts);\\n\\n    function getPoolId() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xceae7edca5dc3084127b998c4a5b4c8a01e00777484fb19fcc4d5199adc7f826\",\"license\":\"GPL-3.0-or-later\"},\"@balancer-labs/v2-vault/contracts/interfaces/IFlashLoanRecipient.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\n// Inspired by Aave Protocol's IFlashLoanReceiver.\\n\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/IERC20.sol\\\";\\n\\ninterface IFlashLoanRecipient {\\n    /**\\n     * @dev When `flashLoan` is called on the Vault, it invokes the `receiveFlashLoan` hook on the recipient.\\n     *\\n     * At the time of the call, the Vault will have transferred `amounts` for `tokens` to the recipient. Before this\\n     * call returns, the recipient must have transferred `amounts` plus `feeAmounts` for each token back to the\\n     * Vault, or else the entire flash loan will revert.\\n     *\\n     * `userData` is the same value passed in the `IVault.flashLoan` call.\\n     */\\n    function receiveFlashLoan(\\n        IERC20[] memory tokens,\\n        uint256[] memory amounts,\\n        uint256[] memory feeAmounts,\\n        bytes memory userData\\n    ) external;\\n}\\n\",\"keccak256\":\"0x5ceb7a9b209c01659b25898622a2415414e12a7200559e57283fd511fe96c92a\",\"license\":\"GPL-3.0-or-later\"},\"@balancer-labs/v2-vault/contracts/interfaces/IMinimalSwapInfoPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IBasePool.sol\\\";\\n\\n/**\\n * @dev Pool contracts with the MinimalSwapInfo or TwoToken specialization settings should implement this interface.\\n *\\n * This is called by the Vault when a user calls `IVault.swap` or `IVault.batchSwap` to swap with this Pool.\\n * Returns the number of tokens the Pool will grant to the user in a 'given in' swap, or that the user will grant\\n * to the pool in a 'given out' swap.\\n *\\n * This can often be implemented by a `view` function, since many pricing algorithms don't need to track state\\n * changes in swaps. However, contracts implementing this in non-view functions should check that the caller is\\n * indeed the Vault.\\n */\\ninterface IMinimalSwapInfoPool is IBasePool {\\n    function onSwap(\\n        SwapRequest memory swapRequest,\\n        uint256 currentBalanceTokenIn,\\n        uint256 currentBalanceTokenOut\\n    ) external returns (uint256 amount);\\n}\\n\",\"keccak256\":\"0x7469919e147c0db8b4f290d310ca3816dec5d3c6cc6b258cf6e0df820a20a179\",\"license\":\"GPL-3.0-or-later\"},\"@balancer-labs/v2-vault/contracts/interfaces/IPoolSwapStructs.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/IERC20.sol\\\";\\n\\nimport \\\"./IVault.sol\\\";\\n\\ninterface IPoolSwapStructs {\\n    // This is not really an interface - it just defines common structs used by other interfaces: IGeneralPool and\\n    // IMinimalSwapInfoPool.\\n    //\\n    // This data structure represents a request for a token swap, where `kind` indicates the swap type ('given in' or\\n    // 'given out') which indicates whether or not the amount sent by the pool is known.\\n    //\\n    // The pool receives `tokenIn` and sends `tokenOut`. `amount` is the number of `tokenIn` tokens the pool will take\\n    // in, or the number of `tokenOut` tokens the Pool will send out, depending on the given swap `kind`.\\n    //\\n    // All other fields are not strictly necessary for most swaps, but are provided to support advanced scenarios in\\n    // some Pools.\\n    //\\n    // `poolId` is the ID of the Pool involved in the swap - this is useful for Pool contracts that implement more than\\n    // one Pool.\\n    //\\n    // The meaning of `lastChangeBlock` depends on the Pool specialization:\\n    //  - Two Token or Minimal Swap Info: the last block in which either `tokenIn` or `tokenOut` changed its total\\n    //    balance.\\n    //  - General: the last block in which *any* of the Pool's registered tokens changed its total balance.\\n    //\\n    // `from` is the origin address for the funds the Pool receives, and `to` is the destination address\\n    // where the Pool sends the outgoing tokens.\\n    //\\n    // `userData` is extra data provided by the caller - typically a signature from a trusted party.\\n    struct SwapRequest {\\n        IVault.SwapKind kind;\\n        IERC20 tokenIn;\\n        IERC20 tokenOut;\\n        uint256 amount;\\n        // Misc data\\n        bytes32 poolId;\\n        uint256 lastChangeBlock;\\n        address from;\\n        address to;\\n        bytes userData;\\n    }\\n}\\n\",\"keccak256\":\"0x618519301dfd8c123981fef84161e3068988bc2a231cd41785c304ba45135af3\",\"license\":\"GPL-3.0-or-later\"},\"@balancer-labs/v2-vault/contracts/interfaces/IProtocolFeesCollector.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/IERC20.sol\\\";\\n\\nimport \\\"./IVault.sol\\\";\\nimport \\\"./IAuthorizer.sol\\\";\\n\\ninterface IProtocolFeesCollector {\\n    event SwapFeePercentageChanged(uint256 newSwapFeePercentage);\\n    event FlashLoanFeePercentageChanged(uint256 newFlashLoanFeePercentage);\\n\\n    function withdrawCollectedFees(\\n        IERC20[] calldata tokens,\\n        uint256[] calldata amounts,\\n        address recipient\\n    ) external;\\n\\n    function setSwapFeePercentage(uint256 newSwapFeePercentage) external;\\n\\n    function setFlashLoanFeePercentage(uint256 newFlashLoanFeePercentage) external;\\n\\n    function getSwapFeePercentage() external view returns (uint256);\\n\\n    function getFlashLoanFeePercentage() external view returns (uint256);\\n\\n    function getCollectedFeeAmounts(IERC20[] memory tokens) external view returns (uint256[] memory feeAmounts);\\n\\n    function getAuthorizer() external view returns (IAuthorizer);\\n\\n    function vault() external view returns (IVault);\\n}\\n\",\"keccak256\":\"0xacad6dfbdf2395aeb8b793b3cb5d9ee2702d8d5f667084ff7bfa248f64700f47\",\"license\":\"GPL-3.0-or-later\"},\"@balancer-labs/v2-vault/contracts/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/IERC20.sol\\\";\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/helpers/ISignaturesValidator.sol\\\";\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/helpers/ITemporarilyPausable.sol\\\";\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/misc/IWETH.sol\\\";\\n\\nimport \\\"./IAsset.sol\\\";\\nimport \\\"./IAuthorizer.sol\\\";\\nimport \\\"./IFlashLoanRecipient.sol\\\";\\nimport \\\"./IProtocolFeesCollector.sol\\\";\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Full external interface for the Vault core contract - no external or public methods exist in the contract that\\n * don't override one of these declarations.\\n */\\ninterface IVault is ISignaturesValidator, ITemporarilyPausable {\\n    // Generalities about the Vault:\\n    //\\n    // - Whenever documentation refers to 'tokens', it strictly refers to ERC20-compliant token contracts. Tokens are\\n    // transferred out of the Vault by calling the `IERC20.transfer` function, and transferred in by calling\\n    // `IERC20.transferFrom`. In these cases, the sender must have previously allowed the Vault to use their tokens by\\n    // calling `IERC20.approve`. The only deviation from the ERC20 standard that is supported is functions not returning\\n    // a boolean value: in these scenarios, a non-reverting call is assumed to be successful.\\n    //\\n    // - All non-view functions in the Vault are non-reentrant: calling them while another one is mid-execution (e.g.\\n    // while execution control is transferred to a token contract during a swap) will result in a revert. View\\n    // functions can be called in a re-reentrant way, but doing so might cause them to return inconsistent results.\\n    // Contracts calling view functions in the Vault must make sure the Vault has not already been entered.\\n    //\\n    // - View functions revert if referring to either unregistered Pools, or unregistered tokens for registered Pools.\\n\\n    // Authorizer\\n    //\\n    // Some system actions are permissioned, like setting and collecting protocol fees. This permissioning system exists\\n    // outside of the Vault in the Authorizer contract: the Vault simply calls the Authorizer to check if the caller\\n    // can perform a given action.\\n\\n    /**\\n     * @dev Returns the Vault's Authorizer.\\n     */\\n    function getAuthorizer() external view returns (IAuthorizer);\\n\\n    /**\\n     * @dev Sets a new Authorizer for the Vault. The caller must be allowed by the current Authorizer to do this.\\n     *\\n     * Emits an `AuthorizerChanged` event.\\n     */\\n    function setAuthorizer(IAuthorizer newAuthorizer) external;\\n\\n    /**\\n     * @dev Emitted when a new authorizer is set by `setAuthorizer`.\\n     */\\n    event AuthorizerChanged(IAuthorizer indexed newAuthorizer);\\n\\n    // Relayers\\n    //\\n    // Additionally, it is possible for an account to perform certain actions on behalf of another one, using their\\n    // Vault ERC20 allowance and Internal Balance. These accounts are said to be 'relayers' for these Vault functions,\\n    // and are expected to be smart contracts with sound authentication mechanisms. For an account to be able to wield\\n    // this power, two things must occur:\\n    //  - The Authorizer must grant the account the permission to be a relayer for the relevant Vault function. This\\n    //    means that Balancer governance must approve each individual contract to act as a relayer for the intended\\n    //    functions.\\n    //  - Each user must approve the relayer to act on their behalf.\\n    // This double protection means users cannot be tricked into approving malicious relayers (because they will not\\n    // have been allowed by the Authorizer via governance), nor can malicious relayers approved by a compromised\\n    // Authorizer or governance drain user funds, since they would also need to be approved by each individual user.\\n\\n    /**\\n     * @dev Returns true if `user` has approved `relayer` to act as a relayer for them.\\n     */\\n    function hasApprovedRelayer(address user, address relayer) external view returns (bool);\\n\\n    /**\\n     * @dev Allows `relayer` to act as a relayer for `sender` if `approved` is true, and disallows it otherwise.\\n     *\\n     * Emits a `RelayerApprovalChanged` event.\\n     */\\n    function setRelayerApproval(\\n        address sender,\\n        address relayer,\\n        bool approved\\n    ) external;\\n\\n    /**\\n     * @dev Emitted every time a relayer is approved or disapproved by `setRelayerApproval`.\\n     */\\n    event RelayerApprovalChanged(address indexed relayer, address indexed sender, bool approved);\\n\\n    // Internal Balance\\n    //\\n    // Users can deposit tokens into the Vault, where they are allocated to their Internal Balance, and later\\n    // transferred or withdrawn. It can also be used as a source of tokens when joining Pools, as a destination\\n    // when exiting them, and as either when performing swaps. This usage of Internal Balance results in greatly reduced\\n    // gas costs when compared to relying on plain ERC20 transfers, leading to large savings for frequent users.\\n    //\\n    // Internal Balance management features batching, which means a single contract call can be used to perform multiple\\n    // operations of different kinds, with different senders and recipients, at once.\\n\\n    /**\\n     * @dev Returns `user`'s Internal Balance for a set of tokens.\\n     */\\n    function getInternalBalance(address user, IERC20[] memory tokens) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Performs a set of user balance operations, which involve Internal Balance (deposit, withdraw or transfer)\\n     * and plain ERC20 transfers using the Vault's allowance. This last feature is particularly useful for relayers, as\\n     * it lets integrators reuse a user's Vault allowance.\\n     *\\n     * For each operation, if the caller is not `sender`, it must be an authorized relayer for them.\\n     */\\n    function manageUserBalance(UserBalanceOp[] memory ops) external payable;\\n\\n    /**\\n     * @dev Data for `manageUserBalance` operations, which include the possibility for ETH to be sent and received\\n     without manual WETH wrapping or unwrapping.\\n     */\\n    struct UserBalanceOp {\\n        UserBalanceOpKind kind;\\n        IAsset asset;\\n        uint256 amount;\\n        address sender;\\n        address payable recipient;\\n    }\\n\\n    // There are four possible operations in `manageUserBalance`:\\n    //\\n    // - DEPOSIT_INTERNAL\\n    // Increases the Internal Balance of the `recipient` account by transferring tokens from the corresponding\\n    // `sender`. The sender must have allowed the Vault to use their tokens via `IERC20.approve()`.\\n    //\\n    // ETH can be used by passing the ETH sentinel value as the asset and forwarding ETH in the call: it will be wrapped\\n    // and deposited as WETH. Any ETH amount remaining will be sent back to the caller (not the sender, which is\\n    // relevant for relayers).\\n    //\\n    // Emits an `InternalBalanceChanged` event.\\n    //\\n    //\\n    // - WITHDRAW_INTERNAL\\n    // Decreases the Internal Balance of the `sender` account by transferring tokens to the `recipient`.\\n    //\\n    // ETH can be used by passing the ETH sentinel value as the asset. This will deduct WETH instead, unwrap it and send\\n    // it to the recipient as ETH.\\n    //\\n    // Emits an `InternalBalanceChanged` event.\\n    //\\n    //\\n    // - TRANSFER_INTERNAL\\n    // Transfers tokens from the Internal Balance of the `sender` account to the Internal Balance of `recipient`.\\n    //\\n    // Reverts if the ETH sentinel value is passed.\\n    //\\n    // Emits an `InternalBalanceChanged` event.\\n    //\\n    //\\n    // - TRANSFER_EXTERNAL\\n    // Transfers tokens from `sender` to `recipient`, using the Vault's ERC20 allowance. This is typically used by\\n    // relayers, as it lets them reuse a user's Vault allowance.\\n    //\\n    // Reverts if the ETH sentinel value is passed.\\n    //\\n    // Emits an `ExternalBalanceTransfer` event.\\n\\n    enum UserBalanceOpKind { DEPOSIT_INTERNAL, WITHDRAW_INTERNAL, TRANSFER_INTERNAL, TRANSFER_EXTERNAL }\\n\\n    /**\\n     * @dev Emitted when a user's Internal Balance changes, either from calls to `manageUserBalance`, or through\\n     * interacting with Pools using Internal Balance.\\n     *\\n     * Because Internal Balance works exclusively with ERC20 tokens, ETH deposits and withdrawals will use the WETH\\n     * address.\\n     */\\n    event InternalBalanceChanged(address indexed user, IERC20 indexed token, int256 delta);\\n\\n    /**\\n     * @dev Emitted when a user's Vault ERC20 allowance is used by the Vault to transfer tokens to an external account.\\n     */\\n    event ExternalBalanceTransfer(IERC20 indexed token, address indexed sender, address recipient, uint256 amount);\\n\\n    // Pools\\n    //\\n    // There are three specialization settings for Pools, which allow for cheaper swaps at the cost of reduced\\n    // functionality:\\n    //\\n    //  - General: no specialization, suited for all Pools. IGeneralPool is used for swap request callbacks, passing the\\n    // balance of all tokens in the Pool. These Pools have the largest swap costs (because of the extra storage reads),\\n    // which increase with the number of registered tokens.\\n    //\\n    //  - Minimal Swap Info: IMinimalSwapInfoPool is used instead of IGeneralPool, which saves gas by only passing the\\n    // balance of the two tokens involved in the swap. This is suitable for some pricing algorithms, like the weighted\\n    // constant product one popularized by Balancer V1. Swap costs are smaller compared to general Pools, and are\\n    // independent of the number of registered tokens.\\n    //\\n    //  - Two Token: only allows two tokens to be registered. This achieves the lowest possible swap gas cost. Like\\n    // minimal swap info Pools, these are called via IMinimalSwapInfoPool.\\n\\n    enum PoolSpecialization { GENERAL, MINIMAL_SWAP_INFO, TWO_TOKEN }\\n\\n    /**\\n     * @dev Registers the caller account as a Pool with a given specialization setting. Returns the Pool's ID, which\\n     * is used in all Pool-related functions. Pools cannot be deregistered, nor can the Pool's specialization be\\n     * changed.\\n     *\\n     * The caller is expected to be a smart contract that implements either `IGeneralPool` or `IMinimalSwapInfoPool`,\\n     * depending on the chosen specialization setting. This contract is known as the Pool's contract.\\n     *\\n     * Note that the same contract may register itself as multiple Pools with unique Pool IDs, or in other words,\\n     * multiple Pools may share the same contract.\\n     *\\n     * Emits a `PoolRegistered` event.\\n     */\\n    function registerPool(PoolSpecialization specialization) external returns (bytes32);\\n\\n    /**\\n     * @dev Emitted when a Pool is registered by calling `registerPool`.\\n     */\\n    event PoolRegistered(bytes32 indexed poolId, address indexed poolAddress, PoolSpecialization specialization);\\n\\n    /**\\n     * @dev Returns a Pool's contract address and specialization setting.\\n     */\\n    function getPool(bytes32 poolId) external view returns (address, PoolSpecialization);\\n\\n    /**\\n     * @dev Registers `tokens` for the `poolId` Pool. Must be called by the Pool's contract.\\n     *\\n     * Pools can only interact with tokens they have registered. Users join a Pool by transferring registered tokens,\\n     * exit by receiving registered tokens, and can only swap registered tokens.\\n     *\\n     * Each token can only be registered once. For Pools with the Two Token specialization, `tokens` must have a length\\n     * of two, that is, both tokens must be registered in the same `registerTokens` call, and they must be sorted in\\n     * ascending order.\\n     *\\n     * The `tokens` and `assetManagers` arrays must have the same length, and each entry in these indicates the Asset\\n     * Manager for the corresponding token. Asset Managers can manage a Pool's tokens via `managePoolBalance`,\\n     * depositing and withdrawing them directly, and can even set their balance to arbitrary amounts. They are therefore\\n     * expected to be highly secured smart contracts with sound design principles, and the decision to register an\\n     * Asset Manager should not be made lightly.\\n     *\\n     * Pools can choose not to assign an Asset Manager to a given token by passing in the zero address. Once an Asset\\n     * Manager is set, it cannot be changed except by deregistering the associated token and registering again with a\\n     * different Asset Manager.\\n     *\\n     * Emits a `TokensRegistered` event.\\n     */\\n    function registerTokens(\\n        bytes32 poolId,\\n        IERC20[] memory tokens,\\n        address[] memory assetManagers\\n    ) external;\\n\\n    /**\\n     * @dev Emitted when a Pool registers tokens by calling `registerTokens`.\\n     */\\n    event TokensRegistered(bytes32 indexed poolId, IERC20[] tokens, address[] assetManagers);\\n\\n    /**\\n     * @dev Deregisters `tokens` for the `poolId` Pool. Must be called by the Pool's contract.\\n     *\\n     * Only registered tokens (via `registerTokens`) can be deregistered. Additionally, they must have zero total\\n     * balance. For Pools with the Two Token specialization, `tokens` must have a length of two, that is, both tokens\\n     * must be deregistered in the same `deregisterTokens` call.\\n     *\\n     * A deregistered token can be re-registered later on, possibly with a different Asset Manager.\\n     *\\n     * Emits a `TokensDeregistered` event.\\n     */\\n    function deregisterTokens(bytes32 poolId, IERC20[] memory tokens) external;\\n\\n    /**\\n     * @dev Emitted when a Pool deregisters tokens by calling `deregisterTokens`.\\n     */\\n    event TokensDeregistered(bytes32 indexed poolId, IERC20[] tokens);\\n\\n    /**\\n     * @dev Returns detailed information for a Pool's registered token.\\n     *\\n     * `cash` is the number of tokens the Vault currently holds for the Pool. `managed` is the number of tokens\\n     * withdrawn and held outside the Vault by the Pool's token Asset Manager. The Pool's total balance for `token`\\n     * equals the sum of `cash` and `managed`.\\n     *\\n     * Internally, `cash` and `managed` are stored using 112 bits. No action can ever cause a Pool's token `cash`,\\n     * `managed` or `total` balance to be greater than 2^112 - 1.\\n     *\\n     * `lastChangeBlock` is the number of the block in which `token`'s total balance was last modified (via either a\\n     * join, exit, swap, or Asset Manager update). This value is useful to avoid so-called 'sandwich attacks', for\\n     * example when developing price oracles. A change of zero (e.g. caused by a swap with amount zero) is considered a\\n     * change for this purpose, and will update `lastChangeBlock`.\\n     *\\n     * `assetManager` is the Pool's token Asset Manager.\\n     */\\n    function getPoolTokenInfo(bytes32 poolId, IERC20 token)\\n        external\\n        view\\n        returns (\\n            uint256 cash,\\n            uint256 managed,\\n            uint256 lastChangeBlock,\\n            address assetManager\\n        );\\n\\n    /**\\n     * @dev Returns a Pool's registered tokens, the total balance for each, and the latest block when *any* of\\n     * the tokens' `balances` changed.\\n     *\\n     * The order of the `tokens` array is the same order that will be used in `joinPool`, `exitPool`, as well as in all\\n     * Pool hooks (where applicable). Calls to `registerTokens` and `deregisterTokens` may change this order.\\n     *\\n     * If a Pool only registers tokens once, and these are sorted in ascending order, they will be stored in the same\\n     * order as passed to `registerTokens`.\\n     *\\n     * Total balances include both tokens held by the Vault and those withdrawn by the Pool's Asset Managers. These are\\n     * the amounts used by joins, exits and swaps. For a detailed breakdown of token balances, use `getPoolTokenInfo`\\n     * instead.\\n     */\\n    function getPoolTokens(bytes32 poolId)\\n        external\\n        view\\n        returns (\\n            IERC20[] memory tokens,\\n            uint256[] memory balances,\\n            uint256 lastChangeBlock\\n        );\\n\\n    /**\\n     * @dev Called by users to join a Pool, which transfers tokens from `sender` into the Pool's balance. This will\\n     * trigger custom Pool behavior, which will typically grant something in return to `recipient` - often tokenized\\n     * Pool shares.\\n     *\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\n     *\\n     * The `assets` and `maxAmountsIn` arrays must have the same length, and each entry indicates the maximum amount\\n     * to send for each asset. The amounts to send are decided by the Pool and not the Vault: it just enforces\\n     * these maximums.\\n     *\\n     * If joining a Pool that holds WETH, it is possible to send ETH directly: the Vault will do the wrapping. To enable\\n     * this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead of the\\n     * WETH address. Note that it is not possible to combine ETH and WETH in the same join. Any excess ETH will be sent\\n     * back to the caller (not the sender, which is important for relayers).\\n     *\\n     * `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\\n     * interacting with Pools that register and deregister tokens frequently. If sending ETH however, the array must be\\n     * sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the final\\n     * `assets` array might not be sorted. Pools with no registered tokens cannot be joined.\\n     *\\n     * If `fromInternalBalance` is true, the caller's Internal Balance will be preferred: ERC20 transfers will only\\n     * be made for the difference between the requested amount and Internal Balance (if any). Note that ETH cannot be\\n     * withdrawn from Internal Balance: attempting to do so will trigger a revert.\\n     *\\n     * This causes the Vault to call the `IBasePool.onJoinPool` hook on the Pool's contract, where Pools implement\\n     * their own custom logic. This typically requires additional information from the user (such as the expected number\\n     * of Pool shares). This can be encoded in the `userData` argument, which is ignored by the Vault and passed\\n     * directly to the Pool's contract, as is `recipient`.\\n     *\\n     * Emits a `PoolBalanceChanged` event.\\n     */\\n    function joinPool(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        JoinPoolRequest memory request\\n    ) external payable;\\n\\n    struct JoinPoolRequest {\\n        IAsset[] assets;\\n        uint256[] maxAmountsIn;\\n        bytes userData;\\n        bool fromInternalBalance;\\n    }\\n\\n    /**\\n     * @dev Called by users to exit a Pool, which transfers tokens from the Pool's balance to `recipient`. This will\\n     * trigger custom Pool behavior, which will typically ask for something in return from `sender` - often tokenized\\n     * Pool shares. The amount of tokens that can be withdrawn is limited by the Pool's `cash` balance (see\\n     * `getPoolTokenInfo`).\\n     *\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\n     *\\n     * The `tokens` and `minAmountsOut` arrays must have the same length, and each entry in these indicates the minimum\\n     * token amount to receive for each token contract. The amounts to send are decided by the Pool and not the Vault:\\n     * it just enforces these minimums.\\n     *\\n     * If exiting a Pool that holds WETH, it is possible to receive ETH directly: the Vault will do the unwrapping. To\\n     * enable this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead\\n     * of the WETH address. Note that it is not possible to combine ETH and WETH in the same exit.\\n     *\\n     * `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\\n     * interacting with Pools that register and deregister tokens frequently. If receiving ETH however, the array must\\n     * be sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the\\n     * final `assets` array might not be sorted. Pools with no registered tokens cannot be exited.\\n     *\\n     * If `toInternalBalance` is true, the tokens will be deposited to `recipient`'s Internal Balance. Otherwise,\\n     * an ERC20 transfer will be performed. Note that ETH cannot be deposited to Internal Balance: attempting to\\n     * do so will trigger a revert.\\n     *\\n     * `minAmountsOut` is the minimum amount of tokens the user expects to get out of the Pool, for each token in the\\n     * `tokens` array. This array must match the Pool's registered tokens.\\n     *\\n     * This causes the Vault to call the `IBasePool.onExitPool` hook on the Pool's contract, where Pools implement\\n     * their own custom logic. This typically requires additional information from the user (such as the expected number\\n     * of Pool shares to return). This can be encoded in the `userData` argument, which is ignored by the Vault and\\n     * passed directly to the Pool's contract.\\n     *\\n     * Emits a `PoolBalanceChanged` event.\\n     */\\n    function exitPool(\\n        bytes32 poolId,\\n        address sender,\\n        address payable recipient,\\n        ExitPoolRequest memory request\\n    ) external;\\n\\n    struct ExitPoolRequest {\\n        IAsset[] assets;\\n        uint256[] minAmountsOut;\\n        bytes userData;\\n        bool toInternalBalance;\\n    }\\n\\n    /**\\n     * @dev Emitted when a user joins or exits a Pool by calling `joinPool` or `exitPool`, respectively.\\n     */\\n    event PoolBalanceChanged(\\n        bytes32 indexed poolId,\\n        address indexed liquidityProvider,\\n        IERC20[] tokens,\\n        int256[] deltas,\\n        uint256[] protocolFeeAmounts\\n    );\\n\\n    enum PoolBalanceChangeKind { JOIN, EXIT }\\n\\n    // Swaps\\n    //\\n    // Users can swap tokens with Pools by calling the `swap` and `batchSwap` functions. To do this,\\n    // they need not trust Pool contracts in any way: all security checks are made by the Vault. They must however be\\n    // aware of the Pools' pricing algorithms in order to estimate the prices Pools will quote.\\n    //\\n    // The `swap` function executes a single swap, while `batchSwap` can perform multiple swaps in sequence.\\n    // In each individual swap, tokens of one kind are sent from the sender to the Pool (this is the 'token in'),\\n    // and tokens of another kind are sent from the Pool to the recipient in exchange (this is the 'token out').\\n    // More complex swaps, such as one token in to multiple tokens out can be achieved by batching together\\n    // individual swaps.\\n    //\\n    // There are two swap kinds:\\n    //  - 'given in' swaps, where the amount of tokens in (sent to the Pool) is known, and the Pool determines (via the\\n    // `onSwap` hook) the amount of tokens out (to send to the recipient).\\n    //  - 'given out' swaps, where the amount of tokens out (received from the Pool) is known, and the Pool determines\\n    // (via the `onSwap` hook) the amount of tokens in (to receive from the sender).\\n    //\\n    // Additionally, it is possible to chain swaps using a placeholder input amount, which the Vault replaces with\\n    // the calculated output of the previous swap. If the previous swap was 'given in', this will be the calculated\\n    // tokenOut amount. If the previous swap was 'given out', it will use the calculated tokenIn amount. These extended\\n    // swaps are known as 'multihop' swaps, since they 'hop' through a number of intermediate tokens before arriving at\\n    // the final intended token.\\n    //\\n    // In all cases, tokens are only transferred in and out of the Vault (or withdrawn from and deposited into Internal\\n    // Balance) after all individual swaps have been completed, and the net token balance change computed. This makes\\n    // certain swap patterns, such as multihops, or swaps that interact with the same token pair in multiple Pools, cost\\n    // much less gas than they would otherwise.\\n    //\\n    // It also means that under certain conditions it is possible to perform arbitrage by swapping with multiple\\n    // Pools in a way that results in net token movement out of the Vault (profit), with no tokens being sent in (only\\n    // updating the Pool's internal accounting).\\n    //\\n    // To protect users from front-running or the market changing rapidly, they supply a list of 'limits' for each token\\n    // involved in the swap, where either the maximum number of tokens to send (by passing a positive value) or the\\n    // minimum amount of tokens to receive (by passing a negative value) is specified.\\n    //\\n    // Additionally, a 'deadline' timestamp can also be provided, forcing the swap to fail if it occurs after\\n    // this point in time (e.g. if the transaction failed to be included in a block promptly).\\n    //\\n    // If interacting with Pools that hold WETH, it is possible to both send and receive ETH directly: the Vault will do\\n    // the wrapping and unwrapping. To enable this mechanism, the IAsset sentinel value (the zero address) must be\\n    // passed in the `assets` array instead of the WETH address. Note that it is possible to combine ETH and WETH in the\\n    // same swap. Any excess ETH will be sent back to the caller (not the sender, which is relevant for relayers).\\n    //\\n    // Finally, Internal Balance can be used when either sending or receiving tokens.\\n\\n    enum SwapKind { GIVEN_IN, GIVEN_OUT }\\n\\n    /**\\n     * @dev Performs a swap with a single Pool.\\n     *\\n     * If the swap is 'given in' (the number of tokens to send to the Pool is known), it returns the amount of tokens\\n     * taken from the Pool, which must be greater than or equal to `limit`.\\n     *\\n     * If the swap is 'given out' (the number of tokens to take from the Pool is known), it returns the amount of tokens\\n     * sent to the Pool, which must be less than or equal to `limit`.\\n     *\\n     * Internal Balance usage and the recipient are determined by the `funds` struct.\\n     *\\n     * Emits a `Swap` event.\\n     */\\n    function swap(\\n        SingleSwap memory singleSwap,\\n        FundManagement memory funds,\\n        uint256 limit,\\n        uint256 deadline\\n    ) external payable returns (uint256);\\n\\n    /**\\n     * @dev Data for a single swap executed by `swap`. `amount` is either `amountIn` or `amountOut` depending on\\n     * the `kind` value.\\n     *\\n     * `assetIn` and `assetOut` are either token addresses, or the IAsset sentinel value for ETH (the zero address).\\n     * Note that Pools never interact with ETH directly: it will be wrapped to or unwrapped from WETH by the Vault.\\n     *\\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\\n     * used to extend swap behavior.\\n     */\\n    struct SingleSwap {\\n        bytes32 poolId;\\n        SwapKind kind;\\n        IAsset assetIn;\\n        IAsset assetOut;\\n        uint256 amount;\\n        bytes userData;\\n    }\\n\\n    /**\\n     * @dev Performs a series of swaps with one or multiple Pools. In each individual swap, the caller determines either\\n     * the amount of tokens sent to or received from the Pool, depending on the `kind` value.\\n     *\\n     * Returns an array with the net Vault asset balance deltas. Positive amounts represent tokens (or ETH) sent to the\\n     * Vault, and negative amounts represent tokens (or ETH) sent by the Vault. Each delta corresponds to the asset at\\n     * the same index in the `assets` array.\\n     *\\n     * Swaps are executed sequentially, in the order specified by the `swaps` array. Each array element describes a\\n     * Pool, the token to be sent to this Pool, the token to receive from it, and an amount that is either `amountIn` or\\n     * `amountOut` depending on the swap kind.\\n     *\\n     * Multihop swaps can be executed by passing an `amount` value of zero for a swap. This will cause the amount in/out\\n     * of the previous swap to be used as the amount in for the current one. In a 'given in' swap, 'tokenIn' must equal\\n     * the previous swap's `tokenOut`. For a 'given out' swap, `tokenOut` must equal the previous swap's `tokenIn`.\\n     *\\n     * The `assets` array contains the addresses of all assets involved in the swaps. These are either token addresses,\\n     * or the IAsset sentinel value for ETH (the zero address). Each entry in the `swaps` array specifies tokens in and\\n     * out by referencing an index in `assets`. Note that Pools never interact with ETH directly: it will be wrapped to\\n     * or unwrapped from WETH by the Vault.\\n     *\\n     * Internal Balance usage, sender, and recipient are determined by the `funds` struct. The `limits` array specifies\\n     * the minimum or maximum amount of each token the vault is allowed to transfer.\\n     *\\n     * `batchSwap` can be used to make a single swap, like `swap` does, but doing so requires more gas than the\\n     * equivalent `swap` call.\\n     *\\n     * Emits `Swap` events.\\n     */\\n    function batchSwap(\\n        SwapKind kind,\\n        BatchSwapStep[] memory swaps,\\n        IAsset[] memory assets,\\n        FundManagement memory funds,\\n        int256[] memory limits,\\n        uint256 deadline\\n    ) external payable returns (int256[] memory);\\n\\n    /**\\n     * @dev Data for each individual swap executed by `batchSwap`. The asset in and out fields are indexes into the\\n     * `assets` array passed to that function, and ETH assets are converted to WETH.\\n     *\\n     * If `amount` is zero, the multihop mechanism is used to determine the actual amount based on the amount in/out\\n     * from the previous swap, depending on the swap kind.\\n     *\\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\\n     * used to extend swap behavior.\\n     */\\n    struct BatchSwapStep {\\n        bytes32 poolId;\\n        uint256 assetInIndex;\\n        uint256 assetOutIndex;\\n        uint256 amount;\\n        bytes userData;\\n    }\\n\\n    /**\\n     * @dev Emitted for each individual swap performed by `swap` or `batchSwap`.\\n     */\\n    event Swap(\\n        bytes32 indexed poolId,\\n        IERC20 indexed tokenIn,\\n        IERC20 indexed tokenOut,\\n        uint256 amountIn,\\n        uint256 amountOut\\n    );\\n\\n    /**\\n     * @dev All tokens in a swap are either sent from the `sender` account to the Vault, or from the Vault to the\\n     * `recipient` account.\\n     *\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\n     *\\n     * If `fromInternalBalance` is true, the `sender`'s Internal Balance will be preferred, performing an ERC20\\n     * transfer for the difference between the requested amount and the User's Internal Balance (if any). The `sender`\\n     * must have allowed the Vault to use their tokens via `IERC20.approve()`. This matches the behavior of\\n     * `joinPool`.\\n     *\\n     * If `toInternalBalance` is true, tokens will be deposited to `recipient`'s internal balance instead of\\n     * transferred. This matches the behavior of `exitPool`.\\n     *\\n     * Note that ETH cannot be deposited to or withdrawn from Internal Balance: attempting to do so will trigger a\\n     * revert.\\n     */\\n    struct FundManagement {\\n        address sender;\\n        bool fromInternalBalance;\\n        address payable recipient;\\n        bool toInternalBalance;\\n    }\\n\\n    /**\\n     * @dev Simulates a call to `batchSwap`, returning an array of Vault asset deltas. Calls to `swap` cannot be\\n     * simulated directly, but an equivalent `batchSwap` call can and will yield the exact same result.\\n     *\\n     * Each element in the array corresponds to the asset at the same index, and indicates the number of tokens (or ETH)\\n     * the Vault would take from the sender (if positive) or send to the recipient (if negative). The arguments it\\n     * receives are the same that an equivalent `batchSwap` call would receive.\\n     *\\n     * Unlike `batchSwap`, this function performs no checks on the sender or recipient field in the `funds` struct.\\n     * This makes it suitable to be called by off-chain applications via eth_call without needing to hold tokens,\\n     * approve them for the Vault, or even know a user's address.\\n     *\\n     * Note that this function is not 'view' (due to implementation details): the client code must explicitly execute\\n     * eth_call instead of eth_sendTransaction.\\n     */\\n    function queryBatchSwap(\\n        SwapKind kind,\\n        BatchSwapStep[] memory swaps,\\n        IAsset[] memory assets,\\n        FundManagement memory funds\\n    ) external returns (int256[] memory assetDeltas);\\n\\n    // Flash Loans\\n\\n    /**\\n     * @dev Performs a 'flash loan', sending tokens to `recipient`, executing the `receiveFlashLoan` hook on it,\\n     * and then reverting unless the tokens plus a proportional protocol fee have been returned.\\n     *\\n     * The `tokens` and `amounts` arrays must have the same length, and each entry in these indicates the loan amount\\n     * for each token contract. `tokens` must be sorted in ascending order.\\n     *\\n     * The 'userData' field is ignored by the Vault, and forwarded as-is to `recipient` as part of the\\n     * `receiveFlashLoan` call.\\n     *\\n     * Emits `FlashLoan` events.\\n     */\\n    function flashLoan(\\n        IFlashLoanRecipient recipient,\\n        IERC20[] memory tokens,\\n        uint256[] memory amounts,\\n        bytes memory userData\\n    ) external;\\n\\n    /**\\n     * @dev Emitted for each individual flash loan performed by `flashLoan`.\\n     */\\n    event FlashLoan(IFlashLoanRecipient indexed recipient, IERC20 indexed token, uint256 amount, uint256 feeAmount);\\n\\n    // Asset Management\\n    //\\n    // Each token registered for a Pool can be assigned an Asset Manager, which is able to freely withdraw the Pool's\\n    // tokens from the Vault, deposit them, or assign arbitrary values to its `managed` balance (see\\n    // `getPoolTokenInfo`). This makes them extremely powerful and dangerous. Even if an Asset Manager only directly\\n    // controls one of the tokens in a Pool, a malicious manager could set that token's balance to manipulate the\\n    // prices of the other tokens, and then drain the Pool with swaps. The risk of using Asset Managers is therefore\\n    // not constrained to the tokens they are managing, but extends to the entire Pool's holdings.\\n    //\\n    // However, a properly designed Asset Manager smart contract can be safely used for the Pool's benefit,\\n    // for example by lending unused tokens out for interest, or using them to participate in voting protocols.\\n    //\\n    // This concept is unrelated to the IAsset interface.\\n\\n    /**\\n     * @dev Performs a set of Pool balance operations, which may be either withdrawals, deposits or updates.\\n     *\\n     * Pool Balance management features batching, which means a single contract call can be used to perform multiple\\n     * operations of different kinds, with different Pools and tokens, at once.\\n     *\\n     * For each operation, the caller must be registered as the Asset Manager for `token` in `poolId`.\\n     */\\n    function managePoolBalance(PoolBalanceOp[] memory ops) external;\\n\\n    struct PoolBalanceOp {\\n        PoolBalanceOpKind kind;\\n        bytes32 poolId;\\n        IERC20 token;\\n        uint256 amount;\\n    }\\n\\n    /**\\n     * Withdrawals decrease the Pool's cash, but increase its managed balance, leaving the total balance unchanged.\\n     *\\n     * Deposits increase the Pool's cash, but decrease its managed balance, leaving the total balance unchanged.\\n     *\\n     * Updates don't affect the Pool's cash balance, but because the managed balance changes, it does alter the total.\\n     * The external amount can be either increased or decreased by this call (i.e., reporting a gain or a loss).\\n     */\\n    enum PoolBalanceOpKind { WITHDRAW, DEPOSIT, UPDATE }\\n\\n    /**\\n     * @dev Emitted when a Pool's token Asset Manager alters its balance via `managePoolBalance`.\\n     */\\n    event PoolBalanceManaged(\\n        bytes32 indexed poolId,\\n        address indexed assetManager,\\n        IERC20 indexed token,\\n        int256 cashDelta,\\n        int256 managedDelta\\n    );\\n\\n    // Protocol Fees\\n    //\\n    // Some operations cause the Vault to collect tokens in the form of protocol fees, which can then be withdrawn by\\n    // permissioned accounts.\\n    //\\n    // There are two kinds of protocol fees:\\n    //\\n    //  - flash loan fees: charged on all flash loans, as a percentage of the amounts lent.\\n    //\\n    //  - swap fees: a percentage of the fees charged by Pools when performing swaps. For a number of reasons, including\\n    // swap gas costs and interface simplicity, protocol swap fees are not charged on each individual swap. Rather,\\n    // Pools are expected to keep track of how much they have charged in swap fees, and pay any outstanding debts to the\\n    // Vault when they are joined or exited. This prevents users from joining a Pool with unpaid debt, as well as\\n    // exiting a Pool in debt without first paying their share.\\n\\n    /**\\n     * @dev Returns the current protocol fee module.\\n     */\\n    function getProtocolFeesCollector() external view returns (IProtocolFeesCollector);\\n\\n    /**\\n     * @dev Safety mechanism to pause most Vault operations in the event of an emergency - typically detection of an\\n     * error in some part of the system.\\n     *\\n     * The Vault can only be paused during an initial time period, after which pausing is forever disabled.\\n     *\\n     * While the contract is paused, the following features are disabled:\\n     * - depositing and transferring internal balance\\n     * - transferring external balance (using the Vault's allowance)\\n     * - swaps\\n     * - joining Pools\\n     * - Asset Manager interactions\\n     *\\n     * Internal Balance can still be withdrawn, and Pools exited.\\n     */\\n    function setPaused(bool paused) external;\\n\\n    /**\\n     * @dev Returns the Vault's WETH instance.\\n     */\\n    function WETH() external view returns (IWETH);\\n    // solhint-disable-previous-line func-name-mixedcase\\n}\\n\",\"keccak256\":\"0x8a0904cb11d6571fdc0051b2de6b675d0e1cf8af45c1a5467d047812f1086223\",\"license\":\"GPL-3.0-or-later\"},\"@sense-finance/v1-utils/src/Trust.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.7.0;\\n\\n/// @notice Ultra minimal authorization logic for smart contracts.\\n/// @author From https://github.com/Rari-Capital/solmate/blob/fab107565a51674f3a3b5bfdaacc67f6179b1a9b/src/auth/Trust.sol\\nabstract contract Trust {\\n    event UserTrustUpdated(address indexed user, bool trusted);\\n\\n    mapping(address => bool) public isTrusted;\\n\\n    constructor(address initialUser) {\\n        isTrusted[initialUser] = true;\\n\\n        emit UserTrustUpdated(initialUser, true);\\n    }\\n\\n    function setIsTrusted(address user, bool trusted) public virtual requiresTrust {\\n        isTrusted[user] = trusted;\\n\\n        emit UserTrustUpdated(user, trusted);\\n    }\\n\\n    modifier requiresTrust() {\\n        require(isTrusted[msg.sender], \\\"UNTRUSTED\\\");\\n\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x2d3887076c81425d3954aea7735aebd9093e3df69c8132b1713fae4a34201d43\",\"license\":\"AGPL-3.0-only\"},\"lib/v1-space/src/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.7.0;\\n\\n// solhint-disable\\n\\n/**\\n * @dev Reverts if `condition` is false, with a revert reason containing `errorCode`. Only codes up to 999 are\\n * supported.\\n */\\nfunction _require(bool condition, uint256 errorCode) pure {\\n    if (!condition) _revert(errorCode);\\n}\\n\\n/**\\n * @dev Reverts with a revert reason containing `errorCode`. Only codes up to 999 are supported.\\n */\\nfunction _revert(uint256 errorCode) pure {\\n    // We're going to dynamically create a revert string based on the error code, with the following format:\\n    // 'SNS#{errorCode}'\\n    // where the code is left-padded with zeroes to three digits (so they range from 000 to 999).\\n    //\\n    // We don't have revert strings embedded in the contract to save bytecode size: it takes much less space to store a\\n    // number (8 to 16 bits) than the individual string characters.\\n    //\\n    // The dynamic string creation algorithm that follows could be implemented in Solidity, but assembly allows for a\\n    // much denser implementation, again saving bytecode size. Given this function unconditionally reverts, this is a\\n    // safe place to rely on it without worrying about how its usage might affect e.g. memory contents.\\n    assembly {\\n        // First, we need to compute the ASCII representation of the error code. We assume that it is in the 0-999\\n        // range, so we only need to convert three digits. To convert the digits to ASCII, we add 0x30, the value for\\n        // the '0' character.\\n\\n        let units := add(mod(errorCode, 10), 0x30)\\n\\n        errorCode := div(errorCode, 10)\\n        let tenths := add(mod(errorCode, 10), 0x30)\\n\\n        errorCode := div(errorCode, 10)\\n        let hundreds := add(mod(errorCode, 10), 0x30)\\n\\n        // With the individual characters, we can now construct the full string. The \\\"SNS#\\\" part is a known constant\\n        // (0x3f534e5323): we simply shift this by 24 (to provide space for the 3 bytes of the error code), and add the\\n        // characters to it, each shifted by a multiple of 8.\\n        // The revert reason is then shifted left by 200 bits (256 minus the length of the string, 7 characters * 8 bits\\n        // per character = 56) to locate it in the most significant part of the 256 slot (the beginning of a byte\\n        // array).\\n\\n        let revertReason := shl(200, add(0x3f534e5323000000, add(add(units, shl(8, tenths)), shl(16, hundreds))))\\n\\n        // We can now encode the reason in memory, which can be safely overwritten as we're about to revert. The encoded\\n        // message will have the following layout:\\n        // [ revert reason identifier ] [ string location offset ] [ string length ] [ string contents ]\\n\\n        // The Solidity revert reason identifier is 0x08c739a0, the function selector of the Error(string) function. We\\n        // also write zeroes to the next 28 bytes of memory, but those are about to be overwritten.\\n        mstore(0x0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\\n        // Next is the offset to the location of the string, which will be placed immediately after (20 bytes away).\\n        mstore(0x04, 0x0000000000000000000000000000000000000000000000000000000000000020)\\n        // The string length is fixed: 7 characters.\\n        mstore(0x24, 7)\\n        // Finally, the string itself is stored.\\n        mstore(0x44, revertReason)\\n\\n        // Even if the string is only 7 bytes long, we need to return a full 32 byte slot containing it. The length of\\n        // the encoded message is therefore 4 + 32 + 32 + 32 = 100.\\n        revert(0, 100)\\n    }\\n}\\n\\nlibrary Errors {\\n    // Space (using error codes as Space uses ^0.7.0)\\n    uint256 internal constant CALLER_NOT_VAULT = 100;\\n    uint256 internal constant INVALID_G1 = 101;\\n    uint256 internal constant INVALID_G2 = 102;\\n    uint256 internal constant INVALID_POOL_ID = 103;\\n    uint256 internal constant POOL_ALREADY_EXISTS = 104;\\n    uint256 internal constant POOL_PAST_MATURITY = 105;\\n    uint256 internal constant SWAP_TOO_SMALL = 106;\\n    uint256 internal constant NEGATIVE_RATE = 107;\\n    uint256 internal constant BPT_OUT_MIN_AMOUNT = 108;\\n    uint256 internal constant INVALID_SERIES = 109;\\n}\\n\",\"keccak256\":\"0x51b8ec17a8e941188c03411b27739c43e0d0925f9e72104d0f4e488c5e6547d2\",\"license\":\"AGPL-3.0-only\"},\"lib/v1-space/src/Space.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\n// External references\\nimport { FixedPoint } from \\\"@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol\\\";\\nimport { Math as BasicMath } from \\\"@balancer-labs/v2-solidity-utils/contracts/math/Math.sol\\\";\\nimport { BalancerPoolToken } from \\\"@balancer-labs/v2-pool-utils/contracts/BalancerPoolToken.sol\\\";\\nimport { ERC20 } from \\\"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol\\\";\\nimport { LogCompression } from \\\"@balancer-labs/v2-solidity-utils/contracts/helpers/LogCompression.sol\\\";\\n\\nimport { IMinimalSwapInfoPool } from \\\"@balancer-labs/v2-vault/contracts/interfaces/IMinimalSwapInfoPool.sol\\\";\\nimport { IVault } from \\\"@balancer-labs/v2-vault/contracts/interfaces/IVault.sol\\\";\\nimport { IERC20 } from \\\"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/IERC20.sol\\\";\\n\\nimport { Errors, _require } from \\\"./Errors.sol\\\";\\nimport { PoolPriceOracle } from \\\"./oracle/PoolPriceOracle.sol\\\";\\n\\ninterface AdapterLike {\\n    function scale() external returns (uint256);\\n\\n    function scaleStored() external view returns (uint256);\\n\\n    function target() external view returns (address);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function name() external view returns (string memory);\\n\\n    function getUnderlyingPrice() external view returns (uint256);\\n}\\n\\n/*\\n                    SPACE\\n        *   '*\\n                *\\n                        *\\n                            *\\n                    *\\n                            *\\n                .                      .\\n                .                      ;\\n                :                  - --+- -\\n                !           .          !\\n\\n*/\\n\\n/// @notice A Yieldspace implementation extended such that LPs can deposit\\n/// [Principal Token, Yield-bearing asset], rather than [Principal Token, Underlying], while keeping the benefits of the\\n/// yieldspace invariant (e.g. it can hold [Principal Token, cDAI], rather than [Principal Token, DAI], while still operating\\n/// in \\\"yield space\\\" for the principal token side. See the YieldSpace paper for more https://yield.is/YieldSpace.pdf)\\n/// @dev We use much more internal storage here than in other Sense contracts because it\\n/// conforms to Balancer's own style, and we're using several Balancer functions that play nicer if we do.\\n/// @dev Requires an external \\\"Adapter\\\" contract with a `scale()` function which returns the\\n/// current exchange rate from Target to the Underlying asset.\\ncontract Space is IMinimalSwapInfoPool, BalancerPoolToken, PoolPriceOracle {\\n    using FixedPoint for uint256;\\n\\n    /* ========== STRUCTURES ========== */\\n\\n    struct OracleData {\\n        uint16 oracleIndex;\\n        uint32 oracleSampleInitialTimestamp;\\n        bool oracleEnabled;\\n        int200 logInvariant;\\n    }\\n\\n    /* ========== CONSTANTS ========== */\\n\\n    /// @notice Minimum BPT we can have for this pool after initialization\\n    uint256 public constant MINIMUM_BPT = 1e6;\\n\\n    /* ========== PUBLIC IMMUTABLES ========== */\\n\\n    /// @notice Adapter address for the associated Series\\n    address public immutable adapter;\\n\\n    /// @notice Maturity timestamp for associated Series\\n    uint256 public immutable maturity;\\n\\n    /// @notice Principal Token index (there are only two tokens in this pool, so `targeti` is always just the complement)\\n    uint256 public immutable pti;\\n\\n    /// @notice Yieldspace config indicating the starting point from which the curve shifts (lower numbers mean that it starts closer to the constant sum side)\\n    uint256 public immutable ts;\\n\\n    /// @notice Yieldspace config indicating how much to discount the effective interest when swapping Target to PT\\n    uint256 public immutable g1;\\n\\n    /// @notice Yieldspace config indicating how much to mark the effective interest up when swapping PT to Target\\n    uint256 public immutable g2;\\n\\n    /* ========== INTERNAL IMMUTABLES ========== */\\n\\n    /// @dev Balancer pool id (as registered with the Balancer Vault)\\n    bytes32 internal immutable _poolId;\\n\\n    /// @dev Token registered at index 0 for this pool\\n    IERC20 internal immutable _token0;\\n\\n    /// @dev Token registered at index one for this pool\\n    IERC20 internal immutable _token1;\\n\\n    /// @dev Factor needed to scale the PT to 18 decimals\\n    uint256 internal immutable _scalingFactorPT;\\n\\n    /// @dev Factor needed to scale the Target token to 18 decimals\\n    uint256 internal immutable _scalingFactorTarget;\\n\\n    /// @dev Balancer Vault\\n    IVault internal immutable _vault;\\n\\n    /// @dev Contract that collects Balancer protocol fees\\n    address internal immutable _protocolFeesCollector;\\n\\n    /* ========== INTERNAL MUTABLE STORAGE ========== */\\n\\n    /// @dev Scale value for the yield-bearing asset's first `join` (i.e. initialization)\\n    uint256 internal _initScale;\\n\\n    /// @dev Invariant tracking for calculating Balancer protocol fees\\n    uint256 internal _lastToken0Reserve;\\n    uint256 internal _lastToken1Reserve;\\n\\n    /// @dev Oracle sample collection metadata\\n    OracleData internal oracleData;\\n\\n    constructor(\\n        IVault vault,\\n        address _adapter,\\n        uint256 _maturity,\\n        address pt,\\n        uint256 _ts,\\n        uint256 _g1,\\n        uint256 _g2,\\n        bool _oracleEnabled\\n    ) BalancerPoolToken(\\n        string(abi.encodePacked(\\\"Sense Space \\\", ERC20(pt).name())),\\n        string(abi.encodePacked(\\\"SPACE-\\\", ERC20(pt).symbol()))\\n    ) {\\n        bytes32 poolId = vault.registerPool(IVault.PoolSpecialization.TWO_TOKEN);\\n\\n        address target = AdapterLike(_adapter).target();\\n        IERC20[] memory tokens = new IERC20[](2);\\n\\n        // Ensure that the array of tokens is correctly ordered\\n        uint256 _pti = pt < target ? 0 : 1;\\n        tokens[_pti] = IERC20(pt);\\n        tokens[1 - _pti] = IERC20(target);\\n        vault.registerTokens(poolId, tokens, new address[](2));\\n\\n        // Set Balancer-specific pool config\\n        _vault = vault;\\n        _poolId = poolId;\\n        _token0 = tokens[0];\\n        _token1 = tokens[1];\\n        _protocolFeesCollector = address(vault.getProtocolFeesCollector());\\n\\n        _scalingFactorPT = 10**(BasicMath.sub(uint256(18), ERC20(pt).decimals()));\\n        _scalingFactorTarget = 10**(BasicMath.sub(uint256(18), ERC20(target).decimals()));\\n\\n        // Set Yieldspace config\\n        g1 = _g1; // Fees are baked into factors `g1` & `g2`,\\n        g2 = _g2; // see the \\\"Fees\\\" section of the yieldspace paper\\n        ts = _ts;\\n\\n        // Set Space-specific slots\\n        pti = _pti;\\n        adapter = _adapter;\\n        maturity = _maturity;\\n        oracleData.oracleEnabled = _oracleEnabled;\\n    }\\n\\n    /* ========== BALANCER VAULT HOOKS ========== */\\n\\n    function onJoinPool(\\n        bytes32 poolId,\\n        address, /* sender */\\n        address recipient,\\n        uint256[] memory reserves,\\n        uint256 lastChangeBlock,\\n        uint256 protocolSwapFeePercentage,\\n        bytes memory userData\\n    ) external override onlyVault(poolId) returns (uint256[] memory, uint256[] memory) {\\n        // Space does not have multiple join types like other Balancer pools,\\n        // instead, its `joinPool` always behaves like `EXACT_TOKENS_IN_FOR_BPT_OUT`\\n\\n        _require(maturity >= block.timestamp, Errors.POOL_PAST_MATURITY);\\n\\n        (uint256[] memory reqAmountsIn, uint256 minBptOut) = abi.decode(userData, (uint256[], uint256));\\n\\n        // Upscale both requested amounts and reserves to 18 decimals\\n        _upscaleArray(reserves);\\n        _upscaleArray(reqAmountsIn);\\n\\n        if (totalSupply() == 0) {\\n            uint256 initScale = AdapterLike(adapter).scale();\\n\\n            // Convert target balance into Underlying\\n            // note We assume scale values will always be 18 decimals\\n            uint256 underlyingIn = reqAmountsIn[1 - pti].mulDown(initScale);\\n\\n            // Just like weighted pool 2 token from the balancer v2 monorepo,\\n            // we lock MINIMUM_BPT in by minting it for the PT address. This reduces potential\\n            // issues with rounding and ensures that this code path will only be executed once\\n            _mintPoolTokens(address(0), MINIMUM_BPT);\\n\\n            uint256 bptToMint = underlyingIn.sub(MINIMUM_BPT);\\n\\n            // Mint the recipient BPT comensurate with the value of their join in Underlying\\n            _mintPoolTokens(recipient, bptToMint);\\n\\n            _require(bptToMint >= minBptOut, Errors.BPT_OUT_MIN_AMOUNT);\\n\\n            // Amounts entering the Pool, so we round up\\n            _downscaleUpArray(reqAmountsIn);\\n\\n            // Set the scale value all future deposits will be backdated to\\n            _initScale = initScale;\\n\\n            // For the first join, we don't pull any PT, regardless of what the caller requested.\\n            // This starts this pool off as synthetic Underlying only, as the yieldspace invariant expects\\n            delete reqAmountsIn[pti];\\n\\n            // Cache starting Target reserves\\n            reserves = reqAmountsIn;\\n        \\n            // Cache new reserves, post join\\n            _cacheReserves(reserves);\\n\\n            return (reqAmountsIn, new uint256[](2));\\n        } else {\\n            // Update oracle with upscaled reserves\\n            _updateOracle(lastChangeBlock, reserves[pti], reserves[1 - pti]);\\n\\n            // Calculate fees due before updating bpt balances to determine invariant growth from just swap fees\\n            if (protocolSwapFeePercentage != 0) {\\n                // This doesn't break the YS virtual reserves efficiency trick because, even though we're minting new BPT, \\n                // the BPT is still getting denser faster than it's getting diluted, \\n                // meaning that it'll never fall below invariant #23 in the YS paper\\n                _mintPoolTokens(_protocolFeesCollector, _bptFeeDue(reserves, protocolSwapFeePercentage));\\n            }\\n\\n            (uint256 bptToMint, uint256[] memory amountsIn) = _tokensInForBptOut(reqAmountsIn, reserves);\\n\\n            _require(bptToMint >= minBptOut, Errors.BPT_OUT_MIN_AMOUNT);\\n\\n            // `recipient` receives liquidity tokens\\n            _mintPoolTokens(recipient, bptToMint);\\n\\n            // Update reserves for caching\\n            //\\n            // No risk of overflow as this function will only succeed if the user actually has `amountsIn` and\\n            // the max token supply for a well-behaved token is bounded by `uint256 totalSupply`\\n            reserves[0] += amountsIn[0];\\n            reserves[1] += amountsIn[1];\\n\\n            // Cache new reserves, post join\\n            _cacheReserves(reserves);\\n\\n            // Amounts entering the Pool, so we round up\\n            _downscaleUpArray(amountsIn);\\n\\n            // Inspired by PR #990 in the balancer v2 monorepo, we always return pt dueProtocolFeeAmounts\\n            // to the Vault, and pay protocol fees by minting BPT directly to the protocolFeeCollector instead\\n            return (amountsIn, new uint256[](2));\\n        }\\n    }\\n\\n    function onExitPool(\\n        bytes32 poolId,\\n        address sender,\\n        address, /* recipient */\\n        uint256[] memory reserves,\\n        uint256 lastChangeBlock,\\n        uint256 protocolSwapFeePercentage,\\n        bytes memory userData\\n    ) external override onlyVault(poolId) returns (uint256[] memory, uint256[] memory) {\\n        // Space does not have multiple exit types like other Balancer pools,\\n        // instead, its `exitPool` always behaves like `EXACT_BPT_IN_FOR_TOKENS_OUT`\\n\\n        // Upscale reserves to 18 decimals\\n        _upscaleArray(reserves);\\n\\n        // Update oracle with upscaled reserves\\n        _updateOracle(lastChangeBlock, reserves[pti], reserves[1 - pti]);\\n\\n        // Calculate fees due before updating bpt balances to determine invariant growth from just swap fees\\n        if (protocolSwapFeePercentage != 0) {\\n            _mintPoolTokens(_protocolFeesCollector, _bptFeeDue(reserves, protocolSwapFeePercentage));\\n        }\\n\\n        // Determine what percentage of the pool the BPT being passed in represents\\n        uint256 bptAmountIn = abi.decode(userData, (uint256));\\n\\n        // Calculate the amount of tokens owed in return for giving that amount of BPT in\\n        uint256[] memory amountsOut = new uint256[](2);\\n        uint256 _totalSupply = totalSupply();\\n        // Even though we are sending tokens to the user, we round both amounts out *up* here, b/c:\\n        //     1) Maximizing the number of tokens users get when exiting maximizes the\\n        //        number of BPT we mint for users joining afterwards (it maximizes the equation \\n        //        totalSupply * amtIn / reserves). As a result, we ensure that the total supply component of the\\n        //        numerator is greater than the denominator in the \\\"marginal rate equation\\\" (eq. 2) from the YS paper\\n        //     2) We lock MINIMUM_BPT away at initialization, which means a number of reserves will\\n        //        remain untouched and will function as a buffer for \\\"off by one\\\" rounding errors\\n        amountsOut[0] = reserves[0].mulUp(bptAmountIn).divUp(_totalSupply);\\n        amountsOut[1] = reserves[1].mulUp(bptAmountIn).divUp(_totalSupply);\\n\\n        // `sender` pays for the liquidity\\n        _burnPoolTokens(sender, bptAmountIn);\\n\\n        // Update reserves for caching\\n        reserves[0] = reserves[0].sub(amountsOut[0]);\\n        reserves[1] = reserves[1].sub(amountsOut[1]);\\n\\n        // Cache new invariant and reserves, post exit\\n        _cacheReserves(reserves);\\n\\n        // Amounts are leaving the Pool, so we round down\\n        _downscaleDownArray(amountsOut);\\n\\n        return (amountsOut, new uint256[](2));\\n    }\\n\\n    function onSwap(\\n        SwapRequest memory request,\\n        uint256 reservesTokenIn,\\n        uint256 reservesTokenOut\\n    ) external override returns (uint256) {\\n        bool pTIn = request.tokenIn == _token0 ? pti == 0 : pti == 1;\\n\\n        uint256 scalingFactorTokenIn = _scalingFactor(pTIn);\\n        uint256 scalingFactorTokenOut = _scalingFactor(!pTIn);\\n\\n        // Upscale reserves to 18 decimals\\n        reservesTokenIn = _upscale(reservesTokenIn, scalingFactorTokenIn);\\n        reservesTokenOut = _upscale(reservesTokenOut, scalingFactorTokenOut);\\n\\n        if (msg.sender == address(getVault())) {\\n            // Given this is a real swap and not a preview, update oracle with upscaled reserves\\n            _updateOracle(\\n                request.lastChangeBlock,\\n                pTIn ? reservesTokenIn : reservesTokenOut,\\n                pTIn ? reservesTokenOut: reservesTokenIn\\n            );\\n        }\\n\\n        uint256 scale = AdapterLike(adapter).scale();\\n\\n        if (pTIn) {\\n            // Add LP supply to PT reserves, as suggested by the yieldspace paper\\n            reservesTokenIn = reservesTokenIn.add(totalSupply());\\n\\n            // Backdate the Target reserves and convert to Underlying, as if it were still t0 (initialization)\\n            reservesTokenOut = reservesTokenOut.mulDown(_initScale);\\n        } else {\\n            // Backdate the Target reserves and convert to Underlying, as if it were still t0 (initialization)\\n            reservesTokenIn = reservesTokenIn.mulDown(_initScale);\\n\\n            // Add LP supply to PT reserves, as suggested by the yieldspace paper\\n            reservesTokenOut = reservesTokenOut.add(totalSupply());\\n        }\\n\\n        if (request.kind == IVault.SwapKind.GIVEN_IN) {\\n            request.amount = _upscale(request.amount, scalingFactorTokenIn);\\n            // If Target is being swapped in, convert the amountIn to Underlying using present day Scale\\n            if (!pTIn) {\\n                request.amount = request.amount.mulDown(scale);\\n            }\\n\\n            // Determine the amountOut\\n            uint256 amountOut = _onSwap(pTIn, true, request.amount, reservesTokenIn, reservesTokenOut);\\n\\n            // If PTs are being swapped in, convert the Underlying out back to Target using present day Scale\\n            if (pTIn) {\\n                amountOut = amountOut.divDown(scale);\\n            }\\n\\n            // AmountOut, so we round down\\n            return _downscaleDown(amountOut, scalingFactorTokenOut);\\n        } else {\\n            request.amount = _upscale(request.amount, scalingFactorTokenOut);\\n            // If PTs are being swapped in, convert the amountOut from Target to Underlying using present day Scale\\n            if (pTIn) {\\n                request.amount = request.amount.mulDown(scale);\\n            }\\n\\n            // Determine the amountIn\\n            uint256 amountIn = _onSwap(pTIn, false, request.amount, reservesTokenIn, reservesTokenOut);\\n\\n            // If Target is being swapped in, convert the amountIn back to Target using present day Scale\\n            if (!pTIn) {\\n                amountIn = amountIn.divDown(scale);\\n            }\\n\\n            // amountIn, so we round up\\n            return _downscaleUp(amountIn, scalingFactorTokenIn);\\n        }\\n    }\\n\\n    /* ========== INTERNAL JOIN/SWAP ACCOUNTING ========== */\\n\\n    /// @notice Calculate the max amount of BPT that can be minted from the requested amounts in,\\n    // given the ratio of the reserves, and assuming we don't make any swaps\\n    function _tokensInForBptOut(uint256[] memory reqAmountsIn, uint256[] memory reserves)\\n        internal\\n        view\\n        returns (uint256, uint256[] memory)\\n    {\\n        // Disambiguate reserves wrt token type\\n        (uint256 pTReserves, uint256 targetReserves) = (reserves[pti], reserves[1 - pti]);\\n\\n        uint256[] memory amountsIn = new uint256[](2);\\n\\n        // An empty PT reserve occurs after \\n        //     1) Pool initialization\\n        //     2) When the entire PT side is swapped out of the pool without implying a negative rate\\n        if (pTReserves == 0) {\\n            uint256 reqTargetIn = reqAmountsIn[1 - pti];\\n            // Mint LP shares according to the relative amount of Target being offered\\n            uint256 bptToMint = reqTargetIn.mulDown(_initScale);\\n\\n            // Pull the entire offered Target\\n            amountsIn[1 - pti] = reqTargetIn;\\n\\n            return (bptToMint, amountsIn);\\n        } else {\\n            // Disambiguate requested amounts wrt token type\\n            (uint256 reqPTIn, uint256 reqTargetIn) = (reqAmountsIn[pti], reqAmountsIn[1 - pti]);\\n            uint256 _totalSupply = totalSupply();\\n            // Caclulate the percentage of the pool we'd get if we pulled all of the requested Target in\\n            uint256 bptToMintTarget = BasicMath.mul(_totalSupply, reqTargetIn) / targetReserves;\\n\\n            // Caclulate the percentage of the pool we'd get if we pulled all of the requested PT in\\n            uint256 bptToMintPT = BasicMath.mul(_totalSupply, reqPTIn) / pTReserves;\\n\\n            // Determine which amountIn is our limiting factor\\n            if (bptToMintTarget < bptToMintPT) {\\n                amountsIn[pti] = BasicMath.mul(pTReserves, reqTargetIn) / targetReserves;\\n                amountsIn[1 - pti] = reqTargetIn;\\n\\n                return (bptToMintTarget, amountsIn);\\n            } else {\\n                amountsIn[pti] = reqPTIn;\\n                amountsIn[1 - pti] = BasicMath.mul(targetReserves, reqPTIn) / pTReserves;\\n\\n                return (bptToMintPT, amountsIn);\\n            }\\n        }\\n    }\\n\\n    /// @notice Calculate the missing variable in the yield space equation given the direction (PT in vs. out)\\n    /// @dev We round in favor of the LPs, meaning that traders get slightly worse prices than they would if we had full\\n    /// precision. However, the differences are small (on the order of 1e-11), and should only matter for very small trades.\\n    function _onSwap(\\n        bool pTIn,\\n        bool givenIn,\\n        uint256 amountDelta,\\n        uint256 reservesTokenIn,\\n        uint256 reservesTokenOut\\n    ) internal view returns (uint256) {\\n        // xPre = token in reserves pre swap\\n        // yPre = token out reserves pre swap\\n\\n        // Seconds until maturity, in 18 decimals\\n        // After maturity, this pool becomes a constant sum AMM\\n        uint256 ttm = maturity > block.timestamp ? uint256(maturity - block.timestamp) * FixedPoint.ONE : 0;\\n\\n        // Time shifted partial `t` from the yieldspace paper (`ttm` adjusted by some factor `ts`)\\n        uint256 t = ts.mulDown(ttm);\\n\\n        // Full `t` with fees baked in\\n        uint256 a = (pTIn ? g2 : g1).mulUp(t).complement();\\n\\n        // Pow up for `x1` & `y1` and down for `xOrY2` causes the pow induced error for `xOrYPost`\\n        // to tend towards higher values rather than lower.\\n        // Effectively we're adding a little bump up for ammountIn, and down for amountOut\\n\\n        // x1 = xPre ^ a; y1 = yPre ^ a\\n        uint256 x1 = reservesTokenIn.powUp(a);\\n        uint256 y1 = reservesTokenOut.powUp(a);\\n\\n        // y2 = (yPre - amountOut) ^ a; x2 = (xPre + amountIn) ^ a\\n        //\\n        // No overflow risk in the addition as Balancer will only allow an `amountDelta` for tokens coming in\\n        // if the user actually has it, and the max token supply for well-behaved tokens is bounded by the uint256 type\\n        uint256 newReservesTokenInOrOut = givenIn ? reservesTokenIn + amountDelta : reservesTokenOut.sub(amountDelta);\\n        uint256 xOrY2 = newReservesTokenInOrOut.powDown(a);\\n\\n        // x1 + y1 = xOrY2 + xOrYPost ^ a\\n        // -> xOrYPost ^ a = x1 + y1 - x2\\n        // -> xOrYPost = (x1 + y1 - xOrY2) ^ (1 / a)\\n        uint256 xOrYPost = (x1.add(y1).sub(xOrY2)).powUp(FixedPoint.ONE.divDown(a));\\n        _require(!givenIn || reservesTokenOut > xOrYPost, Errors.SWAP_TOO_SMALL);\\n\\n        if (givenIn) {\\n            // Check that PT reserves are greater than \\\"Underlying\\\" reserves per section 6.3 of the YS paper\\n            _require(\\n                pTIn ?\\n                newReservesTokenInOrOut >= xOrYPost :\\n                newReservesTokenInOrOut <= xOrYPost,\\n                Errors.NEGATIVE_RATE\\n            );\\n\\n            // amountOut = yPre - yPost\\n            return reservesTokenOut.sub(xOrYPost);\\n        } else {\\n            _require(\\n                pTIn ?\\n                xOrYPost >= newReservesTokenInOrOut :\\n                xOrYPost <= newReservesTokenInOrOut,\\n                Errors.NEGATIVE_RATE\\n            );\\n\\n            // amountIn = xPost - xPre\\n            return xOrYPost.sub(reservesTokenIn);\\n        }\\n    }\\n\\n    /* ========== PROTOCOL FEE HELPERS ========== */\\n\\n    /// @notice Determine the growth in the invariant due to swap fees only\\n    /// @dev This can't be a view function b/c `Adapter.scale` is not a view function\\n    function _bptFeeDue(uint256[] memory reserves, uint256 protocolSwapFeePercentage) internal view returns (uint256) {\\n        uint256 ttm = maturity > block.timestamp ? uint256(maturity - block.timestamp) * FixedPoint.ONE : 0;\\n        uint256 a = ts.mulDown(ttm).complement();\\n\\n        // Invariant growth from time only\\n        uint256 timeOnlyInvariant = _lastToken0Reserve.powDown(a).add(_lastToken1Reserve.powDown(a));\\n\\n        // `x` & `y` for the actual invariant, with growth from time and fees\\n        uint256 x = reserves[pti].add(totalSupply()).powDown(a);\\n        uint256 y = reserves[1 - pti].mulDown(_initScale).powDown(a);\\n        uint256 fullInvariant = x.add(y);\\n\\n        if (fullInvariant <= timeOnlyInvariant) {\\n            // Similar to the invariant check in balancer-v2-monorepo/**/WeightedMath.sol,\\n            // this shouldn't happen outside of rounding errors, yet we keep this so that those\\n            // potential errors don't lead to a locked state\\n            return 0;\\n        }\\n\\n        // The formula to calculate fees due is:\\n        //\\n        // where:\\n        //   `g` is the factor by which reserves have grown\\n        //   `time-only invariant` = x^a + y^a\\n        //   `realized invariant`  = (g*x)^a + (g*y)^a\\n        //\\n        //              /   realized invariant     \\\\ ^ (1/a)\\n        // `growth` =  |   ----------------------  |\\n        //              \\\\   time-only invariant    /\\n        //\\n        //\\n        // This gets us the proportional growth of all token balances, or `growth`\\n        //\\n        // We can plug this into the following equation from `WeightedMath` in PR#1111 on the Balancer monorepo:\\n        //\\n        //             supply * protocol fee * (growth - 1)\\n        //                 ---------------------------\\n        //                          growth\\n        // toMint = --------------------------------------\\n        //              1 - protocol fee * (growth - 1)\\n        //                ---------------------------\\n        //                          growth\\n\\n        uint256 growth = fullInvariant.divDown(timeOnlyInvariant).powDown(FixedPoint.ONE.divDown(a));\\n        uint256 k = protocolSwapFeePercentage.mulDown(growth.sub(FixedPoint.ONE)).divDown(growth);\\n\\n        return totalSupply().mulDown(k).divDown(k.complement());\\n    }\\n\\n    /// @notice Cache the given reserve amounts\\n    /// @dev if the oracle is set, this function will also cache the invariant and supply\\n    function _cacheReserves(uint256[] memory reserves) internal {\\n        uint256 reservePT = reserves[pti].add(totalSupply());\\n        // Calculate the backdated Target reserve\\n        uint256 reserveUnderlying = reserves[1 - pti].mulDown(_initScale);\\n\\n        // Caclulate the invariant and store everything\\n        uint256 lastToken0Reserve;\\n        uint256 lastToken1Reserve;\\n        if (pti == 0) {\\n            lastToken0Reserve = reservePT;\\n            lastToken1Reserve = reserveUnderlying;\\n        } else {\\n            lastToken0Reserve = reserveUnderlying;\\n            lastToken1Reserve = reservePT;\\n        }\\n\\n        if (oracleData.oracleEnabled) {\\n            // If the oracle is enabled, cache the current invarant as well so that callers can determine liquidity\\n            uint256 ttm = maturity > block.timestamp ? uint256(maturity - block.timestamp) * FixedPoint.ONE : 0;\\n            uint256 a = ts.mulDown(ttm).complement();\\n\\n            oracleData.logInvariant = int200(\\n                LogCompression.toLowResLog(\\n                    lastToken0Reserve.powDown(a).add(lastToken1Reserve.powDown(a))\\n                )\\n            );\\n        }\\n\\n        _lastToken0Reserve = lastToken0Reserve;\\n        _lastToken1Reserve = lastToken1Reserve;\\n    }\\n\\n    /* ========== ORACLE HELPERS ========== */\\n\\n    /// @notice Update the oracle with the current index and timestamp\\n    /// @dev Must receive reserves that have already been upscaled\\n    /// @dev Acts as a no-op if:\\n    ///     * the oracle is not enabled \\n    ///     * a price has already been stored for this block\\n    ///     * the Target side of the pool doesn't have enough liquidity\\n    function _updateOracle(\\n        uint256 lastChangeBlock,\\n        uint256 balancePT,\\n        uint256 balanceTarget\\n    ) internal {\\n        // The Target side of the pool must have at least 0.01 units of liquidity for us to collect a price sample\\n        // note additional liquidity contraints may be enforced outside of this contract via the invariant TWAP\\n        if (oracleData.oracleEnabled && block.number > lastChangeBlock && balanceTarget >= 1e16) {\\n            // Use equation (2) from the YieldSpace paper to calculate the the marginal rate from the reserves\\n            uint256 impliedRate = balancePT.add(totalSupply())\\n                .divDown(balanceTarget.mulDown(_initScale));\\n\\n            // Guard against rounding from exits leading the implied rate to be very slightly negative\\n            // NOTE: in a future version of this system, a postive rate invariant for joins/exits will be preserved,\\n            // as is currently done for swaps\\n            impliedRate = impliedRate < FixedPoint.ONE ? 0 : impliedRate.sub(FixedPoint.ONE);\\n\\n            // Cacluate the price of one PT in Target terms\\n            uint256 pTPriceInTarget = getPriceFromImpliedRate(impliedRate);\\n\\n            // Following Balancer's oracle conventions, get price of token 1 in terms of token 0 and\\n            // and the price of one BPT in terms of token 0\\n            //\\n            // note b/c reserves are upscaled coming into this function,\\n            // price is already upscaled to 18 decimals, regardless of the decimals used for token 0 & 1\\n            uint256 pairPrice = pti == 0 ? FixedPoint.ONE.divDown(pTPriceInTarget) : pTPriceInTarget;\\n\\n            uint256 oracleUpdatedIndex = _processPriceData(\\n                oracleData.oracleSampleInitialTimestamp,\\n                oracleData.oracleIndex,\\n                LogCompression.toLowResLog(pairPrice),\\n                // We diverge from Balancer's defaults here by storing implied rate\\n                // rather than BPT price in this second slot\\n                //\\n                // Also note implied rates of less than 1e6 are taken as 1e6, b/c:\\n                //     1) `toLowResLog` fails for 0 and 1e6 is precise enough for our needs\\n                //     2) 1e6 is the lowest value Balancer passes into this util (min for totalSupply())\\n                impliedRate < 1e6 ? LogCompression.toLowResLog(1e6) : LogCompression.toLowResLog(impliedRate),\\n                int256(oracleData.logInvariant)\\n            );\\n\\n            if (oracleData.oracleIndex != oracleUpdatedIndex) {\\n                oracleData.oracleSampleInitialTimestamp = uint32(block.timestamp);\\n                oracleData.oracleIndex = uint16(oracleUpdatedIndex);\\n            }\\n        }\\n    }\\n\\n    function _getOracleIndex() internal view override returns (uint256) {\\n        return oracleData.oracleIndex;\\n    }\\n\\n    /* ========== PUBLIC GETTERS ========== */\\n\\n    /// @notice Get the APY implied rate for PTs given a price in Target\\n    /// @param pTPriceInTarget price of PTs in terms of Target\\n    function getImpliedRateFromPrice(uint256 pTPriceInTarget) public view returns (uint256 impliedRate) {\\n        if (block.timestamp >= maturity) {\\n            return 0;\\n        }\\n\\n        // Calculate the *normed* implied rate from the PT price \\n        // (i.e. the effective implied rate of PTs over the period normed by the timeshift param)\\n        // (e.g. PTs = 0.9 [U], time to maturity of 0.5 yrs, timeshift param of 10 yrs, the\\n        //  normed implied rate = ( 1 / 0.9 ) ^ ( 1 / (0.5 * [1 / 10]) ) - 1 = 722.5% )\\n        impliedRate = FixedPoint.ONE\\n            .divDown(pTPriceInTarget.mulDown(AdapterLike(adapter).scaleStored()))\\n            .powDown(FixedPoint.ONE.divDown(ts).divDown((maturity - block.timestamp) * FixedPoint.ONE))\\n            .sub(FixedPoint.ONE);\\n    }\\n\\n    /// @notice Get price of PTs in Target terms given a price for PTs in Target\\n    /// @param impliedRate Normed implied rate\\n    function getPriceFromImpliedRate(uint256 impliedRate) public view returns (uint256 pTPriceInTarget) {\\n        if (block.timestamp >= maturity) {\\n            return FixedPoint.ONE;\\n        }\\n\\n        // Calculate the PT price in Target from an implied rate adjusted by the timeshift param,\\n        // where the timeshift is a normalization factor applied to the time to maturity\\n        pTPriceInTarget = FixedPoint.ONE\\n            .divDown(impliedRate.add(FixedPoint.ONE)\\n            .powDown(((maturity - block.timestamp) * FixedPoint.ONE)\\n            .divDown(FixedPoint.ONE.divDown(ts))))\\n            .divDown(AdapterLike(adapter).scaleStored());\\n    }\\n\\n    /// @notice Get the \\\"fair\\\" price for the BPT tokens given a correct price for PTs\\n    /// in terms of Target. i.e. the price of one BPT in terms of Target using reserves\\n    /// as they would be if they accurately reflected the true PT price\\n    /// @dev for a technical explanation of the concept, see the description in the following repo:\\n    /// https://github.com/makerdao/univ2-lp-oracle/blob/874a59d74d847909cc4a31f0d38ee6b020f6525f/src/UNIV2LPOracle.sol#L26\\n    function getFairBPTPrice(uint256 ptTwapDuration)\\n        public\\n        view\\n        returns (uint256 fairBptPriceInTarget)\\n    {\\n        OracleAverageQuery[] memory queries = new OracleAverageQuery[](1);\\n        queries[0] = OracleAverageQuery({\\n            variable: Variable.PAIR_PRICE,\\n            secs: ptTwapDuration,\\n            ago: 1 hours // take the oracle from 1 hour ago + ptTwapDuration ago to 1 hour ago\\n        });\\n\\n        // TWAP read will revert with ORACLE_NOT_INITIALIZED if the buffer has not been filled\\n        uint256[] memory results = this.getTimeWeightedAverage(queries);\\n        uint256 pTPriceInTarget = pti == 1 ? results[0] : FixedPoint.ONE.divDown(results[0]);\\n\\n        uint256 impliedRate = getImpliedRateFromPrice(pTPriceInTarget);\\n        (, uint256[] memory balances, ) = _vault.getPoolTokens(_poolId);\\n\\n        uint256 ttm = maturity > block.timestamp\\n            ? uint256(maturity - block.timestamp) * FixedPoint.ONE\\n            : 0;\\n        uint256 a = ts.mulDown(ttm).complement();\\n\\n        uint256 k = balances[pti].add(totalSupply()).powDown(a).add(\\n            balances[1 - pti].mulDown(_initScale).powDown(a)\\n        );\\n\\n        // Equilibrium reserves for the PT side, w/o the final `- totalSupply` at the end\\n        uint256 equilibriumPTReservesPartial = k.divDown(\\n            FixedPoint.ONE.divDown(FixedPoint.ONE.add(impliedRate).powDown(a)).add(FixedPoint.ONE)\\n        ).powDown(FixedPoint.ONE.divDown(a));\\n\\n        uint256 equilibriumTargetReserves = equilibriumPTReservesPartial\\n            .divDown(_initScale.mulDown(FixedPoint.ONE.add(impliedRate)));\\n\\n        fairBptPriceInTarget = equilibriumTargetReserves\\n            // Complete the equilibrium PT reserve calc\\n            .add(equilibriumPTReservesPartial.sub(totalSupply())\\n            .mulDown(pTPriceInTarget)).divDown(totalSupply());\\n    }\\n\\n    /// @notice Get token indices for PT and Target\\n    function getIndices() public view returns (uint256 _pti, uint256 _targeti) {\\n        _pti = pti;\\n        _targeti = 1 - pti;\\n    }\\n\\n    /* ========== BALANCER REQUIRED INTERFACE ========== */\\n\\n    function getPoolId() public view override returns (bytes32) {\\n        return _poolId;\\n    }\\n\\n    function getVault() public view returns (IVault) {\\n        return _vault;\\n    }\\n\\n    /* ========== BALANCER SCALING FUNCTIONS ========== */\\n\\n    /// @notice Scaling factors for PT & Target tokens\\n    function _scalingFactor(bool pt) internal view returns (uint256) {\\n        return pt ? _scalingFactorPT : _scalingFactorTarget;\\n    }\\n\\n    /// @notice Scale number type to 18 decimals if need be\\n    function _upscale(uint256 amount, uint256 scalingFactor) internal pure returns (uint256) {\\n        return BasicMath.mul(amount, scalingFactor);\\n    }\\n\\n    /// @notice Ensure number type is back in its base decimal if need be, rounding down\\n    function _downscaleDown(uint256 amount, uint256 scalingFactor) internal pure returns (uint256) {\\n        return amount / scalingFactor;\\n    }\\n\\n    /// @notice Ensure number type is back in its base decimal if need be, rounding up\\n    function _downscaleUp(uint256 amount, uint256 scalingFactor) internal pure returns (uint256) {\\n        return BasicMath.divUp(amount, scalingFactor);\\n    }\\n\\n    /// @notice Upscale array of token amounts to 18 decimals if need be\\n    function _upscaleArray(uint256[] memory amounts) internal view {\\n        amounts[pti] = BasicMath.mul(amounts[pti], _scalingFactor(true));\\n        amounts[1 - pti] = BasicMath.mul(amounts[1 - pti], _scalingFactor(false));\\n    }\\n\\n    /// @notice Downscale array of token amounts to 18 decimals if need be, rounding down\\n    function _downscaleDownArray(uint256[] memory amounts) internal view {\\n        amounts[pti] = amounts[pti] / _scalingFactor(true);\\n        amounts[1 - pti] = amounts[1 - pti] / _scalingFactor(false);\\n    }\\n    /// @notice Downscale array of token amounts to 18 decimals if need be, rounding up\\n    function _downscaleUpArray(uint256[] memory amounts) internal view {\\n        amounts[pti] = BasicMath.divUp(amounts[pti], _scalingFactor(true));\\n        amounts[1 - pti] = BasicMath.divUp(amounts[1 - pti], _scalingFactor(false));\\n    }\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    /// Taken from balancer-v2-monorepo/**/WeightedPool2Tokens.sol\\n    modifier onlyVault(bytes32 poolId_) {\\n        _require(msg.sender == address(getVault()), Errors.CALLER_NOT_VAULT);\\n        _require(poolId_ == getPoolId(), Errors.INVALID_POOL_ID);\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xef9fcd4749891a246a8ccdc9a994bb6ae8439ffc3895abd98dd6266dbda4700f\",\"license\":\"AGPL-3.0-only\"},\"lib/v1-space/src/SpaceFactory.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport { FixedPoint } from \\\"@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol\\\";\\nimport { BasePoolFactory } from \\\"@balancer-labs/v2-pool-utils/contracts/factories/BasePoolFactory.sol\\\";\\nimport { IVault } from \\\"@balancer-labs/v2-vault/contracts/interfaces/IVault.sol\\\";\\nimport { Trust } from \\\"@sense-finance/v1-utils/src/Trust.sol\\\";\\n\\nimport { Space } from \\\"./Space.sol\\\";\\nimport { Errors, _require } from \\\"./Errors.sol\\\";\\n\\ninterface DividerLike {\\n    function series(\\n        address, /* adapter */\\n        uint256 /* maturity */\\n    )\\n        external\\n        returns (\\n            address, /* principal token */\\n            address, /* yield token */\\n            address, /* sponsor */\\n            uint256, /* reward */\\n            uint256, /* iscale */\\n            uint256, /* mscale */\\n            uint256, /* maxscale */\\n            uint128, /* issuance */\\n            uint128 /* tilt */\\n        );\\n\\n    function pt(address adapter, uint256 maturity) external returns (address);\\n\\n    function yt(address adapter, uint256 maturity) external returns (address);\\n}\\n\\ncontract SpaceFactory is Trust {\\n    /* ========== PUBLIC IMMUTABLES ========== */\\n\\n    /// @notice Balancer Vault\\n    IVault public immutable vault;\\n\\n    /// @notice Sense Divider\\n    DividerLike public immutable divider;\\n\\n    /* ========== PUBLIC MUTABLE STORAGE ========== */\\n\\n    /// @notice Pool registry (adapter -> maturity -> pool address)\\n    mapping(address => mapping(uint256 => address)) public pools;\\n\\n    /// @notice Yieldspace config\\n    uint256 public ts;\\n    uint256 public g1;\\n    uint256 public g2;\\n\\n    /// @notice Oracle flag\\n    bool public oracleEnabled;\\n\\n    constructor(\\n        IVault _vault,\\n        address _divider,\\n        uint256 _ts,\\n        uint256 _g1,\\n        uint256 _g2,\\n        bool _oracleEnabled\\n    ) Trust(msg.sender) {\\n        vault = _vault;\\n        divider = DividerLike(_divider);\\n        ts = _ts;\\n        g1 = _g1;\\n        g2 = _g2;\\n        oracleEnabled = _oracleEnabled;\\n    }\\n\\n    /// @notice Deploys a new `Space` contract\\n    function create(address adapter, uint256 maturity) external returns (address pool) {\\n        address pt = divider.pt(adapter, maturity);\\n        _require(pt != address(0), Errors.INVALID_SERIES);\\n        _require(pools[adapter][maturity] == address(0), Errors.POOL_ALREADY_EXISTS);\\n\\n        pool = address(new Space(\\n            vault,\\n            adapter,\\n            maturity,\\n            pt,\\n            ts,\\n            g1,\\n            g2,\\n            oracleEnabled\\n        ));\\n\\n        pools[adapter][maturity] = pool;\\n    }\\n\\n    function setParams(\\n        uint256 _ts,\\n        uint256 _g1,\\n        uint256 _g2,\\n        bool _oracleEnabled\\n    ) public requiresTrust {\\n        // g1 is for swapping Targets to PT and should discount the effective interest\\n        _require(_g1 <= FixedPoint.ONE, Errors.INVALID_G1);\\n        // g2 is for swapping PT to Target and should mark the effective interest up\\n        _require(_g2 >= FixedPoint.ONE, Errors.INVALID_G2);\\n\\n        ts = _ts;\\n        g1 = _g1;\\n        g2 = _g2;\\n        oracleEnabled = _oracleEnabled;\\n    }\\n\\n    /// @notice Authd action to set a pool address on the \\\"pools\\\" registry\\n    /// @dev Adding a pool to the mapping prevents a new pool from being deployed for that Series from this factory\\n    function setPool(address adapter, uint256 maturity, address pool) public requiresTrust {\\n        _require(divider.pt(adapter, maturity) != address(0), Errors.INVALID_SERIES);\\n        _require(pools[adapter][maturity] == address(0), Errors.POOL_ALREADY_EXISTS);\\n\\n        pools[adapter][maturity] = pool;\\n    }\\n}\",\"keccak256\":\"0x140e18c8e294a1edb17c9efb6fcf9c3538aca17ed725855202e2c591b338ac43\",\"license\":\"AGPL-3.0-only\"},\"lib/v1-space/src/oracle/Buffer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n// Forked from balancer-v2-monorepo/pkg/pool-utils/contracts/oracle/**\\n// at commit ef246cf213541c4120a78f811560f100e5a7e15a\\n\\npragma solidity ^0.7.0;\\n\\nlibrary Buffer {\\n    // The buffer is a circular storage structure with 20 slots.\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    uint256 internal constant SIZE = 20;\\n\\n    /**\\n     * @dev Returns the index of the element before the one pointed by `index`.\\n     */\\n    function prev(uint256 index) internal pure returns (uint256) {\\n        return sub(index, 1);\\n    }\\n\\n    /**\\n     * @dev Returns the index of the element after the one pointed by `index`.\\n     */\\n    function next(uint256 index) internal pure returns (uint256) {\\n        return add(index, 1);\\n    }\\n\\n    /**\\n     * @dev Returns the index of an element `offset` slots after the one pointed by `index`.\\n     */\\n    function add(uint256 index, uint256 offset) internal pure returns (uint256) {\\n        return (index + offset) % SIZE;\\n    }\\n\\n    /**\\n     * @dev Returns the index of an element `offset` slots before the one pointed by `index`.\\n     */\\n    function sub(uint256 index, uint256 offset) internal pure returns (uint256) {\\n        return (index + SIZE - offset) % SIZE;\\n    }\\n}\\n\",\"keccak256\":\"0x6db2a38d08fd362a90e95c2702ae51277312e6f9a83de5c0a4e921c582d76ca6\",\"license\":\"GPL-3.0-or-later\"},\"lib/v1-space/src/oracle/PoolPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n// Forked from balancer-v2-monorepo/pkg/pool-utils/contracts/oracle/**\\n// at commit ef246cf213541c4120a78f811560f100e5a7e15a\\n\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/helpers/BalancerErrors.sol\\\";\\n\\nimport \\\"./interfaces/IPriceOracle.sol\\\";\\nimport \\\"./interfaces/IPoolPriceOracle.sol\\\";\\n\\nimport \\\"./Buffer.sol\\\";\\nimport \\\"./Samples.sol\\\";\\nimport \\\"./QueryProcessor.sol\\\";\\n\\n/**\\n * @dev This module allows Pools to access historical pricing information.\\n *\\n * It uses a 20 long circular buffer to store past data, where the data within each sample is the result of\\n * accumulating live data for no more than two minutes. Therefore, assuming the worst case scenario where new data is\\n * updated in every single block, the oldest samples in the buffer (and therefore largest queryable period) will\\n * be slightly over 6.5 hours old.\\n *\\n * Usage of this module requires the caller to keep track of two variables: the latest circular buffer index, and the\\n * timestamp when the index last changed. Aditionally, access to the latest circular buffer index must be exposed by\\n * implementing `_getOracleIndex`.\\n *\\n * This contract relies on the `QueryProcessor` linked library to reduce bytecode size.\\n */\\nabstract contract PoolPriceOracle is IPoolPriceOracle, IPriceOracle {\\n    using Buffer for uint256;\\n    using Samples for bytes32;\\n\\n    // Each sample in the buffer accumulates information for up to 20 minutes. This is simply to reduce the size of the\\n    // buffer: small time deviations will not have any significant effect.\\n    // solhint-disable not-rely-on-time\\n    uint256 private constant _MAX_SAMPLE_DURATION = 20 minutes;\\n\\n    // We use a mapping to simulate an array: the buffer won't grow or shrink, and since we will always use valid\\n    // indexes using a mapping saves gas by skipping the bounds checks.\\n    mapping(uint256 => bytes32) internal _samples;\\n\\n    // IPoolPriceOracle\\n\\n    function getSample(uint256 index)\\n        external\\n        view\\n        override\\n        returns (\\n            int256 logPairPrice,\\n            int256 accLogPairPrice,\\n            int256 logBptPrice,\\n            int256 accLogBptPrice,\\n            int256 logInvariant,\\n            int256 accLogInvariant,\\n            uint256 timestamp\\n        )\\n    {\\n        _require(index < Buffer.SIZE, Errors.ORACLE_INVALID_INDEX);\\n\\n        bytes32 sample = _getSample(index);\\n        return sample.unpack();\\n    }\\n\\n    function getTotalSamples() external pure override returns (uint256) {\\n        return Buffer.SIZE;\\n    }\\n\\n    /**\\n     * @dev Manually dirty oracle sample storage slots with dummy data, to reduce the gas cost of the future swaps\\n     * that will initialize them. This function is only useful before the oracle has been fully initialized.\\n     *\\n     * `endIndex` is non-inclusive.\\n     */\\n    function dirtyUninitializedOracleSamples(uint256 startIndex, uint256 endIndex) external {\\n        _require(startIndex < endIndex && endIndex <= Buffer.SIZE, Errors.OUT_OF_BOUNDS);\\n\\n        // Uninitialized samples are identified by a zero timestamp -- all other fields are ignored,\\n        // so any non-zero value with a zero timestamp suffices.\\n        bytes32 initSample = Samples.pack(1, 0, 0, 0, 0, 0, 0);\\n        for (uint256 i = startIndex; i < endIndex; i++) {\\n            if (_samples[i].timestamp() == 0) {\\n                _samples[i] = initSample;\\n            }\\n        }\\n    }\\n\\n    // IPriceOracle\\n\\n    function getLargestSafeQueryWindow() external pure override returns (uint256) {\\n        return 6.66 hours;\\n    }\\n\\n    function getLatest(Variable variable) external view override returns (uint256) {\\n        return QueryProcessor.getInstantValue(_samples, variable, _getOracleIndex());\\n    }\\n\\n    function getTimeWeightedAverage(OracleAverageQuery[] memory queries)\\n        external\\n        view\\n        override\\n        returns (uint256[] memory results)\\n    {\\n        results = new uint256[](queries.length);\\n        uint256 latestIndex = _getOracleIndex();\\n\\n        for (uint256 i = 0; i < queries.length; ++i) {\\n            results[i] = QueryProcessor.getTimeWeightedAverage(_samples, queries[i], latestIndex);\\n        }\\n    }\\n\\n    function getPastAccumulators(OracleAccumulatorQuery[] memory queries)\\n        external\\n        view\\n        override\\n        returns (int256[] memory results)\\n    {\\n        results = new int256[](queries.length);\\n        uint256 latestIndex = _getOracleIndex();\\n\\n        OracleAccumulatorQuery memory query;\\n        for (uint256 i = 0; i < queries.length; ++i) {\\n            query = queries[i];\\n            results[i] = _getPastAccumulator(query.variable, latestIndex, query.ago);\\n        }\\n    }\\n\\n    // Internal functions\\n\\n    /**\\n     * @dev Processes new price and invariant data, updating the latest sample or creating a new one.\\n     *\\n     * Receives the new logarithms of values to store: `logPairPrice`, `logBptPrice` and `logInvariant`, as well the\\n     * index of the latest sample and the timestamp of its creation.\\n     *\\n     * Returns the index of the latest sample. If different from `latestIndex`, the caller should also store the\\n     * timestamp, and pass it on future calls to this function.\\n     */\\n    function _processPriceData(\\n        uint256 latestSampleCreationTimestamp,\\n        uint256 latestIndex,\\n        int256 logPairPrice,\\n        int256 logBptPrice,\\n        int256 logInvariant\\n    ) internal returns (uint256) {\\n        // Read latest sample, and compute the next one by updating it with the newly received data.\\n        bytes32 sample = _getSample(latestIndex).update(logPairPrice, logBptPrice, logInvariant, block.timestamp);\\n\\n        // We create a new sample if more than _MAX_SAMPLE_DURATION seconds have elapsed since the creation of the\\n        // latest one. In other words, no sample accumulates data over a period larger than _MAX_SAMPLE_DURATION.\\n        bool newSample = block.timestamp - latestSampleCreationTimestamp >= _MAX_SAMPLE_DURATION;\\n        latestIndex = newSample ? latestIndex.next() : latestIndex;\\n\\n        // Store the updated or new sample.\\n        _samples[latestIndex] = sample;\\n\\n        return latestIndex;\\n    }\\n\\n    function _getPastAccumulator(\\n        IPriceOracle.Variable variable,\\n        uint256 latestIndex,\\n        uint256 ago\\n    ) internal view returns (int256) {\\n        return QueryProcessor.getPastAccumulator(_samples, variable, latestIndex, ago);\\n    }\\n\\n    function _findNearestSample(\\n        uint256 lookUpDate,\\n        uint256 offset,\\n        uint256 length\\n    ) internal view returns (bytes32 prev, bytes32 next) {\\n        return QueryProcessor.findNearestSample(_samples, lookUpDate, offset, length);\\n    }\\n\\n    /**\\n     * @dev Returns the sample that corresponds to a given `index`.\\n     *\\n     * Using this function instead of accessing storage directly results in denser bytecode (since the storage slot is\\n     * only computed here).\\n     */\\n    function _getSample(uint256 index) internal view returns (bytes32) {\\n        return _samples[index];\\n    }\\n\\n    /**\\n     * @dev Virtual function to be implemented by derived contracts. Must return the current index of the oracle\\n     * circular buffer.\\n     */\\n    function _getOracleIndex() internal view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0xa2f822f2317b64feeeeae34d7a19a0d5ee3339e49e854ae47cae7724a0ab2088\",\"license\":\"GPL-3.0-or-later\"},\"lib/v1-space/src/oracle/QueryProcessor.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n// Forked from balancer-v2-monorepo/pkg/pool-utils/contracts/oracle/**\\n// at commit ef246cf213541c4120a78f811560f100e5a7e15a\\n\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/helpers/BalancerErrors.sol\\\";\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/helpers/LogCompression.sol\\\";\\n\\nimport \\\"./interfaces/IPriceOracle.sol\\\";\\n\\nimport \\\"./Buffer.sol\\\";\\nimport \\\"./Samples.sol\\\";\\n\\n/**\\n * @dev Auxiliary library for PoolPriceOracle, offloading most of the query code to reduce bytecode size by using this\\n * as a linked library. The downside is an extra DELEGATECALL is added (2600 gas as of the Berlin hardfork), but the\\n * bytecode size gains are so big (specially of the oracle contract does not use `LogCompression.fromLowResLog`) that\\n * it is worth it.\\n */\\nlibrary QueryProcessor {\\n    using Buffer for uint256;\\n    using Samples for bytes32;\\n    using LogCompression for int256;\\n\\n    /**\\n     * @dev Returns the value for `variable` at the indexed sample.\\n     */\\n    function getInstantValue(\\n        mapping(uint256 => bytes32) storage samples,\\n        IPriceOracle.Variable variable,\\n        uint256 index\\n    ) external view returns (uint256) {\\n        bytes32 sample = samples[index];\\n        _require(sample.timestamp() > 0, Errors.ORACLE_NOT_INITIALIZED);\\n\\n        int256 rawInstantValue = sample.instant(variable);\\n        return LogCompression.fromLowResLog(rawInstantValue);\\n    }\\n\\n    /**\\n     * @dev Returns the time average weighted price corresponding to `query`.\\n     */\\n    function getTimeWeightedAverage(\\n        mapping(uint256 => bytes32) storage samples,\\n        IPriceOracle.OracleAverageQuery memory query,\\n        uint256 latestIndex\\n    ) external view returns (uint256) {\\n        _require(query.secs != 0, Errors.ORACLE_BAD_SECS);\\n\\n        int256 beginAccumulator = getPastAccumulator(samples, query.variable, latestIndex, query.ago + query.secs);\\n        int256 endAccumulator = getPastAccumulator(samples, query.variable, latestIndex, query.ago);\\n        return LogCompression.fromLowResLog((endAccumulator - beginAccumulator) / int256(query.secs));\\n    }\\n\\n    /**\\n     * @dev Returns the value of the accumulator for `variable` `ago` seconds ago. `latestIndex` must be the index of\\n     * the latest sample in the buffer.\\n     *\\n     * Reverts under the following conditions:\\n     *  - if the buffer is empty.\\n     *  - if querying past information and the buffer has not been fully initialized.\\n     *  - if querying older information than available in the buffer. Note that a full buffer guarantees queries for the\\n     *    past 34 hours will not revert.\\n     *\\n     * If requesting information for a timestamp later than the latest one, it is extrapolated using the latest\\n     * available data.\\n     *\\n     * When no exact information is available for the requested past timestamp (as usually happens, since at most one\\n     * timestamp is stored every two minutes), it is estimated by performing linear interpolation using the closest\\n     * values. This process is guaranteed to complete performing at most 10 storage reads.\\n     */\\n    function getPastAccumulator(\\n        mapping(uint256 => bytes32) storage samples,\\n        IPriceOracle.Variable variable,\\n        uint256 latestIndex,\\n        uint256 ago\\n    ) public view returns (int256) {\\n        // solhint-disable not-rely-on-time\\n        // `ago` must not be before the epoch.\\n        _require(block.timestamp >= ago, Errors.ORACLE_INVALID_SECONDS_QUERY);\\n        uint256 lookUpTime = block.timestamp - ago;\\n\\n        bytes32 latestSample = samples[latestIndex];\\n        uint256 latestTimestamp = latestSample.timestamp();\\n\\n        // The latest sample only has a non-zero timestamp if no data was ever processed and stored in the buffer.\\n        _require(latestTimestamp > 0, Errors.ORACLE_NOT_INITIALIZED);\\n\\n        if (latestTimestamp <= lookUpTime) {\\n            // The accumulator at times ahead of the latest one are computed by extrapolating the latest data. This is\\n            // equivalent to the instant value not changing between the last timestamp and the look up time.\\n\\n            // We can use unchecked arithmetic since the accumulator can be represented in 53 bits, timestamps in 31\\n            // bits, and the instant value in 22 bits.\\n            uint256 elapsed = lookUpTime - latestTimestamp;\\n            return latestSample.accumulator(variable) + (latestSample.instant(variable) * int256(elapsed));\\n        } else {\\n            // The look up time is before the latest sample, but we need to make sure that it is not before the oldest\\n            // sample as well.\\n\\n            // Since we use a circular buffer, the oldest sample is simply the next one.\\n            uint256 bufferLength;\\n            uint256 oldestIndex = latestIndex.next();\\n            {\\n                // Local scope used to prevent stack-too-deep errors.\\n                bytes32 oldestSample = samples[oldestIndex];\\n                uint256 oldestTimestamp = oldestSample.timestamp();\\n\\n                if (oldestTimestamp > 0) {\\n                    // If the oldest timestamp is not zero, it means the buffer was fully initialized.\\n                    bufferLength = Buffer.SIZE;\\n                } else {\\n                    // If the buffer was not fully initialized, we haven't wrapped around it yet,\\n                    // and can treat it as a regular array where the oldest index is the first one,\\n                    // and the length the number of samples.\\n                    bufferLength = oldestIndex; // Equal to latestIndex.next()\\n                    oldestIndex = 0;\\n                    oldestTimestamp = samples[0].timestamp();\\n                }\\n\\n                // Finally check that the look up time is not previous to the oldest timestamp.\\n                _require(oldestTimestamp <= lookUpTime, Errors.ORACLE_QUERY_TOO_OLD);\\n            }\\n\\n            // Perform binary search to find nearest samples to the desired timestamp.\\n            (bytes32 prev, bytes32 next) = findNearestSample(samples, lookUpTime, oldestIndex, bufferLength);\\n\\n            // `next`'s timestamp is guaranteed to be larger than `prev`'s, so we can skip checked arithmetic.\\n            uint256 samplesTimeDiff = next.timestamp() - prev.timestamp();\\n\\n            if (samplesTimeDiff > 0) {\\n                // We estimate the accumulator at the requested look up time by interpolating linearly between the\\n                // previous and next accumulators.\\n\\n                // We can use unchecked arithmetic since the accumulators can be represented in 53 bits, and timestamps\\n                // in 31 bits.\\n                int256 samplesAccDiff = next.accumulator(variable) - prev.accumulator(variable);\\n                uint256 elapsed = lookUpTime - prev.timestamp();\\n                return prev.accumulator(variable) + ((samplesAccDiff * int256(elapsed)) / int256(samplesTimeDiff));\\n            } else {\\n                // Rarely, one of the samples will have the exact requested look up time, which is indicated by `prev`\\n                // and `next` being the same. In this case, we simply return the accumulator at that point in time.\\n                return prev.accumulator(variable);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Finds the two samples with timestamps before and after `lookUpDate`. If one of the samples matches exactly,\\n     * both `prev` and `next` will be it. `offset` is the index of the oldest sample in the buffer. `length` is the size\\n     * of the samples list.\\n     *\\n     * Assumes `lookUpDate` is greater or equal than the timestamp of the oldest sample, and less or equal than the\\n     * timestamp of the latest sample.\\n     */\\n    function findNearestSample(\\n        mapping(uint256 => bytes32) storage samples,\\n        uint256 lookUpDate,\\n        uint256 offset,\\n        uint256 length\\n    ) public view returns (bytes32 prev, bytes32 next) {\\n        // We're going to perform a binary search in the circular buffer, which requires it to be sorted. To achieve\\n        // this, we offset all buffer accesses by `offset`, making the first element the oldest one.\\n\\n        // Auxiliary variables in a typical binary search: we will look at some value `mid` between `low` and `high`,\\n        // periodically increasing `low` or decreasing `high` until we either find a match or determine the element is\\n        // not in the array.\\n        uint256 low = 0;\\n        uint256 high = length - 1;\\n        uint256 mid;\\n\\n        // If the search fails and no sample has a timestamp of `lookUpDate` (as is the most common scenario), `sample`\\n        // will be either the sample with the largest timestamp smaller than `lookUpDate`, or the one with the smallest\\n        // timestamp larger than `lookUpDate`.\\n        bytes32 sample;\\n        uint256 sampleTimestamp;\\n\\n        while (low <= high) {\\n            // Mid is the floor of the average.\\n            uint256 midWithoutOffset = (high + low) / 2;\\n\\n            // Recall that the buffer is not actually sorted: we need to apply the offset to access it in a sorted way.\\n            mid = midWithoutOffset.add(offset);\\n            sample = samples[mid];\\n            sampleTimestamp = sample.timestamp();\\n\\n            if (sampleTimestamp < lookUpDate) {\\n                // If the mid sample is bellow the look up date, then increase the low index to start from there.\\n                low = midWithoutOffset + 1;\\n            } else if (sampleTimestamp > lookUpDate) {\\n                // If the mid sample is above the look up date, then decrease the high index to start from there.\\n\\n                // We can skip checked arithmetic: it is impossible for `high` to ever be 0, as a scenario where `low`\\n                // equals 0 and `high` equals 1 would result in `low` increasing to 1 in the previous `if` clause.\\n                high = midWithoutOffset - 1;\\n            } else {\\n                // sampleTimestamp == lookUpDate\\n                // If we have an exact match, return the sample as both `prev` and `next`.\\n                return (sample, sample);\\n            }\\n        }\\n\\n        // In case we reach here, it means we didn't find exactly the sample we where looking for.\\n        return sampleTimestamp < lookUpDate ? (sample, samples[mid.next()]) : (samples[mid.prev()], sample);\\n    }\\n}\\n\",\"keccak256\":\"0x20323db19e0f7299d16046f5d85fcb248a5c11dcd73674969fe70788ce048308\",\"license\":\"GPL-3.0-or-later\"},\"lib/v1-space/src/oracle/Samples.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n// Forked from balancer-v2-monorepo/pkg/pool-utils/contracts/oracle/**\\n// at commit ef246cf213541c4120a78f811560f100e5a7e15a\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/helpers/WordCodec.sol\\\";\\n\\nimport \\\"./interfaces/IPriceOracle.sol\\\";\\n\\n/**\\n * @dev This library provides functions to help manipulating samples for Pool Price Oracles. It handles updates,\\n * encoding, and decoding of samples.\\n *\\n * Each sample holds the timestamp of its last update, plus information about three pieces of data: the price pair, the\\n * price of BPT (the associated Pool token), and the invariant.\\n *\\n * Prices and invariant are not stored directly: instead, we store their logarithm. These are known as the 'instant'\\n * values: the exact value at that timestamp.\\n *\\n * Additionally, for each value we keep an accumulator with the sum of all past values, each weighted by the time\\n * elapsed since the previous update. This lets us later subtract accumulators at different points in time and divide by\\n * the time elapsed between them, arriving at the geometric mean of the values (also known as log-average).\\n *\\n * All samples are stored in a single 256 bit word with the following structure:\\n *\\n * [    log pair price     |        bpt price      |       invariant       |  timestamp ]\\n * [ instant | accumulator | instant | accumulator | instant | accumulator |            ]\\n * [  int22  |    int53    |  int22  |    int53    |  int22  |    int53    |    uint31  ]\\n * MSB                                                                                LSB\\n *\\n * Assuming the timestamp doesn't overflow (which holds until the year 2038), the largest elapsed time is 2^31, which\\n * means the largest possible accumulator value is 2^21 * 2^31, which can be represented using a signed 53 bit integer.\\n */\\nlibrary Samples {\\n    using WordCodec for int256;\\n    using WordCodec for uint256;\\n    using WordCodec for bytes32;\\n\\n    uint256 internal constant _TIMESTAMP_OFFSET = 0;\\n    uint256 internal constant _ACC_LOG_INVARIANT_OFFSET = 31;\\n    uint256 internal constant _INST_LOG_INVARIANT_OFFSET = 84;\\n    uint256 internal constant _ACC_LOG_BPT_PRICE_OFFSET = 106;\\n    uint256 internal constant _INST_LOG_BPT_PRICE_OFFSET = 159;\\n    uint256 internal constant _ACC_LOG_PAIR_PRICE_OFFSET = 181;\\n    uint256 internal constant _INST_LOG_PAIR_PRICE_OFFSET = 234;\\n\\n    /**\\n     * @dev Updates a sample, accumulating the new data based on the elapsed time since the previous update. Returns the\\n     * updated sample.\\n     *\\n     * IMPORTANT: This function does not perform any arithmetic checks. In particular, it assumes the caller will never\\n     * pass values that cannot be represented as 22 bit signed integers. Additionally, it also assumes\\n     * `currentTimestamp` is greater than `sample`'s timestamp.\\n     */\\n    function update(\\n        bytes32 sample,\\n        int256 instLogPairPrice,\\n        int256 instLogBptPrice,\\n        int256 instLogInvariant,\\n        uint256 currentTimestamp\\n    ) internal pure returns (bytes32) {\\n        // Because elapsed can be represented as a 31 bit unsigned integer, and the received values can be represented\\n        // as 22 bit signed integers, we don't need to perform checked arithmetic.\\n\\n        int256 elapsed = int256(currentTimestamp - timestamp(sample));\\n        int256 accLogPairPrice = _accLogPairPrice(sample) + instLogPairPrice * elapsed;\\n        int256 accLogBptPrice = _accLogBptPrice(sample) + instLogBptPrice * elapsed;\\n        int256 accLogInvariant = _accLogInvariant(sample) + instLogInvariant * elapsed;\\n\\n        return\\n            pack(\\n                instLogPairPrice,\\n                accLogPairPrice,\\n                instLogBptPrice,\\n                accLogBptPrice,\\n                instLogInvariant,\\n                accLogInvariant,\\n                currentTimestamp\\n            );\\n    }\\n\\n    /**\\n     * @dev Returns the instant value stored in `sample` for `variable`.\\n     */\\n    function instant(bytes32 sample, IPriceOracle.Variable variable) internal pure returns (int256) {\\n        if (variable == IPriceOracle.Variable.PAIR_PRICE) {\\n            return _instLogPairPrice(sample);\\n        } else if (variable == IPriceOracle.Variable.BPT_PRICE) {\\n            return _instLogBptPrice(sample);\\n        } else {\\n            // variable == IPriceOracle.Variable.INVARIANT\\n            return _instLogInvariant(sample);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the accumulator value stored in `sample` for `variable`.\\n     */\\n    function accumulator(bytes32 sample, IPriceOracle.Variable variable) internal pure returns (int256) {\\n        if (variable == IPriceOracle.Variable.PAIR_PRICE) {\\n            return _accLogPairPrice(sample);\\n        } else if (variable == IPriceOracle.Variable.BPT_PRICE) {\\n            return _accLogBptPrice(sample);\\n        } else {\\n            // variable == IPriceOracle.Variable.INVARIANT\\n            return _accLogInvariant(sample);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns `sample`'s timestamp.\\n     */\\n    function timestamp(bytes32 sample) internal pure returns (uint256) {\\n        return sample.decodeUint31(_TIMESTAMP_OFFSET);\\n    }\\n\\n    /**\\n     * @dev Returns `sample`'s instant value for the logarithm of the pair price.\\n     */\\n    function _instLogPairPrice(bytes32 sample) private pure returns (int256) {\\n        return sample.decodeInt22(_INST_LOG_PAIR_PRICE_OFFSET);\\n    }\\n\\n    /**\\n     * @dev Returns `sample`'s accumulator of the logarithm of the pair price.\\n     */\\n    function _accLogPairPrice(bytes32 sample) private pure returns (int256) {\\n        return sample.decodeInt53(_ACC_LOG_PAIR_PRICE_OFFSET);\\n    }\\n\\n    /**\\n     * @dev Returns `sample`'s instant value for the logarithm of the BPT price.\\n     */\\n    function _instLogBptPrice(bytes32 sample) private pure returns (int256) {\\n        return sample.decodeInt22(_INST_LOG_BPT_PRICE_OFFSET);\\n    }\\n\\n    /**\\n     * @dev Returns `sample`'s accumulator of the logarithm of the BPT price.\\n     */\\n    function _accLogBptPrice(bytes32 sample) private pure returns (int256) {\\n        return sample.decodeInt53(_ACC_LOG_BPT_PRICE_OFFSET);\\n    }\\n\\n    /**\\n     * @dev Returns `sample`'s instant value for the logarithm of the invariant.\\n     */\\n    function _instLogInvariant(bytes32 sample) private pure returns (int256) {\\n        return sample.decodeInt22(_INST_LOG_INVARIANT_OFFSET);\\n    }\\n\\n    /**\\n     * @dev Returns `sample`'s accumulator of the logarithm of the invariant.\\n     */\\n    function _accLogInvariant(bytes32 sample) private pure returns (int256) {\\n        return sample.decodeInt53(_ACC_LOG_INVARIANT_OFFSET);\\n    }\\n\\n    /**\\n     * @dev Returns a sample created by packing together its components.\\n     */\\n    function pack(\\n        int256 instLogPairPrice,\\n        int256 accLogPairPrice,\\n        int256 instLogBptPrice,\\n        int256 accLogBptPrice,\\n        int256 instLogInvariant,\\n        int256 accLogInvariant,\\n        uint256 _timestamp\\n    ) internal pure returns (bytes32) {\\n        return\\n            instLogPairPrice.encodeInt22(_INST_LOG_PAIR_PRICE_OFFSET) |\\n            accLogPairPrice.encodeInt53(_ACC_LOG_PAIR_PRICE_OFFSET) |\\n            instLogBptPrice.encodeInt22(_INST_LOG_BPT_PRICE_OFFSET) |\\n            accLogBptPrice.encodeInt53(_ACC_LOG_BPT_PRICE_OFFSET) |\\n            instLogInvariant.encodeInt22(_INST_LOG_INVARIANT_OFFSET) |\\n            accLogInvariant.encodeInt53(_ACC_LOG_INVARIANT_OFFSET) |\\n            _timestamp.encodeUint(_TIMESTAMP_OFFSET); // Using 31 bits\\n    }\\n\\n    /**\\n     * @dev Unpacks a sample into its components.\\n     */\\n    function unpack(bytes32 sample)\\n        internal\\n        pure\\n        returns (\\n            int256 logPairPrice,\\n            int256 accLogPairPrice,\\n            int256 logBptPrice,\\n            int256 accLogBptPrice,\\n            int256 logInvariant,\\n            int256 accLogInvariant,\\n            uint256 _timestamp\\n        )\\n    {\\n        logPairPrice = _instLogPairPrice(sample);\\n        accLogPairPrice = _accLogPairPrice(sample);\\n        logBptPrice = _instLogBptPrice(sample);\\n        accLogBptPrice = _accLogBptPrice(sample);\\n        logInvariant = _instLogInvariant(sample);\\n        accLogInvariant = _accLogInvariant(sample);\\n        _timestamp = timestamp(sample);\\n    }\\n}\\n\",\"keccak256\":\"0x6a8b600560ead7313dff43b15cf1016e129039ea0616094d4f5f1a03cb336ef3\",\"license\":\"GPL-3.0-or-later\"},\"lib/v1-space/src/oracle/interfaces/IPoolPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n// Forked from balancer-v2-monorepo/pkg/pool-utils/contracts/oracle/**\\n// at commit ef246cf213541c4120a78f811560f100e5a7e15a\\n\\npragma solidity ^0.7.0;\\n\\ninterface IPoolPriceOracle {\\n    /**\\n     * @dev Returns the raw data of the sample at `index`.\\n     */\\n    function getSample(uint256 index)\\n        external\\n        view\\n        returns (\\n            int256 logPairPrice,\\n            int256 accLogPairPrice,\\n            int256 logBptPrice,\\n            int256 accLogBptPrice,\\n            int256 logInvariant,\\n            int256 accLogInvariant,\\n            uint256 timestamp\\n        );\\n\\n    /**\\n     * @dev Returns the total number of samples.\\n     */\\n    function getTotalSamples() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x5711219fdbf293809b3d5f03e445fcb9d3dfd30761959f86e6a36f05ea06f3b1\",\"license\":\"GPL-3.0-or-later\"},\"lib/v1-space/src/oracle/interfaces/IPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n// Forked from balancer-v2-monorepo/pkg/pool-utils/contracts/oracle/**\\n// at commit ef246cf213541c4120a78f811560f100e5a7e15a\\n\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @dev Interface for querying historical data from a Pool that can be used as a Price Oracle.\\n *\\n * This lets third parties retrieve average prices of tokens held by a Pool over a given period of time, as well as the\\n * price of the Pool share token (BPT) and invariant. Since the invariant is a sensible measure of Pool liquidity, it\\n * can be used to compare two different price sources, and choose the most liquid one.\\n *\\n * Once the oracle is fully initialized, all queries are guaranteed to succeed as long as they require no data that\\n * is not older than the largest safe query window.\\n */\\ninterface IPriceOracle {\\n    // The three values that can be queried:\\n    //\\n    // - PAIR_PRICE: the price of the tokens in the Pool, expressed as the price of the second token in units of the\\n    //   first token. For example, if token A is worth $2, and token B is worth $4, the pair price will be 2.0.\\n    //   Note that the price is computed *including* the tokens decimals. This means that the pair price of a Pool with\\n    //   DAI and USDC will be close to 1.0, despite DAI having 18 decimals and USDC 6.\\n    //\\n    // - BPT_PRICE: the price of the Pool share token (BPT), in units of the first token.\\n    //   Note that the price is computed *including* the tokens decimals. This means that the BPT price of a Pool with\\n    //   USDC in which BPT is worth $5 will be 5.0, despite the BPT having 18 decimals and USDC 6.\\n    //\\n    // - INVARIANT: the value of the Pool's invariant, which serves as a measure of its liquidity.\\n    enum Variable { PAIR_PRICE, BPT_PRICE, INVARIANT }\\n\\n    /**\\n     * @dev Returns the time average weighted price corresponding to each of `queries`. Prices are represented as 18\\n     * decimal fixed point values.\\n     */\\n    function getTimeWeightedAverage(OracleAverageQuery[] memory queries)\\n        external\\n        view\\n        returns (uint256[] memory results);\\n\\n    /**\\n     * @dev Returns latest sample of `variable`. Prices are represented as 18 decimal fixed point values.\\n     */\\n    function getLatest(Variable variable) external view returns (uint256);\\n\\n    /**\\n     * @dev Information for a Time Weighted Average query.\\n     *\\n     * Each query computes the average over a window of duration `secs` seconds that ended `ago` seconds ago. For\\n     * example, the average over the past 30 minutes is computed by settings secs to 1800 and ago to 0. If secs is 1800\\n     * and ago is 1800 as well, the average between 60 and 30 minutes ago is computed instead.\\n     */\\n    struct OracleAverageQuery {\\n        Variable variable;\\n        uint256 secs;\\n        uint256 ago;\\n    }\\n\\n    /**\\n     * @dev Returns largest time window that can be safely queried, where 'safely' means the Oracle is guaranteed to be\\n     * able to produce a result and not revert.\\n     *\\n     * If a query has a non-zero `ago` value, then `secs + ago` (the oldest point in time) must be smaller than this\\n     * value for 'safe' queries.\\n     */\\n    function getLargestSafeQueryWindow() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the accumulators corresponding to each of `queries`.\\n     */\\n    function getPastAccumulators(OracleAccumulatorQuery[] memory queries)\\n        external\\n        view\\n        returns (int256[] memory results);\\n\\n    /**\\n     * @dev Information for an Accumulator query.\\n     *\\n     * Each query estimates the accumulator at a time `ago` seconds ago.\\n     */\\n    struct OracleAccumulatorQuery {\\n        Variable variable;\\n        uint256 ago;\\n    }\\n}\\n\",\"keccak256\":\"0x264db8343a04bb39d3cb26121563918587ecab71406c42d478f6a2a5ccfddd45\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60c060405234801561001057600080fd5b5060405161613238038061613283398101604081905261002f916100c1565b3360008181526020818152604091829020805460ff191660019081179091558251908152915183927fe95aec380cae16330d146d5499ef7db6f3657e477104a733e771bc09e500d98692908290030190a250606095861b6001600160601b03199081166080529490951b90931660a0526002919091556003556004556005805460ff1916911515919091179055610146565b60008060008060008060c087890312156100d9578182fd5b86516100e48161012e565b60208801519096506100f58161012e565b8095505060408701519350606087015192506080870151915060a08701518015158114610120578182fd5b809150509295509295509295565b6001600160a01b038116811461014357600080fd5b50565b60805160601c60a05160601c615fb461017e600039806101f0528061050152806105915250806102e452806107095250615fb46000f3fe60806040523480156200001157600080fd5b5060043610620000e85760003560e01c8063756a24e4116200008d578063bdd8a3661162000063578063bdd8a36614620001cd578063e86d60bf14620001d7578063fbfa77cf14620001e157620000e8565b8063756a24e414620001865780638f38a555146200019f57806396d6487914620001b657620000e8565b8063378efa3711620000c3578063378efa37146200014c5780636970a92414620001565780636d605fcf146200016f57620000e8565b80630ecaea7314620000ed5780631393916a146200011c5780631852288b1462000135575b600080fd5b62000104620000fe36600462000836565b620001eb565b604051620001139190620008eb565b60405180910390f35b620001336200012d366004620007fd565b620003ad565b005b6200013362000146366004620008aa565b6200045c565b62000104620004ff565b6200016062000523565b6040516200011391906200096d565b620001336200018036600462000864565b62000529565b62000190620006b7565b60405162000113919062000918565b62000104620001b036600462000836565b620006c0565b62000190620001c7366004620007b8565b620006e6565b62000160620006fb565b6200016062000701565b6200010462000707565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d10eb4b985856040518363ffffffff1660e01b81526004016200023e929190620008ff565b602060405180830381600087803b1580156200025957600080fd5b505af11580156200026e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002949190620007de565b9050620002ae6001600160a01b0382161515606d6200072b565b6001600160a01b038481166000908152600160209081526040808320878452909152902054620002e291161560686200072b565b7f0000000000000000000000000000000000000000000000000000000000000000848483600254600354600454600560009054906101000a900460ff166040516200032d9062000794565b6200034098979695949392919062000923565b604051809103906000f0801580156200035d573d6000803e3d6000fd5b506001600160a01b03948516600090815260016020908152604080832096835295905293909320805473ffffffffffffffffffffffffffffffffffffffff19169484169490941790935550919050565b3360009081526020819052604090205460ff16620003fe576040805162461bcd60e51b8152602060048201526009602482015268155395149554d5115160ba1b604482015290519081900360640190fd5b6001600160a01b03821660008181526020818152604091829020805460ff1916851515908117909155825190815291517fe95aec380cae16330d146d5499ef7db6f3657e477104a733e771bc09e500d9869281900390910190a25050565b3360009081526020819052604090205460ff16620004ad576040805162461bcd60e51b8152602060048201526009602482015268155395149554d5115160ba1b604482015290519081900360640190fd5b620004c5670de0b6b3a764000084111560656200072b565b620004dd670de0b6b3a764000083101560666200072b565b6002939093556003919091556004556005805460ff1916911515919091179055565b7f000000000000000000000000000000000000000000000000000000000000000081565b60045481565b3360009081526020819052604090205460ff166200057a576040805162461bcd60e51b8152602060048201526009602482015268155395149554d5115160ba1b604482015290519081900360640190fd5b60405163d10eb4b960e01b81526200063b906000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063d10eb4b990620005d29088908890600401620008ff565b602060405180830381600087803b158015620005ed57600080fd5b505af115801562000602573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620006289190620007de565b6001600160a01b03161415606d6200072b565b6001600160a01b0383811660009081526001602090815260408083208684529091529020546200066f91161560686200072b565b6001600160a01b03928316600090815260016020908152604080832094835293905291909120805473ffffffffffffffffffffffffffffffffffffffff191691909216179055565b60055460ff1681565b60016020908152600092835260408084209091529082529020546001600160a01b031681565b60006020819052908152604090205460ff1681565b60035481565b60025481565b7f000000000000000000000000000000000000000000000000000000000000000081565b816200073c576200073c8162000740565b5050565b62461bcd60e51b600090815260206004526007602452673f534e5323000030600a808404818106603090810160081b95839006959095019082900491820690940160101b939093010160c81b604452606490fd5b6155ef806200099083390190565b80358015158114620007b357600080fd5b919050565b600060208284031215620007ca578081fd5b8135620007d78162000976565b9392505050565b600060208284031215620007f0578081fd5b8151620007d78162000976565b6000806040838503121562000810578081fd5b82356200081d8162000976565b91506200082d60208401620007a2565b90509250929050565b6000806040838503121562000849578182fd5b8235620008568162000976565b946020939093013593505050565b60008060006060848603121562000879578081fd5b8335620008868162000976565b92506020840135915060408401356200089f8162000976565b809150509250925092565b60008060008060808587031215620008c0578081fd5b843593506020850135925060408501359150620008e060608601620007a2565b905092959194509250565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b6001600160a01b03988916815296881660208801526040870195909552929095166060850152608084015260a083019390935260c082019290925290151560e08201526101000190565b90815260200190565b6001600160a01b03811681146200098c57600080fd5b5056fe6102a06040527f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c960e0523480156200003657600080fd5b50604051620055ef380380620055ef833981016040819052620000599162000804565b846001600160a01b03166306fdde036040518163ffffffff1660e01b815260040160006040518083038186803b1580156200009357600080fd5b505afa158015620000a8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620000d2919081019062000898565b604051602001620000e4919062000959565b604051602081830303815290604052856001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b1580156200012d57600080fd5b505afa15801562000142573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200016c919081019062000898565b6040516020016200017e91906200098f565b6040516020818303038152906040528180604051806040016040528060018152602001603160f81b81525084848160039080519060200190620001c392919062000719565b508051620001d990600490602084019062000719565b50506005805460ff19166012179055508151602092830120608052805191012060a05250507f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60c052506040516309b2760f60e01b81526000906001600160a01b038a16906309b2760f90620002559060029060040162000a59565b602060405180830381600087803b1580156200027057600080fd5b505af115801562000285573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002ab9190620007eb565b90506000886001600160a01b031663d4b839926040518163ffffffff1660e01b815260040160206040518083038186803b158015620002e957600080fd5b505afa158015620002fe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003249190620007c5565b6040805160028082526060808301845293945090916020830190803683370190505090506000826001600160a01b0316896001600160a01b0316106200036c5760016200036f565b60005b60ff169050888282815181106200038257fe5b60200260200101906001600160a01b031690816001600160a01b03168152505082828260010381518110620003b357fe5b6001600160a01b03928316602091820292909201015260408051600280825260608201909252918e16916366a9c7d29187918691816020016020820280368337019050506040518463ffffffff1660e01b81526004016200041793929190620009bf565b600060405180830381600087803b1580156200043257600080fd5b505af115801562000447573d6000803e3d6000fd5b5050506001600160601b031960608e901b1661026052506101c0849052815182906000906200047257fe5b60200260200101516001600160a01b03166101e0816001600160a01b031660601b8152505081600181518110620004a557fe5b60200260200101516001600160a01b0316610200816001600160a01b031660601b815250508b6001600160a01b031663d2946c2b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200050457600080fd5b505afa15801562000519573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200053f9190620007c5565b6001600160a01b0316610280816001600160a01b031660601b81525050620005eb60128a6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156200059c57600080fd5b505afa158015620005b1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620005d7919062000936565b60ff166200069960201b62001cf11760201c565b600a0a6102208181525050620006366012846001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156200059c57600080fd5b600a0a61024052610180969096525050506101a091909152610160929092526101405260609390931b6001600160601b031916610100525061012052600b805460ff60301b19166601000000000000921515929092029190911790555062000aba565b6000620006ab838311156001620006b1565b50900390565b81620006c257620006c281620006c6565b5050565b62461bcd60e51b6000908152602060045260076024526642414c23000030600a808404818106603090810160081b95839006959095019082900491820690940160101b939093010160c81b604452606490fd5b828054600181600116156101000203166002900490600052602060002090601f0160209004810192826200075157600085556200079c565b82601f106200076c57805160ff19168380011785556200079c565b828001600101855582156200079c579182015b828111156200079c5782518255916020019190600101906200077f565b50620007aa929150620007ae565b5090565b5b80821115620007aa5760008155600101620007af565b600060208284031215620007d7578081fd5b8151620007e48162000aa1565b9392505050565b600060208284031215620007fd578081fd5b5051919050565b600080600080600080600080610100898b03121562000821578384fd5b88516200082e8162000aa1565b60208a0151909850620008418162000aa1565b60408a015160608b015191985096506200085b8162000aa1565b809550506080890151935060a0890151925060c0890151915060e0890151801515811462000887578182fd5b809150509295985092959890939650565b600060208284031215620008aa578081fd5b81516001600160401b0380821115620008c1578283fd5b818401915084601f830112620008d5578283fd5b815181811115620008e257fe5b604051601f8201601f1916810160200183811182821017156200090157fe5b60405281815283820160200187101562000919578485fd5b6200092c82602083016020870162000a6e565b9695505050505050565b60006020828403121562000948578081fd5b815160ff81168114620007e4578182fd5b60006b029b2b739b29029b830b1b2960a51b825282516200098281600c85016020870162000a6e565b91909101600c0192915050565b60006553504143452d60d01b82528251620009b281600685016020870162000a6e565b9190910160060192915050565b60006060820185835260206060818501528186518084526080860191508288019350845b8181101562000a0a5784516001600160a01b031683529383019391830191600101620009e3565b505084810360408601528551808252908201925081860190845b8181101562000a4b5782516001600160a01b03168552938301939183019160010162000a24565b509298975050505050505050565b602081016003831062000a6857fe5b91905290565b60005b8381101562000a8b57818101518382015260200162000a71565b8381111562000a9b576000848401525b50505050565b6001600160a01b038116811462000ab757600080fd5b50565b60805160a05160c05160e0516101005160601c610120516101405161016051610180516101a0516101c0516101e05160601c6102005160601c61022051610240516102605160601c6102805160601c61492462000ccb60003980610bfa5280611a58525080610de452806112f452508061293f52508061296652505080610e6c5250806107f25280611323525080610a1c5280612a5b52508061164d5280612a355250806108bd52806114205280611b7d5280611c82528061248652806127a952806129fe5250806109aa5280610af75280610b825280610bb65280610ea95280610ed25280611271528061145e52806114b25280611901528061197952806119ed5280611a2152806121a152806121e4528061221f5280612260528061233852806124ea5280612524528061268e52806126c452806126f7528061284d528061288952806128cb528061290a5280612c0e5280612c515280612c8c5280612cd45280612d085280612d915280612de45280612e2f5280612e635280612ef35280612f2c5280612f785280612fc35250806106c95280610853528061089552806113bb52806113f252806117ff5280611ba35280611ca9528061242152806124585280612744528061277b528061299c52806129d35250806104c752806108ef5280610f7452806118655280611bdc52508061169e525080611edd525080611f1f525080611efe52506149246000f3fe608060405234801561001057600080fd5b50600436106102275760003560e01c80636f48303111610130578063a9059cbb116100b8578063d5c096c41161007c578063d5c096c41461047c578063dd62ed3e1461048f578063e86d60bf146104a2578063f3f586e5146104aa578063ffd088eb146104bd57610227565b8063a9059cbb14610433578063b10be73914610446578063b48b5b4014610459578063bdd8a36614610461578063d505accf1461046957610227565b80638d928af8116100ff5780638d928af8146103ea57806395d89b41146103f25780639d2c110c146103fa578063a457c2d71461040d578063a503e6281461042057610227565b80636f4830311461039b57806370a08231146103a357806374f3b009146103b65780637ecebe00146103d757610227565b80633331bc36116101b3578063580702231161018257806358070223146103245780635863056d1461033757806360d1507c1461034d5780636970a924146103735780636b8432391461037b57610227565b80633331bc36146102ec5780633644e5151461030157806338fff2d014610309578063395093511461031157610227565b806318160ddd116101fa57806318160ddd146102945780631dccd8301461029c578063204f83f9146102bc57806323b872dd146102c4578063313ce567146102d757610227565b806303eadcfc1461022c57806306fdde031461024a5780630845d0301461025f578063095ea7b314610274575b600080fd5b6102346104c5565b60405161024191906146a5565b60405180910390f35b6102526104e9565b6040516102419190614825565b61026761057f565b6040516102419190614782565b6102876102823660046140d3565b610586565b6040516102419190614777565b61026761059d565b6102af6102aa366004614299565b6105a3565b604051610241919061473f565b6102676106c7565b6102876102d236600461401e565b6106eb565b6102df610761565b6040516102419190614886565b6102ff6102fa36600461461c565b61076a565b005b6102676107e1565b6102676107f0565b61028761031f3660046140d3565b610814565b610267610332366004614604565b61084f565b61033f6109a8565b604051610241929190614878565b61036061035b366004614604565b6109d2565b604051610241979695949392919061478b565b610267610a1a565b61038e6103893660046141ca565b610a3e565b60405161024191906146b9565b610267610af5565b6102676103b1366004613fca565b610b19565b6103c96103c43660046143de565b610b34565b604051610241929190614752565b6102676103e5366004613fca565b610dc7565b610234610de2565b610252610e06565b61026761040836600461450d565b610e67565b61028761041b3660046140d3565b611143565b61026761042e366004614604565b611181565b6102876104413660046140d3565b6115a4565b6102676104543660046144db565b6115b1565b610267611646565b61026761164b565b6102ff61047736600461405e565b61166f565b6103c961048a3660046143de565b6117df565b61026761049d366004613fe6565b611b50565b610267611b7b565b6102676104b8366004614604565b611b9f565b610267611ceb565b7f000000000000000000000000000000000000000000000000000000000000000081565b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156105755780601f1061054a57610100808354040283529160200191610575565b820191906000526020600020905b81548152906001019060200180831161055857829003601f168201915b5050505050905090565b620f424081565b6000610593338484611d07565b5060015b92915050565b60025490565b6060815167ffffffffffffffff811180156105bd57600080fd5b506040519080825280602002602001820160405280156105e7578160200160208202803683370190505b50905060006105f4611d69565b905060005b83518110156106c05773cBe8c43a6e3bE093489b5b1bfF2E851D01D451f66379eaef82600786848151811061062a57fe5b6020026020010151856040518463ffffffff1660e01b815260040161065193929190614803565b60206040518083038186803b15801561066957600080fd5b505af415801561067d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a191906144f5565b8382815181106106ad57fe5b60209081029190910101526001016105f9565b5050919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000806106f88533611b50565b905061071c336001600160a01b03871614806107145750838210155b61019e611d73565b610727858585611d85565b336001600160a01b0386161480159061074257506000198114155b15610754576107548533858403611d07565b60019150505b9392505050565b60055460ff1690565b610784818310801561077d575060148211155b6064611d73565b60006107996001600080600080600080611e6d565b9050825b828110156107db576000818152600760205260409020546107bd90611ecd565b6107d35760008181526007602052604090208290555b60010161079d565b50505050565b60006107eb611ed9565b905090565b7f000000000000000000000000000000000000000000000000000000000000000090565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909161059391859061084a9086611f97565b611d07565b60007f00000000000000000000000000000000000000000000000000000000000000004210610880575060006109a3565b6109a0670de0b6b3a764000061099a6108e7427f00000000000000000000000000000000000000000000000000000000000000000383026108e1847f0000000000000000000000000000000000000000000000000000000000000000611fa9565b90611fa9565b6109946109857f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663226778496040518163ffffffff1660e01b815260040160206040518083038186803b15801561094657600080fd5b505afa15801561095a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097e91906144f5565b8890611ffa565b670de0b6b3a764000090611fa9565b90612030565b90611cf1565b90505b919050565b7f000000000000000000000000000000000000000000000000000000000000000090600182900390565b60008060008060008060006109ec6014891061013b611d73565b60006109f78961207f565b9050610a0281612091565b959f949e50929c50909a509850965090945092505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6060815167ffffffffffffffff81118015610a5857600080fd5b50604051908082528060200260200182016040528015610a82578160200160208202803683370190505b5090506000610a8f611d69565b9050610a99613e93565b60005b8451811015610aed57848181518110610ab157fe5b60200260200101519150610ace82600001518484602001516120f4565b848281518110610ada57fe5b6020908102919091010152600101610a9c565b505050919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6001600160a01b031660009081526020819052604090205490565b60608088610b5e610b43610de2565b6001600160a01b0316336001600160a01b031614606461218d565b610b72610b696107f0565b8214606761218d565b610b7b8761219b565b610bef86887f000000000000000000000000000000000000000000000000000000000000000081518110610bab57fe5b6020026020010151897f000000000000000000000000000000000000000000000000000000000000000060010381518110610be257fe5b602002602001015161229b565b8415610c2857610c287f0000000000000000000000000000000000000000000000000000000000000000610c23898861241b565b6125e4565b600084806020019051810190610c3e91906144f5565b6040805160028082526060808301845293945090916020830190803683370190505090506000610c6c61059d565b9050610c9f81610c99858d600081518110610c8357fe5b60200260200101516125ee90919063ffffffff16565b90612632565b82600081518110610cac57fe5b602002602001018181525050610ccd81610c99858d600181518110610c8357fe5b82600181518110610cda57fe5b602002602001018181525050610cf08c84612674565b610d2b82600081518110610d0057fe5b60200260200101518b600081518110610d1557fe5b6020026020010151611cf190919063ffffffff16565b8a600081518110610d3857fe5b602002602001018181525050610d6982600181518110610d5457fe5b60200260200101518b600181518110610d1557fe5b8a600181518110610d7657fe5b602002602001018181525050610d8b8a61267e565b610d9482612840565b604080516002808252606082018352849260208301908036833701905050955095505050505b5097509795505050505050565b6001600160a01b031660009081526006602052604090205490565b7f000000000000000000000000000000000000000000000000000000000000000090565b60048054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156105755780601f1061054a57610100808354040283529160200191610575565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031685602001516001600160a01b031614610ed0577f0000000000000000000000000000000000000000000000000000000000000000600114610ef3565b7f0000000000000000000000000000000000000000000000000000000000000000155b90506000610f0082612936565b90506000610f0e8315612936565b9050610f1a868361298a565b9550610f26858261298a565b9450610f30610de2565b6001600160a01b0316336001600160a01b03161415610f7057610f708760a0015184610f5c5786610f5e565b875b85610f695788610f6b565b875b61229b565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f51e181a6040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610fcd57600080fd5b505af1158015610fe1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061100591906144f5565b9050831561103d5761101f61101861059d565b8890611f97565b965061103660085487611ffa90919063ffffffff16565b9550611062565b60085461104b908890611ffa565b965061105f61105861059d565b8790611f97565b95505b60008851600181111561107157fe5b14156110e35761108588606001518461298a565b6060890152836110a457606088015161109e9082611ffa565b60608901525b60006110b88560018b606001518b8b612996565b905084156110cd576110ca8183611fa9565b90505b6110d78184612b77565b9550505050505061075a565b6110f188606001518361298a565b6060890152831561111157606088015161110b9082611ffa565b60608901525b60006111258560008b606001518b8b612996565b905084611139576111368183611fa9565b90505b6110d78185612b8a565b6000806111503385611b50565b905080831061116a5761116533856000611d07565b611177565b6111773385858403611d07565b5060019392505050565b60408051600180825281830190925260009160609190816020015b6111a4613eaa565b81526020019060019003908161119c5790505060408051606081019091529091508060008152602001848152602001610e10815250816000815181106111e657fe5b60209081029190910101526040516301dccd8360e41b81526060903090631dccd830906112179085906004016146fd565b60006040518083038186803b15801561122f57600080fd5b505afa158015611243573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261126b9190810190614366565b905060007f00000000000000000000000000000000000000000000000000000000000000006001146112cb576112c6826000815181106112a757fe5b6020026020010151670de0b6b3a7640000611fa990919063ffffffff16565b6112e1565b816000815181106112d857fe5b60200260200101515b905060006112ee8261084f565b905060607f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f94d46687f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b815260040161135e9190614782565b60006040518083038186803b15801561137657600080fd5b505afa15801561138a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526113b291908101906140fe565b509150506000427f0000000000000000000000000000000000000000000000000000000000000000116113e6576000611414565b670de0b6b3a7640000427f000000000000000000000000000000000000000000000000000000000000000003025b9050600061144a6114457f000000000000000000000000000000000000000000000000000000000000000084611ffa565b612b96565b905060006114f76114a083610994600854887f00000000000000000000000000000000000000000000000000000000000000006001038151811061148a57fe5b6020026020010151611ffa90919063ffffffff16565b6114f1846109946114af61059d565b897f0000000000000000000000000000000000000000000000000000000000000000815181106114db57fe5b6020026020010151611f9790919063ffffffff16565b90611f97565b90506000611535611510670de0b6b3a764000085611fa9565b61099461152e670de0b6b3a76400006114f16109858985848f611f97565b8590611fa9565b9050600061156161155a611551670de0b6b3a76400008a611f97565b60085490611ffa565b8390611fa9565b905061159461156e61059d565b6108e161158d8b61158761158061059d565b8890611cf1565b90611ffa565b8490611f97565b9c9b505050505050505050505050565b6000610593338484611d85565b600073cBe8c43a6e3bE093489b5b1bfF2E851D01D451f6630397bee06007846115d8611d69565b6040518463ffffffff1660e01b81526004016115f6939291906147bb565b60206040518083038186803b15801561160e57600080fd5b505af4158015611622573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109a091906144f5565b601490565b7f000000000000000000000000000000000000000000000000000000000000000081565b61167d8442111560d1611d73565b6001600160a01b0380881660008181526006602090815260408083205481517f00000000000000000000000000000000000000000000000000000000000000008185015280830195909552948b166060850152608084018a905260a0840185905260c08085018a90528151808603909101815260e0909401905282519201919091209061170982612bbc565b9050600060018288888860405160008152602001604052604051808581526020018460ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa158015611767573d6000803e3d6000fd5b5050604051601f19015191506117a990506001600160a01b038216158015906117a157508b6001600160a01b0316826001600160a01b0316145b6101f8611d73565b6001600160a01b038b1660009081526006602052604090206001850190556117d28b8b8b611d07565b5050505050505050505050565b606080886117ee610b43610de2565b6117f9610b696107f0565b611827427f00000000000000000000000000000000000000000000000000000000000000001015606961218d565b606060008580602001905181019061183f9190614399565b9150915061184c8961219b565b6118558261219b565b61185d61059d565b6119e65760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f51e181a6040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156118be57600080fd5b505af11580156118d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118f691906144f5565b9050600061192d82857f00000000000000000000000000000000000000000000000000000000000000006001038151811061148a57fe5b905061193d6000620f42406125e4565b600061194c82620f4240611cf1565b90506119588d826125e4565b61196684821015606c61218d565b61196f85612c08565b82600881905550847f0000000000000000000000000000000000000000000000000000000000000000815181106119a257fe5b602002602001016000815250849b506119ba8c61267e565b604080516002808252606082018352879260208301908036833701905050975097505050505050610dba565b611a4d888a7f000000000000000000000000000000000000000000000000000000000000000081518110611a1657fe5b60200260200101518b7f000000000000000000000000000000000000000000000000000000000000000060010381518110610be257fe5b8615611a8157611a817f0000000000000000000000000000000000000000000000000000000000000000610c238b8a61241b565b60006060611a8f848c612cca565b91509150611aa183831015606c61218d565b611aab8c836125e4565b80600081518110611ab857fe5b60200260200101518b600081518110611acd57fe5b60200260200101818151019150818152505080600181518110611aec57fe5b60200260200101518b600181518110611b0157fe5b602002602001018181510191508181525050611b1c8b61267e565b611b2581612c08565b6040805160028082526060820183528392602083019080368337019050509650965050505050610dba565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b7f000000000000000000000000000000000000000000000000000000000000000081565b60007f00000000000000000000000000000000000000000000000000000000000000004210611bd75750670de0b6b3a76400006109a3565b6109a07f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663226778496040518163ffffffff1660e01b815260040160206040518083038186803b158015611c3357600080fd5b505afa158015611c47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c6b91906144f5565b6108e1610985611cd9611ca6670de0b6b3a76400007f0000000000000000000000000000000000000000000000000000000000000000611fa9565b427f000000000000000000000000000000000000000000000000000000000000000003670de0b6b3a76400000290611fa9565b61099487670de0b6b3a7640000611f97565b615da890565b6000611d01838311156001611d73565b50900390565b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b600b5461ffff1690565b81611d8157611d8181613012565b5050565b611d9c6001600160a01b0384161515610198611d73565b611db36001600160a01b0383161515610199611d73565b611dbe838383612416565b6001600160a01b038316600090815260208190526040902054611de490826101a0613065565b6001600160a01b038085166000908152602081905260408082209390935590841681522054611e139082611f97565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b6000611e79828261307b565b611e8484601f61307f565b611e8f866054613090565b611e9a88606a61307f565b611ea58a609f613090565b611eb08c60b561307f565b611ebb8e60ea613090565b17171717171798975050505050505050565b60006109a0828261309d565b60007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611f466130a7565b3060405160200180868152602001858152602001848152602001838152602001826001600160a01b031681526020019550505050505060405160208183030381529060405280519060200120905090565b600082820161075a8482101583611d73565b6000611fb88215156004611d73565b82611fc557506000610597565b670de0b6b3a764000083810290611fe890858381611fdf57fe5b04146005611d73565b828181611ff157fe5b04915050610597565b600082820261201e84158061201757508385838161201457fe5b04145b6003611d73565b670de0b6b3a764000090049392505050565b60008061203d84846130ab565b90506000612057612050836127106125ee565b6001611f97565b90508082101561206c57600092505050610597565b6120768282611cf1565b92505050610597565b60009081526007602052604090205490565b60008060008060008060006120a5886131b6565b96506120b0886131c3565b95506120bb886131d0565b94506120c6886131dd565b93506120d1886131ea565b92506120dc886131f7565b91506120e788611ecd565b9050919395979092949650565b6040516334171a8560e01b815260009073cBe8c43a6e3bE093489b5b1bfF2E851D01D451f6906334171a8590612135906007908890889088906004016147dd565b60206040518083038186803b15801561214d57600080fd5b505af4158015612161573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061218591906144f5565b949350505050565b81611d8157611d8181613204565b6121e1817f0000000000000000000000000000000000000000000000000000000000000000815181106121ca57fe5b60200260200101516121dc6001612936565b613258565b817f00000000000000000000000000000000000000000000000000000000000000008151811061220d57fe5b60200260200101818152505061225d817f00000000000000000000000000000000000000000000000000000000000000006001038151811061224b57fe5b60200260200101516121dc6000612936565b817f00000000000000000000000000000000000000000000000000000000000000006001038151811061228c57fe5b60200260200101818152505050565b600b546601000000000000900460ff1680156122b657508243115b80156122c95750662386f26fc100008110155b156124165760006122fa6122e860085484611ffa90919063ffffffff16565b6108e16122f361059d565b8690611f97565b9050670de0b6b3a764000081106123225761231d81670de0b6b3a7640000611cf1565b612325565b60005b9050600061233282611b9f565b905060007f0000000000000000000000000000000000000000000000000000000000000000156123625781612374565b612374670de0b6b3a764000083611fa9565b600b549091506000906123d99063ffffffff620100008204169061ffff1661239b85613272565b620f424088106123b3576123ae88613272565b6123bf565b6123bf620f4240613272565b600b546701000000000000009004601890810b900b6132b2565b600b5490915061ffff16811461241157600b805465ffffffff00001916620100004263ffffffff16021761ffff191661ffff83161790555b505050505b505050565b600080427f00000000000000000000000000000000000000000000000000000000000000001161244c57600061247a565b670de0b6b3a7640000427f000000000000000000000000000000000000000000000000000000000000000003025b905060006124ab6114457f000000000000000000000000000000000000000000000000000000000000000084611ffa565b905060006124d46124c783600a5461203090919063ffffffff16565b6009546114f19085612030565b90506000612513836109946124e761059d565b8a7f0000000000000000000000000000000000000000000000000000000000000000815181106114db57fe5b90506000612550846109946008548b7f00000000000000000000000000000000000000000000000000000000000000006001038151811061148a57fe5b9050600061255e8383611f97565b90508381116125765760009650505050505050610597565b600061259761258d670de0b6b3a764000088611fa9565b6109948488611fa9565b905060006125bb826108e16125b482670de0b6b3a7640000611cf1565b8d90611ffa565b90506125d56125c982612b96565b6108e18361158761059d565b9b9a5050505050505050505050565b611d81828261330a565b600082820261260884158061201757508385838161201457fe5b80612617576000915050610597565b670de0b6b3a764000060001982015b04600101915050610597565b60006126418215156004611d73565b8261264e57506000610597565b670de0b6b3a76400008381029061266890858381611fdf57fe5b82600182038161262657fe5b611d81828261339f565b60006126b761268b61059d565b837f0000000000000000000000000000000000000000000000000000000000000000815181106114db57fe5b905060006126f0600854847f00000000000000000000000000000000000000000000000000000000000000006001038151811061148a57fe5b90506000807f000000000000000000000000000000000000000000000000000000000000000061272457508290508161272a565b50819050825b600b546601000000000000900460ff1615612832576000427f00000000000000000000000000000000000000000000000000000000000000001161276f57600061279d565b670de0b6b3a7640000427f000000000000000000000000000000000000000000000000000000000000000003025b905060006127ce6114457f000000000000000000000000000000000000000000000000000000000000000084611ffa565b90506127ef6127ea6127e08584612030565b6114f18785612030565b613272565b600b805460189290920b78ffffffffffffffffffffffffffffffffffffffffffffffffff166701000000000000000266ffffffffffffff90921691909117905550505b600991909155600a55505050565b61284a6001612936565b817f00000000000000000000000000000000000000000000000000000000000000008151811061287657fe5b60200260200101518161288557fe5b04817f0000000000000000000000000000000000000000000000000000000000000000815181106128b257fe5b6020026020010181815250506128c86000612936565b817f0000000000000000000000000000000000000000000000000000000000000000600103815181106128f757fe5b60200260200101518161290657fe5b04817f00000000000000000000000000000000000000000000000000000000000000006001038151811061228c57fe5b600081612963577f00000000000000000000000000000000000000000000000000000000000000006109a0565b507f0000000000000000000000000000000000000000000000000000000000000000919050565b600061075a8383613258565b600080427f0000000000000000000000000000000000000000000000000000000000000000116129c75760006129f5565b670de0b6b3a7640000427f000000000000000000000000000000000000000000000000000000000000000003025b90506000612a237f000000000000000000000000000000000000000000000000000000000000000083611ffa565b90506000612a81611445838b612a59577f0000000000000000000000000000000000000000000000000000000000000000612a7b565b7f00000000000000000000000000000000000000000000000000000000000000005b906125ee565b90506000612a8f8783613456565b90506000612a9d8784613456565b905060008a612ab557612ab0888b611cf1565b612ab9565b8989015b90506000612ac78286612030565b90506000612af4612ae0670de0b6b3a764000088611fa9565b612aee8461099a8989611f97565b90613456565b9050612b0c8d1580612b055750818b115b606a61218d565b8c15612b4857612b2f8e612b235781841115612b28565b818410155b606b61218d565b612b398a82611cf1565b98505050505050505050612b6e565b612b648e612b595783821115612b28565b83821015606b61218d565b612b39818c611cf1565b95945050505050565b6000818381612b8257fe5b049392505050565b600061075a8383613482565b6000670de0b6b3a76400008210612bae5760006109a0565b50670de0b6b3a76400000390565b6000612bc6611ed9565b82604051602001808061190160f01b81525060020183815260200182815260200192505050604051602081830303815290604052805190602001209050919050565b612c4e817f000000000000000000000000000000000000000000000000000000000000000081518110612c3757fe5b6020026020010151612c496001612936565b613482565b817f000000000000000000000000000000000000000000000000000000000000000081518110612c7a57fe5b60200260200101818152505061225d817f000000000000000000000000000000000000000000000000000000000000000060010381518110612cb857fe5b6020026020010151612c496000612936565b60006060600080847f000000000000000000000000000000000000000000000000000000000000000081518110612cfd57fe5b6020026020010151857f000000000000000000000000000000000000000000000000000000000000000060010381518110612d3457fe5b6020026020010151915091506060600267ffffffffffffffff81118015612d5a57600080fd5b50604051908082528060200260200182016040528015612d84578160200160208202803683370190505b50905082612e29576000877f000000000000000000000000000000000000000000000000000000000000000060010381518110612dbd57fe5b602002602001015190506000612dde60085483611ffa90919063ffffffff16565b905081837f000000000000000000000000000000000000000000000000000000000000000060010381518110612e1057fe5b6020908102919091010152955090935061300b92505050565b600080887f000000000000000000000000000000000000000000000000000000000000000081518110612e5857fe5b6020026020010151897f000000000000000000000000000000000000000000000000000000000000000060010381518110612e8f57fe5b6020026020010151915091506000612ea561059d565b9050600085612eb48385613258565b81612ebb57fe5b049050600087612ecb8487613258565b81612ed257fe5b04905080821015612f745786612ee88986613258565b81612eef57fe5b04867f000000000000000000000000000000000000000000000000000000000000000081518110612f1c57fe5b60200260200101818152505083867f000000000000000000000000000000000000000000000000000000000000000060010381518110612f5857fe5b602090810291909101015250975092955061300b945050505050565b84867f000000000000000000000000000000000000000000000000000000000000000081518110612fa157fe5b60200260200101818152505087612fb88887613258565b81612fbf57fe5b04867f000000000000000000000000000000000000000000000000000000000000000060010381518110612fef57fe5b6020908102919091010152985093965061300b95505050505050565b9250929050565b62461bcd60e51b6000908152602060045260076024526642414c23000030600a808404818106603090810160081b95839006959095019082900491820690940160101b939093010160c81b604452606490fd5b60006130748484111583611d73565b5050900390565b1b90565b661fffffffffffff91909116901b90565b623fffff91909116901b90565b1c637fffffff1690565b4690565b6000816130c15750670de0b6b3a7640000610597565b826130ce57506000610597565b6130df600160ff1b84106006611d73565b82613105770bce5086492111aea88f4bb1ca6bcf584181ea8059f7653284106007611d73565b826000670c7d713b49da0000831380156131265750670f43fc2c04ee000083125b1561315d576000613136846134b5565b9050670de0b6b3a764000080820784020583670de0b6b3a76400008305020191505061316b565b81613167846135dc565b0290505b670de0b6b3a764000090056131a3680238fd42c5cf03ffff19821280159061319c575068070c1cc73b00c800008213155b6008611d73565b6131ac8161397c565b9695505050505050565b60006109a08260ea613d5a565b60006109a08260b5613d81565b60006109a082609f613d5a565b60006109a082606a613d81565b60006109a0826054613d5a565b60006109a082601f613d81565b62461bcd60e51b600090815260206004526007602452673f534e5323000030600a808404818106603090810160081b95839006959095019082900491820690940160101b939093010160c81b604452606490fd5b600082820261075a84158061201757508385838161201457fe5b60008061327e83613db4565b9050600080821361329757652d79883d200082036132a1565b652d79883d200082015b655af3107a40009005949350505050565b6000806132ce858585426132c58b61207f565b93929190613e10565b90506104b0428890031015806132e457866132ed565b6132ed87613e70565b600081815260076020526040902092909255509695505050505050565b61331660008383612416565b6002546133239082611f97565b6002556001600160a01b0382166000908152602081905260409020546133499082611f97565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6133b66001600160a01b038316151561019b611d73565b6133c282600083612416565b6001600160a01b0382166000908152602081905260409020546133e890826101a1613065565b6001600160a01b03831660009081526020819052604090205560025461340e9082613e7d565b6002556040805182815290516000916001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b60008061346384846130ab565b90506000613476612050836127106125ee565b9050612b6e8282611f97565b60006134918215156004611d73565b8261349e57506000610597565b8160018403816134aa57fe5b046001019050610597565b670de0b6b3a7640000026000806ec097ce7bc90715b34b9f1000000000808401906ec097ce7bc90715b34b9f0fffffffff19850102816134f157fe5b05905060006ec097ce7bc90715b34b9f100000000082800205905081806ec097ce7bc90715b34b9f100000000081840205915060038205016ec097ce7bc90715b34b9f100000000082840205915060058205016ec097ce7bc90715b34b9f100000000082840205915060078205016ec097ce7bc90715b34b9f100000000082840205915060098205016ec097ce7bc90715b34b9f1000000000828402059150600b8205016ec097ce7bc90715b34b9f1000000000828402059150600d8205016ec097ce7bc90715b34b9f1000000000828402059150600f826002919005919091010295945050505050565b6000670de0b6b3a76400008212156136195761360f826ec097ce7bc90715b34b9f10000000008161360957fe5b056135dc565b60000390506109a3565b60007e1600ef3172e58d2e933ec884fde10064c63b5372d805e203c0000000000000831261366a57770195e54c5dd42177f53a27172fa9ec630262827000000000830592506806f05b59d3b2000000015b73011798004d755d3c8bc8e03204cf44619e00000083126136a2576b1425982cf597cd205cef7380830592506803782dace9d9000000015b606492830292026e01855144814a7ff805980ff008400083126136ea576e01855144814a7ff805980ff008400068056bc75e2d63100000840205925068ad78ebc5ac62000000015b6b02df0ab5a80a22c61ab5a7008312613725576b02df0ab5a80a22c61ab5a70068056bc75e2d6310000084020592506856bc75e2d631000000015b693f1fce3da636ea5cf850831261375c57693f1fce3da636ea5cf85068056bc75e2d631000008402059250682b5e3af16b18800000015b690127fa27722cc06cc5e2831261379357690127fa27722cc06cc5e268056bc75e2d6310000084020592506815af1d78b58c400000015b68280e60114edb805d0383126137c85768280e60114edb805d0368056bc75e2d631000008402059250680ad78ebc5ac6200000015b680ebc5fb4174612111083126137f357680ebc5fb4174612111068056bc75e2d631000009384020592015b6808f00f760a4b2db55d8312613828576808f00f760a4b2db55d68056bc75e2d6310000084020592506802b5e3af16b1880000015b6806f5f1775788937937831261385d576806f5f177578893793768056bc75e2d63100000840205925068015af1d78b58c40000015b6806248f33704b2866038312613891576806248f33704b28660368056bc75e2d63100000840205925067ad78ebc5ac620000015b6805c548670b9510e7ac83126138c5576805c548670b9510e7ac68056bc75e2d6310000084020592506756bc75e2d6310000015b600068056bc75e2d63100000840168056bc75e2d6310000080860302816138e857fe5b059050600068056bc75e2d63100000828002059050818068056bc75e2d63100000818402059150600382050168056bc75e2d63100000828402059150600582050168056bc75e2d63100000828402059150600782050168056bc75e2d63100000828402059150600982050168056bc75e2d63100000828402059150600b820501600202606485820105979650505050505050565b60006139ab680238fd42c5cf03ffff1983121580156139a4575068070c1cc73b00c800008313155b6009611d73565b60008212156139df576139c08260000361397c565b6ec097ce7bc90715b34b9f1000000000816139d757fe5b0590506109a3565b60006806f05b59d3b20000008312613a1f57506806f05b59d3b1ffffff1990910190770195e54c5dd42177f53a27172fa9ec630262827000000000613a55565b6803782dace9d90000008312613a5157506803782dace9d8ffffff19909101906b1425982cf597cd205cef7380613a55565b5060015b6064929092029168056bc75e2d6310000068ad78ebc5ac620000008412613aa55768ad78ebc5ac61ffffff199093019268056bc75e2d631000006e01855144814a7ff805980ff008400082020590505b6856bc75e2d6310000008412613ae1576856bc75e2d630ffffff199093019268056bc75e2d631000006b02df0ab5a80a22c61ab5a70082020590505b682b5e3af16b188000008412613b1b57682b5e3af16b187fffff199093019268056bc75e2d63100000693f1fce3da636ea5cf85082020590505b6815af1d78b58c4000008412613b55576815af1d78b58c3fffff199093019268056bc75e2d63100000690127fa27722cc06cc5e282020590505b680ad78ebc5ac62000008412613b8e57680ad78ebc5ac61fffff199093019268056bc75e2d6310000068280e60114edb805d0382020590505b68056bc75e2d631000008412613bc75768056bc75e2d630fffff199093019268056bc75e2d63100000680ebc5fb4174612111082020590505b6802b5e3af16b18800008412613c00576802b5e3af16b187ffff199093019268056bc75e2d631000006808f00f760a4b2db55d82020590505b68015af1d78b58c400008412613c395768015af1d78b58c3ffff199093019268056bc75e2d631000006806f5f177578893793782020590505b68056bc75e2d631000008481019085906002908280020505918201919050600368056bc75e2d631000008783020505918201919050600468056bc75e2d631000008783020505918201919050600568056bc75e2d631000008783020505918201919050600668056bc75e2d631000008783020505918201919050600768056bc75e2d631000008783020505918201919050600868056bc75e2d631000008783020505918201919050600968056bc75e2d631000008783020505918201919050600a68056bc75e2d631000008783020505918201919050600b68056bc75e2d631000008783020505918201919050600c68056bc75e2d631000008783020505918201919050606468056bc75e2d63100000848402058502059695505050505050565b600082821c623fffff16621fffff8113613d745780612185565b623fffff19179392505050565b600082821c661fffffffffffff16660fffffffffffff8113613da35780612185565b661fffffffffffff19179392505050565b6000613dc4600083136064611d73565b670c7d713b49da000082138015613de25750670f43fc2c04ee000082125b15613e0057670de0b6b3a7640000613df9836134b5565b816139d757fe5b613e09826135dc565b90506109a3565b600080613e1c87611ecd565b830390506000818702613e2e896131c3565b0190506000828702613e3f8a6131dd565b0190506000838702613e508b6131f7565b019050613e6289848a858b868c611e6d565b9a9950505050505050505050565b60006109a0826001613e8b565b600061075a83836001613065565b601491010690565b604080518082019091526000808252602082015290565b6040805160608101909152806000815260200160008152602001600081525090565b80356109a3816148d6565b600082601f830112613ee7578081fd5b8151613efa613ef5826148b8565b614894565b818152915060208083019084810181840286018201871015613f1b57600080fd5b60005b84811015613f3a57815184529282019290820190600101613f1e565b505050505092915050565b600082601f830112613f55578081fd5b813567ffffffffffffffff811115613f6957fe5b613f7c601f8201601f1916602001614894565b9150808252836020828501011115613f9357600080fd5b8060208401602084013760009082016020015292915050565b8035600281106109a357600080fd5b8035600381106109a357600080fd5b600060208284031215613fdb578081fd5b813561075a816148d6565b60008060408385031215613ff8578081fd5b8235614003816148d6565b91506020830135614013816148d6565b809150509250929050565b600080600060608486031215614032578081fd5b833561403d816148d6565b9250602084013561404d816148d6565b929592945050506040919091013590565b600080600080600080600060e0888a031215614078578485fd5b8735614083816148d6565b96506020880135614093816148d6565b95506040880135945060608801359350608088013560ff811681146140b6578384fd5b9699959850939692959460a0840135945060c09093013592915050565b600080604083850312156140e5578182fd5b82356140f0816148d6565b946020939093013593505050565b600080600060608486031215614112578081fd5b835167ffffffffffffffff80821115614129578283fd5b818601915086601f83011261413c578283fd5b815161414a613ef5826148b8565b80828252602080830192508086018b82838702890101111561416a578788fd5b8796505b84871015614195578051614181816148d6565b84526001969096019592810192810161416e565b5089015190975093505050808211156141ac578283fd5b506141b986828701613ed7565b925050604084015190509250925092565b600060208083850312156141dc578182fd5b823567ffffffffffffffff808211156141f3578384fd5b818501915085601f830112614206578384fd5b8135614214613ef5826148b8565b818152848101908486016040808502870188018b1015614232578889fd5b8896505b8487101561428a5780828c03121561424c578889fd5b8051818101818110888211171561425f57fe5b825261426a83613fbb565b815282890135898201528452600196909601959287019290810190614236565b50909998505050505050505050565b600060208083850312156142ab578182fd5b823567ffffffffffffffff808211156142c2578384fd5b818501915085601f8301126142d5578384fd5b81356142e3613ef5826148b8565b818152848101908486016060808502870188018b1015614301578889fd5b8896505b8487101561428a5780828c03121561431b578889fd5b60408051828101818110898211171561433057fe5b825261433b84613fbb565b8152838a01358a82015281840135918101919091528452600196909601959287019290810190614305565b600060208284031215614377578081fd5b815167ffffffffffffffff81111561438d578182fd5b61218584828501613ed7565b600080604083850312156143ab578182fd5b825167ffffffffffffffff8111156143c1578283fd5b6143cd85828601613ed7565b925050602083015190509250929050565b600080600080600080600060e0888a0312156143f8578081fd5b8735965060208089013561440b816148d6565b9650604089013561441b816148d6565b9550606089013567ffffffffffffffff80821115614437578384fd5b818b0191508b601f83011261444a578384fd5b8135614458613ef5826148b8565b8082825285820191508585018f878886028801011115614476578788fd5b8795505b8386101561449857803583526001959095019491860191860161447a565b509850505060808b0135955060a08b0135945060c08b01359250808311156144be578384fd5b50506144cc8a828b01613f45565b91505092959891949750929550565b6000602082840312156144ec578081fd5b61075a82613fbb565b600060208284031215614506578081fd5b5051919050565b600080600060608486031215614521578081fd5b833567ffffffffffffffff80821115614538578283fd5b818601915061012080838903121561454e578384fd5b61455781614894565b905061456283613fac565b815261457060208401613ecc565b602082015261458160408401613ecc565b6040820152606083013560608201526080830135608082015260a083013560a08201526145b060c08401613ecc565b60c08201526145c160e08401613ecc565b60e082015261010080840135838111156145d9578586fd5b6145e58a828701613f45565b9183019190915250976020870135975060409096013595945050505050565b600060208284031215614615578081fd5b5035919050565b6000806040838503121561462e578182fd5b50508035926020909101359150565b6000815180845260208085019450808401835b8381101561466c57815187529582019590820190600101614650565b509495945050505050565b6003811061468157fe5b9052565b614690828251614677565b60208181015190830152604090810151910152565b6001600160a01b0391909116815260200190565b6020808252825182820181905260009190848201906040850190845b818110156146f1578351835292840192918401916001016146d5565b50909695505050505050565b6020808252825182820181905260009190848201906040850190845b818110156146f15761472c838551614685565b9284019260609290920191600101614719565b60006020825261075a602083018461463d565b600060408252614765604083018561463d565b8281036020840152612b6e818561463d565b901515815260200190565b90815260200190565b968752602087019590955260408601939093526060850191909152608084015260a083015260c082015260e00190565b838152606081016147cf6020830185614677565b826040830152949350505050565b848152608081016147f16020830186614677565b60408201939093526060015292915050565b83815260a081016148176020830185614685565b826080830152949350505050565b6000602080835283518082850152825b8181101561485157858101830151858201604001528201614835565b818111156148625783604083870101525b50601f01601f1916929092016040019392505050565b918252602082015260400190565b60ff91909116815260200190565b60405181810167ffffffffffffffff811182821017156148b057fe5b604052919050565b600067ffffffffffffffff8211156148cc57fe5b5060209081020190565b6001600160a01b03811681146148eb57600080fd5b5056fea26469706673582212202a24ae2c04026307dd07d61bb838621230425fa12313ad62daef112aa7fb087164736f6c63430007050033a2646970667358221220d729be55272d3a4a8b54dd157a7d603815420f77734bee7b677c7d714f4fff3f64736f6c63430007050033",
  "deployedBytecode": "$ca06ebe0e37df84d33a229baa7963d6fc2$__6379eaef82600786848151811061062a57fe5b6020026020010151856040518463ffffffff1660e01b815260040161065193929190614803565b60206040518083038186803b15801561066957600080fd5b505af415801561067d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a191906144f5565b8382815181106106ad57fe5b60209081029190910101526001016105f9565b5050919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000806106f88533611b50565b905061071c336001600160a01b03871614806107145750838210155b61019e611d73565b610727858585611d85565b336001600160a01b0386161480159061074257506000198114155b15610754576107548533858403611d07565b60019150505b9392505050565b60055460ff1690565b610784818310801561077d575060148211155b6064611d73565b60006107996001600080600080600080611e6d565b9050825b828110156107db576000818152600760205260409020546107bd90611ecd565b6107d35760008181526007602052604090208290555b60010161079d565b50505050565b60006107eb611ed9565b905090565b7f000000000000000000000000000000000000000000000000000000000000000090565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909161059391859061084a9086611f97565b611d07565b60007f00000000000000000000000000000000000000000000000000000000000000004210610880575060006109a3565b6109a0670de0b6b3a764000061099a6108e7427f00000000000000000000000000000000000000000000000000000000000000000383026108e1847f0000000000000000000000000000000000000000000000000000000000000000611fa9565b90611fa9565b6109946109857f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663226778496040518163ffffffff1660e01b815260040160206040518083038186803b15801561094657600080fd5b505afa15801561095a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097e91906144f5565b8890611ffa565b670de0b6b3a764000090611fa9565b90612030565b90611cf1565b90505b919050565b7f000000000000000000000000000000000000000000000000000000000000000090600182900390565b60008060008060008060006109ec6014891061013b611d73565b60006109f78961207f565b9050610a0281612091565b959f949e50929c50909a509850965090945092505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6060815167ffffffffffffffff81118015610a5857600080fd5b50604051908082528060200260200182016040528015610a82578160200160208202803683370190505b5090506000610a8f611d69565b9050610a99613e93565b60005b8451811015610aed57848181518110610ab157fe5b60200260200101519150610ace82600001518484602001516120f4565b848281518110610ada57fe5b6020908102919091010152600101610a9c565b505050919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6001600160a01b031660009081526020819052604090205490565b60608088610b5e610b43610de2565b6001600160a01b0316336001600160a01b031614606461218d565b610b72610b696107f0565b8214606761218d565b610b7b8761219b565b610bef86887f000000000000000000000000000000000000000000000000000000000000000081518110610bab57fe5b6020026020010151897f000000000000000000000000000000000000000000000000000000000000000060010381518110610be257fe5b602002602001015161229b565b8415610c2857610c287f0000000000000000000000000000000000000000000000000000000000000000610c23898861241b565b6125e4565b600084806020019051810190610c3e91906144f5565b6040805160028082526060808301845293945090916020830190803683370190505090506000610c6c61059d565b9050610c9f81610c99858d600081518110610c8357fe5b60200260200101516125ee90919063ffffffff16565b90612632565b82600081518110610cac57fe5b602002602001018181525050610ccd81610c99858d600181518110610c8357fe5b82600181518110610cda57fe5b602002602001018181525050610cf08c84612674565b610d2b82600081518110610d0057fe5b60200260200101518b600081518110610d1557fe5b6020026020010151611cf190919063ffffffff16565b8a600081518110610d3857fe5b602002602001018181525050610d6982600181518110610d5457fe5b60200260200101518b600181518110610d1557fe5b8a600181518110610d7657fe5b602002602001018181525050610d8b8a61267e565b610d9482612840565b604080516002808252606082018352849260208301908036833701905050955095505050505b5097509795505050505050565b6001600160a01b031660009081526006602052604090205490565b7f000000000000000000000000000000000000000000000000000000000000000090565b60048054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156105755780601f1061054a57610100808354040283529160200191610575565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031685602001516001600160a01b031614610ed0577f0000000000000000000000000000000000000000000000000000000000000000600114610ef3565b7f0000000000000000000000000000000000000000000000000000000000000000155b90506000610f0082612936565b90506000610f0e8315612936565b9050610f1a868361298a565b9550610f26858261298a565b9450610f30610de2565b6001600160a01b0316336001600160a01b03161415610f7057610f708760a0015184610f5c5786610f5e565b875b85610f695788610f6b565b875b61229b565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f51e181a6040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610fcd57600080fd5b505af1158015610fe1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061100591906144f5565b9050831561103d5761101f61101861059d565b8890611f97565b965061103660085487611ffa90919063ffffffff16565b9550611062565b60085461104b908890611ffa565b965061105f61105861059d565b8790611f97565b95505b60008851600181111561107157fe5b14156110e35761108588606001518461298a565b6060890152836110a457606088015161109e9082611ffa565b60608901525b60006110b88560018b606001518b8b612996565b905084156110cd576110ca8183611fa9565b90505b6110d78184612b77565b9550505050505061075a565b6110f188606001518361298a565b6060890152831561111157606088015161110b9082611ffa565b60608901525b60006111258560008b606001518b8b612996565b905084611139576111368183611fa9565b90505b6110d78185612b8a565b6000806111503385611b50565b905080831061116a5761116533856000611d07565b611177565b6111773385858403611d07565b5060019392505050565b60408051600180825281830190925260009160609190816020015b6111a4613eaa565b81526020019060019003908161119c5790505060408051606081019091529091508060008152602001848152602001610e10815250816000815181106111e657fe5b60209081029190910101526040516301dccd8360e41b81526060903090631dccd830906112179085906004016146fd565b60006040518083038186803b15801561122f57600080fd5b505afa158015611243573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261126b9190810190614366565b905060007f00000000000000000000000000000000000000000000000000000000000000006001146112cb576112c6826000815181106112a757fe5b6020026020010151670de0b6b3a7640000611fa990919063ffffffff16565b6112e1565b816000815181106112d857fe5b60200260200101515b905060006112ee8261084f565b905060607f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f94d46687f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b815260040161135e9190614782565b60006040518083038186803b15801561137657600080fd5b505afa15801561138a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526113b291908101906140fe565b509150506000427f0000000000000000000000000000000000000000000000000000000000000000116113e6576000611414565b670de0b6b3a7640000427f000000000000000000000000000000000000000000000000000000000000000003025b9050600061144a6114457f000000000000000000000000000000000000000000000000000000000000000084611ffa565b612b96565b905060006114f76114a083610994600854887f00000000000000000000000000000000000000000000000000000000000000006001038151811061148a57fe5b6020026020010151611ffa90919063ffffffff16565b6114f1846109946114af61059d565b897f0000000000000000000000000000000000000000000000000000000000000000815181106114db57fe5b6020026020010151611f9790919063ffffffff16565b90611f97565b90506000611535611510670de0b6b3a764000085611fa9565b61099461152e670de0b6b3a76400006114f16109858985848f611f97565b8590611fa9565b9050600061156161155a611551670de0b6b3a76400008a611f97565b60085490611ffa565b8390611fa9565b905061159461156e61059d565b6108e161158d8b61158761158061059d565b8890611cf1565b90611ffa565b8490611f97565b9c9b505050505050505050505050565b6000610593338484611d85565b600073__$ca06ebe0e37df84d33a229baa7963d6fc2$__630397bee06007846115d8611d69565b6040518463ffffffff1660e01b81526004016115f6939291906147bb565b60206040518083038186803b15801561160e57600080fd5b505af4158015611622573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109a091906144f5565b601490565b7f000000000000000000000000000000000000000000000000000000000000000081565b61167d8442111560d1611d73565b6001600160a01b0380881660008181526006602090815260408083205481517f00000000000000000000000000000000000000000000000000000000000000008185015280830195909552948b166060850152608084018a905260a0840185905260c08085018a90528151808603909101815260e0909401905282519201919091209061170982612bbc565b9050600060018288888860405160008152602001604052604051808581526020018460ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa158015611767573d6000803e3d6000fd5b5050604051601f19015191506117a990506001600160a01b038216158015906117a157508b6001600160a01b0316826001600160a01b0316145b6101f8611d73565b6001600160a01b038b1660009081526006602052604090206001850190556117d28b8b8b611d07565b5050505050505050505050565b606080886117ee610b43610de2565b6117f9610b696107f0565b611827427f00000000000000000000000000000000000000000000000000000000000000001015606961218d565b606060008580602001905181019061183f9190614399565b9150915061184c8961219b565b6118558261219b565b61185d61059d565b6119e65760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f51e181a6040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156118be57600080fd5b505af11580156118d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118f691906144f5565b9050600061192d82857f00000000000000000000000000000000000000000000000000000000000000006001038151811061148a57fe5b905061193d6000620f42406125e4565b600061194c82620f4240611cf1565b90506119588d826125e4565b61196684821015606c61218d565b61196f85612c08565b82600881905550847f0000000000000000000000000000000000000000000000000000000000000000815181106119a257fe5b602002602001016000815250849b506119ba8c61267e565b604080516002808252606082018352879260208301908036833701905050975097505050505050610dba565b611a4d888a7f000000000000000000000000000000000000000000000000000000000000000081518110611a1657fe5b60200260200101518b7f000000000000000000000000000000000000000000000000000000000000000060010381518110610be257fe5b8615611a8157611a817f0000000000000000000000000000000000000000000000000000000000000000610c238b8a61241b565b60006060611a8f848c612cca565b91509150611aa183831015606c61218d565b611aab8c836125e4565b80600081518110611ab857fe5b60200260200101518b600081518110611acd57fe5b60200260200101818151019150818152505080600181518110611aec57fe5b60200260200101518b600181518110611b0157fe5b602002602001018181510191508181525050611b1c8b61267e565b611b2581612c08565b6040805160028082526060820183528392602083019080368337019050509650965050505050610dba565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b7f000000000000000000000000000000000000000000000000000000000000000081565b60007f00000000000000000000000000000000000000000000000000000000000000004210611bd75750670de0b6b3a76400006109a3565b6109a07f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663226778496040518163ffffffff1660e01b815260040160206040518083038186803b158015611c3357600080fd5b505afa158015611c47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c6b91906144f5565b6108e1610985611cd9611ca6670de0b6b3a76400007f0000000000000000000000000000000000000000000000000000000000000000611fa9565b427f000000000000000000000000000000000000000000000000000000000000000003670de0b6b3a76400000290611fa9565b61099487670de0b6b3a7640000611f97565b615da890565b6000611d01838311156001611d73565b50900390565b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b600b5461ffff1690565b81611d8157611d8181613012565b5050565b611d9c6001600160a01b0384161515610198611d73565b611db36001600160a01b0383161515610199611d73565b611dbe838383612416565b6001600160a01b038316600090815260208190526040902054611de490826101a0613065565b6001600160a01b038085166000908152602081905260408082209390935590841681522054611e139082611f97565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b6000611e79828261307b565b611e8484601f61307f565b611e8f866054613090565b611e9a88606a61307f565b611ea58a609f613090565b611eb08c60b561307f565b611ebb8e60ea613090565b17171717171798975050505050505050565b60006109a0828261309d565b60007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611f466130a7565b3060405160200180868152602001858152602001848152602001838152602001826001600160a01b031681526020019550505050505060405160208183030381529060405280519060200120905090565b600082820161075a8482101583611d73565b6000611fb88215156004611d73565b82611fc557506000610597565b670de0b6b3a764000083810290611fe890858381611fdf57fe5b04146005611d73565b828181611ff157fe5b04915050610597565b600082820261201e84158061201757508385838161201457fe5b04145b6003611d73565b670de0b6b3a764000090049392505050565b60008061203d84846130ab565b90506000612057612050836127106125ee565b6001611f97565b90508082101561206c57600092505050610597565b6120768282611cf1565b92505050610597565b60009081526007602052604090205490565b60008060008060008060006120a5886131b6565b96506120b0886131c3565b95506120bb886131d0565b94506120c6886131dd565b93506120d1886131ea565b92506120dc886131f7565b91506120e788611ecd565b9050919395979092949650565b6040516334171a8560e01b815260009073__$ca06ebe0e37df84d33a229baa7963d6fc2$__906334171a8590612135906007908890889088906004016147dd565b60206040518083038186803b15801561214d57600080fd5b505af4158015612161573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061218591906144f5565b949350505050565b81611d8157611d8181613204565b6121e1817f0000000000000000000000000000000000000000000000000000000000000000815181106121ca57fe5b60200260200101516121dc6001612936565b613258565b817f00000000000000000000000000000000000000000000000000000000000000008151811061220d57fe5b60200260200101818152505061225d817f00000000000000000000000000000000000000000000000000000000000000006001038151811061224b57fe5b60200260200101516121dc6000612936565b817f00000000000000000000000000000000000000000000000000000000000000006001038151811061228c57fe5b60200260200101818152505050565b600b546601000000000000900460ff1680156122b657508243115b80156122c95750662386f26fc100008110155b156124165760006122fa6122e860085484611ffa90919063ffffffff16565b6108e16122f361059d565b8690611f97565b9050670de0b6b3a764000081106123225761231d81670de0b6b3a7640000611cf1565b612325565b60005b9050600061233282611b9f565b905060007f0000000000000000000000000000000000000000000000000000000000000000156123625781612374565b612374670de0b6b3a764000083611fa9565b600b549091506000906123d99063ffffffff620100008204169061ffff1661239b85613272565b620f424088106123b3576123ae88613272565b6123bf565b6123bf620f4240613272565b600b546701000000000000009004601890810b900b6132b2565b600b5490915061ffff16811461241157600b805465ffffffff00001916620100004263ffffffff16021761ffff191661ffff83161790555b505050505b505050565b600080427f00000000000000000000000000000000000000000000000000000000000000001161244c57600061247a565b670de0b6b3a7640000427f000000000000000000000000000000000000000000000000000000000000000003025b905060006124ab6114457f000000000000000000000000000000000000000000000000000000000000000084611ffa565b905060006124d46124c783600a5461203090919063ffffffff16565b6009546114f19085612030565b90506000612513836109946124e761059d565b8a7f0000000000000000000000000000000000000000000000000000000000000000815181106114db57fe5b90506000612550846109946008548b7f00000000000000000000000000000000000000000000000000000000000000006001038151811061148a57fe5b9050600061255e8383611f97565b90508381116125765760009650505050505050610597565b600061259761258d670de0b6b3a764000088611fa9565b6109948488611fa9565b905060006125bb826108e16125b482670de0b6b3a7640000611cf1565b8d90611ffa565b90506125d56125c982612b96565b6108e18361158761059d565b9b9a5050505050505050505050565b611d81828261330a565b600082820261260884158061201757508385838161201457fe5b80612617576000915050610597565b670de0b6b3a764000060001982015b04600101915050610597565b60006126418215156004611d73565b8261264e57506000610597565b670de0b6b3a76400008381029061266890858381611fdf57fe5b82600182038161262657fe5b611d81828261339f565b60006126b761268b61059d565b837f0000000000000000000000000000000000000000000000000000000000000000815181106114db57fe5b905060006126f0600854847f00000000000000000000000000000000000000000000000000000000000000006001038151811061148a57fe5b90506000807f000000000000000000000000000000000000000000000000000000000000000061272457508290508161272a565b50819050825b600b546601000000000000900460ff1615612832576000427f00000000000000000000000000000000000000000000000000000000000000001161276f57600061279d565b670de0b6b3a7640000427f000000000000000000000000000000000000000000000000000000000000000003025b905060006127ce6114457f000000000000000000000000000000000000000000000000000000000000000084611ffa565b90506127ef6127ea6127e08584612030565b6114f18785612030565b613272565b600b805460189290920b78ffffffffffffffffffffffffffffffffffffffffffffffffff166701000000000000000266ffffffffffffff90921691909117905550505b600991909155600a55505050565b61284a6001612936565b817f00000000000000000000000000000000000000000000000000000000000000008151811061287657fe5b60200260200101518161288557fe5b04817f0000000000000000000000000000000000000000000000000000000000000000815181106128b257fe5b6020026020010181815250506128c86000612936565b817f0000000000000000000000000000000000000000000000000000000000000000600103815181106128f757fe5b60200260200101518161290657fe5b04817f00000000000000000000000000000000000000000000000000000000000000006001038151811061228c57fe5b600081612963577f00000000000000000000000000000000000000000000000000000000000000006109a0565b507f0000000000000000000000000000000000000000000000000000000000000000919050565b600061075a8383613258565b600080427f0000000000000000000000000000000000000000000000000000000000000000116129c75760006129f5565b670de0b6b3a7640000427f000000000000000000000000000000000000000000000000000000000000000003025b90506000612a237f000000000000000000000000000000000000000000000000000000000000000083611ffa565b90506000612a81611445838b612a59577f0000000000000000000000000000000000000000000000000000000000000000612a7b565b7f00000000000000000000000000000000000000000000000000000000000000005b906125ee565b90506000612a8f8783613456565b90506000612a9d8784613456565b905060008a612ab557612ab0888b611cf1565b612ab9565b8989015b90506000612ac78286612030565b90506000612af4612ae0670de0b6b3a764000088611fa9565b612aee8461099a8989611f97565b90613456565b9050612b0c8d1580612b055750818b115b606a61218d565b8c15612b4857612b2f8e612b235781841115612b28565b818410155b606b61218d565b612b398a82611cf1565b98505050505050505050612b6e565b612b648e612b595783821115612b28565b83821015606b61218d565b612b39818c611cf1565b95945050505050565b6000818381612b8257fe5b049392505050565b600061075a8383613482565b6000670de0b6b3a76400008210612bae5760006109a0565b50670de0b6b3a76400000390565b6000612bc6611ed9565b82604051602001808061190160f01b81525060020183815260200182815260200192505050604051602081830303815290604052805190602001209050919050565b612c4e817f000000000000000000000000000000000000000000000000000000000000000081518110612c3757fe5b6020026020010151612c496001612936565b613482565b817f000000000000000000000000000000000000000000000000000000000000000081518110612c7a57fe5b60200260200101818152505061225d817f000000000000000000000000000000000000000000000000000000000000000060010381518110612cb857fe5b6020026020010151612c496000612936565b60006060600080847f000000000000000000000000000000000000000000000000000000000000000081518110612cfd57fe5b6020026020010151857f000000000000000000000000000000000000000000000000000000000000000060010381518110612d3457fe5b6020026020010151915091506060600267ffffffffffffffff81118015612d5a57600080fd5b50604051908082528060200260200182016040528015612d84578160200160208202803683370190505b50905082612e29576000877f000000000000000000000000000000000000000000000000000000000000000060010381518110612dbd57fe5b602002602001015190506000612dde60085483611ffa90919063ffffffff16565b905081837f000000000000000000000000000000000000000000000000000000000000000060010381518110612e1057fe5b6020908102919091010152955090935061300b92505050565b600080887f000000000000000000000000000000000000000000000000000000000000000081518110612e5857fe5b6020026020010151897f000000000000000000000000000000000000000000000000000000000000000060010381518110612e8f57fe5b6020026020010151915091506000612ea561059d565b9050600085612eb48385613258565b81612ebb57fe5b049050600087612ecb8487613258565b81612ed257fe5b04905080821015612f745786612ee88986613258565b81612eef57fe5b04867f000000000000000000000000000000000000000000000000000000000000000081518110612f1c57fe5b60200260200101818152505083867f000000000000000000000000000000000000000000000000000000000000000060010381518110612f5857fe5b602090810291909101015250975092955061300b945050505050565b84867f000000000000000000000000000000000000000000000000000000000000000081518110612fa157fe5b60200260200101818152505087612fb88887613258565b81612fbf57fe5b04867f000000000000000000000000000000000000000000000000000000000000000060010381518110612fef57fe5b6020908102919091010152985093965061300b95505050505050565b9250929050565b62461bcd60e51b6000908152602060045260076024526642414c23000030600a808404818106603090810160081b95839006959095019082900491820690940160101b939093010160c81b604452606490fd5b60006130748484111583611d73565b5050900390565b1b90565b661fffffffffffff91909116901b90565b623fffff91909116901b90565b1c637fffffff1690565b4690565b6000816130c15750670de0b6b3a7640000610597565b826130ce57506000610597565b6130df600160ff1b84106006611d73565b82613105770bce5086492111aea88f4bb1ca6bcf584181ea8059f7653284106007611d73565b826000670c7d713b49da0000831380156131265750670f43fc2c04ee000083125b1561315d576000613136846134b5565b9050670de0b6b3a764000080820784020583670de0b6b3a76400008305020191505061316b565b81613167846135dc565b0290505b670de0b6b3a764000090056131a3680238fd42c5cf03ffff19821280159061319c575068070c1cc73b00c800008213155b6008611d73565b6131ac8161397c565b9695505050505050565b60006109a08260ea613d5a565b60006109a08260b5613d81565b60006109a082609f613d5a565b60006109a082606a613d81565b60006109a0826054613d5a565b60006109a082601f613d81565b62461bcd60e51b600090815260206004526007602452673f534e5323000030600a808404818106603090810160081b95839006959095019082900491820690940160101b939093010160c81b604452606490fd5b600082820261075a84158061201757508385838161201457fe5b60008061327e83613db4565b9050600080821361329757652d79883d200082036132a1565b652d79883d200082015b655af3107a40009005949350505050565b6000806132ce858585426132c58b61207f565b93929190613e10565b90506104b0428890031015806132e457866132ed565b6132ed87613e70565b600081815260076020526040902092909255509695505050505050565b61331660008383612416565b6002546133239082611f97565b6002556001600160a01b0382166000908152602081905260409020546133499082611f97565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6133b66001600160a01b038316151561019b611d73565b6133c282600083612416565b6001600160a01b0382166000908152602081905260409020546133e890826101a1613065565b6001600160a01b03831660009081526020819052604090205560025461340e9082613e7d565b6002556040805182815290516000916001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b60008061346384846130ab565b90506000613476612050836127106125ee565b9050612b6e8282611f97565b60006134918215156004611d73565b8261349e57506000610597565b8160018403816134aa57fe5b046001019050610597565b670de0b6b3a7640000026000806ec097ce7bc90715b34b9f1000000000808401906ec097ce7bc90715b34b9f0fffffffff19850102816134f157fe5b05905060006ec097ce7bc90715b34b9f100000000082800205905081806ec097ce7bc90715b34b9f100000000081840205915060038205016ec097ce7bc90715b34b9f100000000082840205915060058205016ec097ce7bc90715b34b9f100000000082840205915060078205016ec097ce7bc90715b34b9f100000000082840205915060098205016ec097ce7bc90715b34b9f1000000000828402059150600b8205016ec097ce7bc90715b34b9f1000000000828402059150600d8205016ec097ce7bc90715b34b9f1000000000828402059150600f826002919005919091010295945050505050565b6000670de0b6b3a76400008212156136195761360f826ec097ce7bc90715b34b9f10000000008161360957fe5b056135dc565b60000390506109a3565b60007e1600ef3172e58d2e933ec884fde10064c63b5372d805e203c0000000000000831261366a57770195e54c5dd42177f53a27172fa9ec630262827000000000830592506806f05b59d3b2000000015b73011798004d755d3c8bc8e03204cf44619e00000083126136a2576b1425982cf597cd205cef7380830592506803782dace9d9000000015b606492830292026e01855144814a7ff805980ff008400083126136ea576e01855144814a7ff805980ff008400068056bc75e2d63100000840205925068ad78ebc5ac62000000015b6b02df0ab5a80a22c61ab5a7008312613725576b02df0ab5a80a22c61ab5a70068056bc75e2d6310000084020592506856bc75e2d631000000015b693f1fce3da636ea5cf850831261375c57693f1fce3da636ea5cf85068056bc75e2d631000008402059250682b5e3af16b18800000015b690127fa27722cc06cc5e2831261379357690127fa27722cc06cc5e268056bc75e2d6310000084020592506815af1d78b58c400000015b68280e60114edb805d0383126137c85768280e60114edb805d0368056bc75e2d631000008402059250680ad78ebc5ac6200000015b680ebc5fb4174612111083126137f357680ebc5fb4174612111068056bc75e2d631000009384020592015b6808f00f760a4b2db55d8312613828576808f00f760a4b2db55d68056bc75e2d6310000084020592506802b5e3af16b1880000015b6806f5f1775788937937831261385d576806f5f177578893793768056bc75e2d63100000840205925068015af1d78b58c40000015b6806248f33704b2866038312613891576806248f33704b28660368056bc75e2d63100000840205925067ad78ebc5ac620000015b6805c548670b9510e7ac83126138c5576805c548670b9510e7ac68056bc75e2d6310000084020592506756bc75e2d6310000015b600068056bc75e2d63100000840168056bc75e2d6310000080860302816138e857fe5b059050600068056bc75e2d63100000828002059050818068056bc75e2d63100000818402059150600382050168056bc75e2d63100000828402059150600582050168056bc75e2d63100000828402059150600782050168056bc75e2d63100000828402059150600982050168056bc75e2d63100000828402059150600b820501600202606485820105979650505050505050565b60006139ab680238fd42c5cf03ffff1983121580156139a4575068070c1cc73b00c800008313155b6009611d73565b60008212156139df576139c08260000361397c565b6ec097ce7bc90715b34b9f1000000000816139d757fe5b0590506109a3565b60006806f05b59d3b20000008312613a1f57506806f05b59d3b1ffffff1990910190770195e54c5dd42177f53a27172fa9ec630262827000000000613a55565b6803782dace9d90000008312613a5157506803782dace9d8ffffff19909101906b1425982cf597cd205cef7380613a55565b5060015b6064929092029168056bc75e2d6310000068ad78ebc5ac620000008412613aa55768ad78ebc5ac61ffffff199093019268056bc75e2d631000006e01855144814a7ff805980ff008400082020590505b6856bc75e2d6310000008412613ae1576856bc75e2d630ffffff199093019268056bc75e2d631000006b02df0ab5a80a22c61ab5a70082020590505b682b5e3af16b188000008412613b1b57682b5e3af16b187fffff199093019268056bc75e2d63100000693f1fce3da636ea5cf85082020590505b6815af1d78b58c4000008412613b55576815af1d78b58c3fffff199093019268056bc75e2d63100000690127fa27722cc06cc5e282020590505b680ad78ebc5ac62000008412613b8e57680ad78ebc5ac61fffff199093019268056bc75e2d6310000068280e60114edb805d0382020590505b68056bc75e2d631000008412613bc75768056bc75e2d630fffff199093019268056bc75e2d63100000680ebc5fb4174612111082020590505b6802b5e3af16b18800008412613c00576802b5e3af16b187ffff199093019268056bc75e2d631000006808f00f760a4b2db55d82020590505b68015af1d78b58c400008412613c395768015af1d78b58c3ffff199093019268056bc75e2d631000006806f5f177578893793782020590505b68056bc75e2d631000008481019085906002908280020505918201919050600368056bc75e2d631000008783020505918201919050600468056bc75e2d631000008783020505918201919050600568056bc75e2d631000008783020505918201919050600668056bc75e2d631000008783020505918201919050600768056bc75e2d631000008783020505918201919050600868056bc75e2d631000008783020505918201919050600968056bc75e2d631000008783020505918201919050600a68056bc75e2d631000008783020505918201919050600b68056bc75e2d631000008783020505918201919050600c68056bc75e2d631000008783020505918201919050606468056bc75e2d63100000848402058502059695505050505050565b600082821c623fffff16621fffff8113613d745780612185565b623fffff19179392505050565b600082821c661fffffffffffff16660fffffffffffff8113613da35780612185565b661fffffffffffff19179392505050565b6000613dc4600083136064611d73565b670c7d713b49da000082138015613de25750670f43fc2c04ee000082125b15613e0057670de0b6b3a7640000613df9836134b5565b816139d757fe5b613e09826135dc565b90506109a3565b600080613e1c87611ecd565b830390506000818702613e2e896131c3565b0190506000828702613e3f8a6131dd565b0190506000838702613e508b6131f7565b019050613e6289848a858b868c611e6d565b9a9950505050505050505050565b60006109a0826001613e8b565b600061075a83836001613065565b601491010690565b604080518082019091526000808252602082015290565b6040805160608101909152806000815260200160008152602001600081525090565b80356109a3816148d6565b600082601f830112613ee7578081fd5b8151613efa613ef5826148b8565b614894565b818152915060208083019084810181840286018201871015613f1b57600080fd5b60005b84811015613f3a57815184529282019290820190600101613f1e565b505050505092915050565b600082601f830112613f55578081fd5b813567ffffffffffffffff811115613f6957fe5b613f7c601f8201601f1916602001614894565b9150808252836020828501011115613f9357600080fd5b8060208401602084013760009082016020015292915050565b8035600281106109a357600080fd5b8035600381106109a357600080fd5b600060208284031215613fdb578081fd5b813561075a816148d6565b60008060408385031215613ff8578081fd5b8235614003816148d6565b91506020830135614013816148d6565b809150509250929050565b600080600060608486031215614032578081fd5b833561403d816148d6565b9250602084013561404d816148d6565b929592945050506040919091013590565b600080600080600080600060e0888a031215614078578485fd5b8735614083816148d6565b96506020880135614093816148d6565b95506040880135945060608801359350608088013560ff811681146140b6578384fd5b9699959850939692959460a0840135945060c09093013592915050565b600080604083850312156140e5578182fd5b82356140f0816148d6565b946020939093013593505050565b600080600060608486031215614112578081fd5b835167ffffffffffffffff80821115614129578283fd5b818601915086601f83011261413c578283fd5b815161414a613ef5826148b8565b80828252602080830192508086018b82838702890101111561416a578788fd5b8796505b84871015614195578051614181816148d6565b84526001969096019592810192810161416e565b5089015190975093505050808211156141ac578283fd5b506141b986828701613ed7565b925050604084015190509250925092565b600060208083850312156141dc578182fd5b823567ffffffffffffffff808211156141f3578384fd5b818501915085601f830112614206578384fd5b8135614214613ef5826148b8565b818152848101908486016040808502870188018b1015614232578889fd5b8896505b8487101561428a5780828c03121561424c578889fd5b8051818101818110888211171561425f57fe5b825261426a83613fbb565b815282890135898201528452600196909601959287019290810190614236565b50909998505050505050505050565b600060208083850312156142ab578182fd5b823567ffffffffffffffff808211156142c2578384fd5b818501915085601f8301126142d5578384fd5b81356142e3613ef5826148b8565b818152848101908486016060808502870188018b1015614301578889fd5b8896505b8487101561428a5780828c03121561431b578889fd5b60408051828101818110898211171561433057fe5b825261433b84613fbb565b8152838a01358a82015281840135918101919091528452600196909601959287019290810190614305565b600060208284031215614377578081fd5b815167ffffffffffffffff81111561438d578182fd5b61218584828501613ed7565b600080604083850312156143ab578182fd5b825167ffffffffffffffff8111156143c1578283fd5b6143cd85828601613ed7565b925050602083015190509250929050565b600080600080600080600060e0888a0312156143f8578081fd5b8735965060208089013561440b816148d6565b9650604089013561441b816148d6565b9550606089013567ffffffffffffffff80821115614437578384fd5b818b0191508b601f83011261444a578384fd5b8135614458613ef5826148b8565b8082825285820191508585018f878886028801011115614476578788fd5b8795505b8386101561449857803583526001959095019491860191860161447a565b509850505060808b0135955060a08b0135945060c08b01359250808311156144be578384fd5b50506144cc8a828b01613f45565b91505092959891949750929550565b6000602082840312156144ec578081fd5b61075a82613fbb565b600060208284031215614506578081fd5b5051919050565b600080600060608486031215614521578081fd5b833567ffffffffffffffff80821115614538578283fd5b818601915061012080838903121561454e578384fd5b61455781614894565b905061456283613fac565b815261457060208401613ecc565b602082015261458160408401613ecc565b6040820152606083013560608201526080830135608082015260a083013560a08201526145b060c08401613ecc565b60c08201526145c160e08401613ecc565b60e082015261010080840135838111156145d9578586fd5b6145e58a828701613f45565b9183019190915250976020870135975060409096013595945050505050565b600060208284031215614615578081fd5b5035919050565b6000806040838503121561462e578182fd5b50508035926020909101359150565b6000815180845260208085019450808401835b8381101561466c57815187529582019590820190600101614650565b509495945050505050565b6003811061468157fe5b9052565b614690828251614677565b60208181015190830152604090810151910152565b6001600160a01b0391909116815260200190565b6020808252825182820181905260009190848201906040850190845b818110156146f1578351835292840192918401916001016146d5565b50909695505050505050565b6020808252825182820181905260009190848201906040850190845b818110156146f15761472c838551614685565b9284019260609290920191600101614719565b60006020825261075a602083018461463d565b600060408252614765604083018561463d565b8281036020840152612b6e818561463d565b901515815260200190565b90815260200190565b968752602087019590955260408601939093526060850191909152608084015260a083015260c082015260e00190565b838152606081016147cf6020830185614677565b826040830152949350505050565b848152608081016147f16020830186614677565b60408201939093526060015292915050565b83815260a081016148176020830185614685565b826080830152949350505050565b6000602080835283518082850152825b8181101561485157858101830151858201604001528201614835565b818111156148625783604083870101525b50601f01601f1916929092016040019392505050565b918252602082015260400190565b60ff91909116815260200190565b60405181810167ffffffffffffffff811182821017156148b057fe5b604052919050565b600067ffffffffffffffff8211156148cc57fe5b5060209081020190565b6001600160a01b03811681146148eb57600080fd5b5056fea26469706673582212202a24ae2c04026307dd07d61bb838621230425fa12313ad62daef112aa7fb087164736f6c63430007050033a2646970667358221220d729be55272d3a4a8b54dd157a7d603815420f77734bee7b677c7d714f4fff3f64736f6c63430007050033",
  "libraries": {
    "QueryProcessor": "0xcBe8c43a6e3bE093489b5b1bfF2E851D01D451f6"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "setPool(address,uint256,address)": {
        "details": "Adding a pool to the mapping prevents a new pool from being deployed for that Series from this factory"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "create(address,uint256)": {
        "notice": "Deploys a new `Space` contract"
      },
      "divider()": {
        "notice": "Sense Divider"
      },
      "oracleEnabled()": {
        "notice": "Oracle flag"
      },
      "pools(address,uint256)": {
        "notice": "Pool registry (adapter -> maturity -> pool address)"
      },
      "setPool(address,uint256,address)": {
        "notice": "Authd action to set a pool address on the \"pools\" registry"
      },
      "ts()": {
        "notice": "Yieldspace config"
      },
      "vault()": {
        "notice": "Balancer Vault"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5118,
        "contract": "lib/v1-space/src/SpaceFactory.sol:SpaceFactory",
        "label": "isTrusted",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 7503,
        "contract": "lib/v1-space/src/SpaceFactory.sol:SpaceFactory",
        "label": "pools",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))"
      },
      {
        "astId": 7506,
        "contract": "lib/v1-space/src/SpaceFactory.sol:SpaceFactory",
        "label": "ts",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 7508,
        "contract": "lib/v1-space/src/SpaceFactory.sol:SpaceFactory",
        "label": "g1",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 7510,
        "contract": "lib/v1-space/src/SpaceFactory.sol:SpaceFactory",
        "label": "g2",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 7513,
        "contract": "lib/v1-space/src/SpaceFactory.sol:SpaceFactory",
        "label": "oracleEnabled",
        "offset": 0,
        "slot": "5",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_address)"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}