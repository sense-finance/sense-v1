{
  "address": "0x6633c65e9f80c65d98AbDe3F9F4E6E504F4D5352",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IVault",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_divider",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_ts",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_g1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_g2",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_oracleEnabled",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "trusted",
          "type": "bool"
        }
      ],
      "name": "UserTrustUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "adapter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        }
      ],
      "name": "create",
      "outputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "divider",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "g1",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "g2",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isTrusted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracleEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pools",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "trusted",
          "type": "bool"
        }
      ],
      "name": "setIsTrusted",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_ts",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_g1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_g2",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_oracleEnabled",
          "type": "bool"
        }
      ],
      "name": "setParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vault",
      "outputs": [
        {
          "internalType": "contract IVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x3a31a8105c1a17c3c49ed10cca2e043d65912723bc04d8f251819db1195ac82e",
  "receipt": {
    "to": null,
    "from": "0x59A181710F926Eae6FddfbF27a14259E8DD00cA2",
    "contractAddress": "0x6633c65e9f80c65d98AbDe3F9F4E6E504F4D5352",
    "transactionIndex": 136,
    "gasUsed": "5314317",
    "logsBloom": "0x
    "blockHash": "0x5b9647739c0d97643da00d4d8311f705a605427d4b961519c95699097208eaf0",
    "transactionHash": "0x3a31a8105c1a17c3c49ed10cca2e043d65912723bc04d8f251819db1195ac82e",
    "logs": [
      {
        "transactionIndex": 136,
        "blockNumber": 14391642,
        "transactionHash": "0x3a31a8105c1a17c3c49ed10cca2e043d65912723bc04d8f251819db1195ac82e",
        "address": "0x6633c65e9f80c65d98AbDe3F9F4E6E504F4D5352",
        "topics": [
          "0xe95aec380cae16330d146d5499ef7db6f3657e477104a733e771bc09e500d986",
          "0x00000000000000000000000059a181710f926eae6fddfbf27a14259e8dd00ca2"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 147,
        "blockHash": "0x5b9647739c0d97643da00d4d8311f705a605427d4b961519c95699097208eaf0"
      }
    ],
    "blockNumber": 14391642,
    "cumulativeGasUsed": "14343230",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xBA12222222228d8Ba445958a75a0704d566BF2C8",
    "0x6961e8650A1548825f3e17335b7Db2158955C22f",
    "3162315320",
    "950000000000000000",
    "1052631578947368421",
    true
  ],
  "numDeployments": 1,
  "solcInputHash": "06ef8c4054b30d44d268e043f5b3ad7d",
  "metadata": "{\"compiler\":{\"version\":\"0.7.5+commit.eb77ed08\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IVault\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_divider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_g1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_g2\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_oracleEnabled\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"trusted\",\"type\":\"bool\"}],\"name\":\"UserTrustUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"divider\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"g1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"g2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isTrusted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"trusted\",\"type\":\"bool\"}],\"name\":\"setIsTrusted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_g1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_g2\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_oracleEnabled\",\"type\":\"bool\"}],\"name\":\"setParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"create(address,uint256)\":{\"notice\":\"Deploys a new `Space` contract\"},\"divider()\":{\"notice\":\"Sense Divider\"},\"oracleEnabled()\":{\"notice\":\"Oracle flag\"},\"pools(address,uint256)\":{\"notice\":\"Pool registry (adapter -> maturity -> pool address)\"},\"ts()\":{\"notice\":\"Yieldspace config\"},\"vault()\":{\"notice\":\"Balancer Vault\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/v1-space/src/SpaceFactory.sol\":\"SpaceFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1500},\"remappings\":[]},\"sources\":{\"@balancer-labs/v2-pool-utils/contracts/BalancerPoolToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol\\\";\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20Permit.sol\\\";\\n\\n/**\\n * @title Highly opinionated token implementation\\n * @author Balancer Labs\\n * @dev\\n * - Includes functions to increase and decrease allowance as a workaround\\n *   for the well-known issue with `approve`:\\n *   https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n * - Allows for 'infinite allowance', where an allowance of 0xff..ff is not\\n *   decreased by calls to transferFrom\\n * - Lets a token holder use `transferFrom` to send their own tokens,\\n *   without first setting allowance\\n * - Emits 'Approval' events whenever allowance is changed by `transferFrom`\\n */\\ncontract BalancerPoolToken is ERC20, ERC20Permit {\\n    constructor(string memory tokenName, string memory tokenSymbol)\\n        ERC20(tokenName, tokenSymbol)\\n        ERC20Permit(tokenName)\\n    {\\n        // solhint-disable-previous-line no-empty-blocks\\n    }\\n\\n    // Overrides\\n\\n    /**\\n     * @dev Override to allow for 'infinite allowance' and let the token owner use `transferFrom` with no self-allowance\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public override returns (bool) {\\n        uint256 currentAllowance = allowance(sender, msg.sender);\\n        _require(msg.sender == sender || currentAllowance >= amount, Errors.ERC20_TRANSFER_EXCEEDS_ALLOWANCE);\\n\\n        _transfer(sender, recipient, amount);\\n\\n        if (msg.sender != sender && currentAllowance != uint256(-1)) {\\n            // Because of the previous require, we know that if msg.sender != sender then currentAllowance >= amount\\n            _approve(sender, msg.sender, currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Override to allow decreasing allowance by more than the current amount (setting it to zero)\\n     */\\n    function decreaseAllowance(address spender, uint256 amount) public override returns (bool) {\\n        uint256 currentAllowance = allowance(msg.sender, spender);\\n\\n        if (amount >= currentAllowance) {\\n            _approve(msg.sender, spender, 0);\\n        } else {\\n            // No risk of underflow due to if condition\\n            _approve(msg.sender, spender, currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    // Internal functions\\n\\n    function _mintPoolTokens(address recipient, uint256 amount) internal {\\n        _mint(recipient, amount);\\n    }\\n\\n    function _burnPoolTokens(address sender, uint256 amount) internal {\\n        _burn(sender, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x5e178753cb96551bc6f2c6ca456a037fd2b5ae39f5ae287735f1f60771701add\",\"license\":\"GPL-3.0-or-later\"},\"@balancer-labs/v2-pool-utils/contracts/factories/BasePoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@balancer-labs/v2-vault/contracts/interfaces/IVault.sol\\\";\\n\\n/**\\n * @dev Base contract for Pool factories.\\n *\\n * Pools are deployed from factories to allow third parties to reason about them. Unknown Pools may have arbitrary\\n * logic: being able to assert that a Pool's behavior follows certain rules (those imposed by the contracts created by\\n * the factory) is very powerful.\\n */\\nabstract contract BasePoolFactory {\\n    IVault private immutable _vault;\\n    mapping(address => bool) private _isPoolFromFactory;\\n\\n    event PoolCreated(address indexed pool);\\n\\n    constructor(IVault vault) {\\n        _vault = vault;\\n    }\\n\\n    /**\\n     * @dev Returns the Vault's address.\\n     */\\n    function getVault() public view returns (IVault) {\\n        return _vault;\\n    }\\n\\n    /**\\n     * @dev Returns true if `pool` was created by this factory.\\n     */\\n    function isPoolFromFactory(address pool) external view returns (bool) {\\n        return _isPoolFromFactory[pool];\\n    }\\n\\n    /**\\n     * @dev Registers a new created pool.\\n     *\\n     * Emits a `PoolCreated` event.\\n     */\\n    function _register(address pool) internal {\\n        _isPoolFromFactory[pool] = true;\\n        emit PoolCreated(pool);\\n    }\\n}\\n\",\"keccak256\":\"0x47468fb01511f3784b69e3b7ad82793eb7aef0a509876cc6c9a164f7bacb4540\",\"license\":\"GPL-3.0-or-later\"},\"@balancer-labs/v2-solidity-utils/contracts/helpers/BalancerErrors.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\n// solhint-disable\\n\\n/**\\n * @dev Reverts if `condition` is false, with a revert reason containing `errorCode`. Only codes up to 999 are\\n * supported.\\n */\\nfunction _require(bool condition, uint256 errorCode) pure {\\n    if (!condition) _revert(errorCode);\\n}\\n\\n/**\\n * @dev Reverts with a revert reason containing `errorCode`. Only codes up to 999 are supported.\\n */\\nfunction _revert(uint256 errorCode) pure {\\n    // We're going to dynamically create a revert string based on the error code, with the following format:\\n    // 'BAL#{errorCode}'\\n    // where the code is left-padded with zeroes to three digits (so they range from 000 to 999).\\n    //\\n    // We don't have revert strings embedded in the contract to save bytecode size: it takes much less space to store a\\n    // number (8 to 16 bits) than the individual string characters.\\n    //\\n    // The dynamic string creation algorithm that follows could be implemented in Solidity, but assembly allows for a\\n    // much denser implementation, again saving bytecode size. Given this function unconditionally reverts, this is a\\n    // safe place to rely on it without worrying about how its usage might affect e.g. memory contents.\\n    assembly {\\n        // First, we need to compute the ASCII representation of the error code. We assume that it is in the 0-999\\n        // range, so we only need to convert three digits. To convert the digits to ASCII, we add 0x30, the value for\\n        // the '0' character.\\n\\n        let units := add(mod(errorCode, 10), 0x30)\\n\\n        errorCode := div(errorCode, 10)\\n        let tenths := add(mod(errorCode, 10), 0x30)\\n\\n        errorCode := div(errorCode, 10)\\n        let hundreds := add(mod(errorCode, 10), 0x30)\\n\\n        // With the individual characters, we can now construct the full string. The \\\"BAL#\\\" part is a known constant\\n        // (0x42414c23): we simply shift this by 24 (to provide space for the 3 bytes of the error code), and add the\\n        // characters to it, each shifted by a multiple of 8.\\n        // The revert reason is then shifted left by 200 bits (256 minus the length of the string, 7 characters * 8 bits\\n        // per character = 56) to locate it in the most significant part of the 256 slot (the beginning of a byte\\n        // array).\\n\\n        let revertReason := shl(200, add(0x42414c23000000, add(add(units, shl(8, tenths)), shl(16, hundreds))))\\n\\n        // We can now encode the reason in memory, which can be safely overwritten as we're about to revert. The encoded\\n        // message will have the following layout:\\n        // [ revert reason identifier ] [ string location offset ] [ string length ] [ string contents ]\\n\\n        // The Solidity revert reason identifier is 0x08c739a0, the function selector of the Error(string) function. We\\n        // also write zeroes to the next 28 bytes of memory, but those are about to be overwritten.\\n        mstore(0x0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\\n        // Next is the offset to the location of the string, which will be placed immediately after (20 bytes away).\\n        mstore(0x04, 0x0000000000000000000000000000000000000000000000000000000000000020)\\n        // The string length is fixed: 7 characters.\\n        mstore(0x24, 7)\\n        // Finally, the string itself is stored.\\n        mstore(0x44, revertReason)\\n\\n        // Even if the string is only 7 bytes long, we need to return a full 32 byte slot containing it. The length of\\n        // the encoded message is therefore 4 + 32 + 32 + 32 = 100.\\n        revert(0, 100)\\n    }\\n}\\n\\nlibrary Errors {\\n    // Math\\n    uint256 internal constant ADD_OVERFLOW = 0;\\n    uint256 internal constant SUB_OVERFLOW = 1;\\n    uint256 internal constant SUB_UNDERFLOW = 2;\\n    uint256 internal constant MUL_OVERFLOW = 3;\\n    uint256 internal constant ZERO_DIVISION = 4;\\n    uint256 internal constant DIV_INTERNAL = 5;\\n    uint256 internal constant X_OUT_OF_BOUNDS = 6;\\n    uint256 internal constant Y_OUT_OF_BOUNDS = 7;\\n    uint256 internal constant PRODUCT_OUT_OF_BOUNDS = 8;\\n    uint256 internal constant INVALID_EXPONENT = 9;\\n\\n    // Input\\n    uint256 internal constant OUT_OF_BOUNDS = 100;\\n    uint256 internal constant UNSORTED_ARRAY = 101;\\n    uint256 internal constant UNSORTED_TOKENS = 102;\\n    uint256 internal constant INPUT_LENGTH_MISMATCH = 103;\\n    uint256 internal constant ZERO_TOKEN = 104;\\n\\n    // Shared pools\\n    uint256 internal constant MIN_TOKENS = 200;\\n    uint256 internal constant MAX_TOKENS = 201;\\n    uint256 internal constant MAX_SWAP_FEE_PERCENTAGE = 202;\\n    uint256 internal constant MIN_SWAP_FEE_PERCENTAGE = 203;\\n    uint256 internal constant MINIMUM_BPT = 204;\\n    uint256 internal constant CALLER_NOT_VAULT = 205;\\n    uint256 internal constant UNINITIALIZED = 206;\\n    uint256 internal constant BPT_IN_MAX_AMOUNT = 207;\\n    uint256 internal constant BPT_OUT_MIN_AMOUNT = 208;\\n    uint256 internal constant EXPIRED_PERMIT = 209;\\n    uint256 internal constant NOT_TWO_TOKENS = 210;\\n\\n    // Pools\\n    uint256 internal constant MIN_AMP = 300;\\n    uint256 internal constant MAX_AMP = 301;\\n    uint256 internal constant MIN_WEIGHT = 302;\\n    uint256 internal constant MAX_STABLE_TOKENS = 303;\\n    uint256 internal constant MAX_IN_RATIO = 304;\\n    uint256 internal constant MAX_OUT_RATIO = 305;\\n    uint256 internal constant MIN_BPT_IN_FOR_TOKEN_OUT = 306;\\n    uint256 internal constant MAX_OUT_BPT_FOR_TOKEN_IN = 307;\\n    uint256 internal constant NORMALIZED_WEIGHT_INVARIANT = 308;\\n    uint256 internal constant INVALID_TOKEN = 309;\\n    uint256 internal constant UNHANDLED_JOIN_KIND = 310;\\n    uint256 internal constant ZERO_INVARIANT = 311;\\n    uint256 internal constant ORACLE_INVALID_SECONDS_QUERY = 312;\\n    uint256 internal constant ORACLE_NOT_INITIALIZED = 313;\\n    uint256 internal constant ORACLE_QUERY_TOO_OLD = 314;\\n    uint256 internal constant ORACLE_INVALID_INDEX = 315;\\n    uint256 internal constant ORACLE_BAD_SECS = 316;\\n    uint256 internal constant AMP_END_TIME_TOO_CLOSE = 317;\\n    uint256 internal constant AMP_ONGOING_UPDATE = 318;\\n    uint256 internal constant AMP_RATE_TOO_HIGH = 319;\\n    uint256 internal constant AMP_NO_ONGOING_UPDATE = 320;\\n    uint256 internal constant STABLE_INVARIANT_DIDNT_CONVERGE = 321;\\n    uint256 internal constant STABLE_GET_BALANCE_DIDNT_CONVERGE = 322;\\n    uint256 internal constant RELAYER_NOT_CONTRACT = 323;\\n    uint256 internal constant BASE_POOL_RELAYER_NOT_CALLED = 324;\\n    uint256 internal constant REBALANCING_RELAYER_REENTERED = 325;\\n    uint256 internal constant GRADUAL_UPDATE_TIME_TRAVEL = 326;\\n    uint256 internal constant SWAPS_DISABLED = 327;\\n    uint256 internal constant CALLER_IS_NOT_LBP_OWNER = 328;\\n    uint256 internal constant PRICE_RATE_OVERFLOW = 329;\\n    uint256 internal constant INVALID_JOIN_EXIT_KIND_WHILE_SWAPS_DISABLED = 330;\\n    uint256 internal constant WEIGHT_CHANGE_TOO_FAST = 331;\\n    uint256 internal constant LOWER_GREATER_THAN_UPPER_TARGET = 332;\\n    uint256 internal constant UPPER_TARGET_TOO_HIGH = 333;\\n    uint256 internal constant UNHANDLED_BY_LINEAR_POOL = 334;\\n    uint256 internal constant OUT_OF_TARGET_RANGE = 335;\\n\\n    // Lib\\n    uint256 internal constant REENTRANCY = 400;\\n    uint256 internal constant SENDER_NOT_ALLOWED = 401;\\n    uint256 internal constant PAUSED = 402;\\n    uint256 internal constant PAUSE_WINDOW_EXPIRED = 403;\\n    uint256 internal constant MAX_PAUSE_WINDOW_DURATION = 404;\\n    uint256 internal constant MAX_BUFFER_PERIOD_DURATION = 405;\\n    uint256 internal constant INSUFFICIENT_BALANCE = 406;\\n    uint256 internal constant INSUFFICIENT_ALLOWANCE = 407;\\n    uint256 internal constant ERC20_TRANSFER_FROM_ZERO_ADDRESS = 408;\\n    uint256 internal constant ERC20_TRANSFER_TO_ZERO_ADDRESS = 409;\\n    uint256 internal constant ERC20_MINT_TO_ZERO_ADDRESS = 410;\\n    uint256 internal constant ERC20_BURN_FROM_ZERO_ADDRESS = 411;\\n    uint256 internal constant ERC20_APPROVE_FROM_ZERO_ADDRESS = 412;\\n    uint256 internal constant ERC20_APPROVE_TO_ZERO_ADDRESS = 413;\\n    uint256 internal constant ERC20_TRANSFER_EXCEEDS_ALLOWANCE = 414;\\n    uint256 internal constant ERC20_DECREASED_ALLOWANCE_BELOW_ZERO = 415;\\n    uint256 internal constant ERC20_TRANSFER_EXCEEDS_BALANCE = 416;\\n    uint256 internal constant ERC20_BURN_EXCEEDS_ALLOWANCE = 417;\\n    uint256 internal constant SAFE_ERC20_CALL_FAILED = 418;\\n    uint256 internal constant ADDRESS_INSUFFICIENT_BALANCE = 419;\\n    uint256 internal constant ADDRESS_CANNOT_SEND_VALUE = 420;\\n    uint256 internal constant SAFE_CAST_VALUE_CANT_FIT_INT256 = 421;\\n    uint256 internal constant GRANT_SENDER_NOT_ADMIN = 422;\\n    uint256 internal constant REVOKE_SENDER_NOT_ADMIN = 423;\\n    uint256 internal constant RENOUNCE_SENDER_NOT_ALLOWED = 424;\\n    uint256 internal constant BUFFER_PERIOD_EXPIRED = 425;\\n    uint256 internal constant CALLER_IS_NOT_OWNER = 426;\\n    uint256 internal constant NEW_OWNER_IS_ZERO = 427;\\n    uint256 internal constant CODE_DEPLOYMENT_FAILED = 428;\\n    uint256 internal constant CALL_TO_NON_CONTRACT = 429;\\n    uint256 internal constant LOW_LEVEL_CALL_FAILED = 430;\\n\\n    // Vault\\n    uint256 internal constant INVALID_POOL_ID = 500;\\n    uint256 internal constant CALLER_NOT_POOL = 501;\\n    uint256 internal constant SENDER_NOT_ASSET_MANAGER = 502;\\n    uint256 internal constant USER_DOESNT_ALLOW_RELAYER = 503;\\n    uint256 internal constant INVALID_SIGNATURE = 504;\\n    uint256 internal constant EXIT_BELOW_MIN = 505;\\n    uint256 internal constant JOIN_ABOVE_MAX = 506;\\n    uint256 internal constant SWAP_LIMIT = 507;\\n    uint256 internal constant SWAP_DEADLINE = 508;\\n    uint256 internal constant CANNOT_SWAP_SAME_TOKEN = 509;\\n    uint256 internal constant UNKNOWN_AMOUNT_IN_FIRST_SWAP = 510;\\n    uint256 internal constant MALCONSTRUCTED_MULTIHOP_SWAP = 511;\\n    uint256 internal constant INTERNAL_BALANCE_OVERFLOW = 512;\\n    uint256 internal constant INSUFFICIENT_INTERNAL_BALANCE = 513;\\n    uint256 internal constant INVALID_ETH_INTERNAL_BALANCE = 514;\\n    uint256 internal constant INVALID_POST_LOAN_BALANCE = 515;\\n    uint256 internal constant INSUFFICIENT_ETH = 516;\\n    uint256 internal constant UNALLOCATED_ETH = 517;\\n    uint256 internal constant ETH_TRANSFER = 518;\\n    uint256 internal constant CANNOT_USE_ETH_SENTINEL = 519;\\n    uint256 internal constant TOKENS_MISMATCH = 520;\\n    uint256 internal constant TOKEN_NOT_REGISTERED = 521;\\n    uint256 internal constant TOKEN_ALREADY_REGISTERED = 522;\\n    uint256 internal constant TOKENS_ALREADY_SET = 523;\\n    uint256 internal constant TOKENS_LENGTH_MUST_BE_2 = 524;\\n    uint256 internal constant NONZERO_TOKEN_BALANCE = 525;\\n    uint256 internal constant BALANCE_TOTAL_OVERFLOW = 526;\\n    uint256 internal constant POOL_NO_TOKENS = 527;\\n    uint256 internal constant INSUFFICIENT_FLASH_LOAN_BALANCE = 528;\\n\\n    // Fees\\n    uint256 internal constant SWAP_FEE_PERCENTAGE_TOO_HIGH = 600;\\n    uint256 internal constant FLASH_LOAN_FEE_PERCENTAGE_TOO_HIGH = 601;\\n    uint256 internal constant INSUFFICIENT_FLASH_LOAN_FEE_AMOUNT = 602;\\n}\\n\",\"keccak256\":\"0x14f18d0c0051d5412a250536a9850f2698fe1ede9e4760d94142762a039f053b\",\"license\":\"GPL-3.0-or-later\"},\"@balancer-labs/v2-solidity-utils/contracts/helpers/ISignaturesValidator.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface for the SignatureValidator helper, used to support meta-transactions.\\n */\\ninterface ISignaturesValidator {\\n    /**\\n     * @dev Returns the EIP712 domain separator.\\n     */\\n    function getDomainSeparator() external view returns (bytes32);\\n\\n    /**\\n     * @dev Returns the next nonce used by an address to sign messages.\\n     */\\n    function getNextNonce(address user) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x2fe46b13b7c8bfc6f5c539c0b73d6325813f383f551b71fb6bca8dafd06964e1\",\"license\":\"GPL-3.0-or-later\"},\"@balancer-labs/v2-solidity-utils/contracts/helpers/ITemporarilyPausable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface for the TemporarilyPausable helper.\\n */\\ninterface ITemporarilyPausable {\\n    /**\\n     * @dev Emitted every time the pause state changes by `_setPaused`.\\n     */\\n    event PausedStateChanged(bool paused);\\n\\n    /**\\n     * @dev Returns the current paused state.\\n     */\\n    function getPausedState()\\n        external\\n        view\\n        returns (\\n            bool paused,\\n            uint256 pauseWindowEndTime,\\n            uint256 bufferPeriodEndTime\\n        );\\n}\\n\",\"keccak256\":\"0xb3e5b7c63f80b80ef3f0138eac56c397a439bf6b667fc06d5061aa869828b562\",\"license\":\"GPL-3.0-or-later\"},\"@balancer-labs/v2-solidity-utils/contracts/helpers/LogCompression.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../math/LogExpMath.sol\\\";\\n\\n/**\\n * @dev Library for encoding and decoding values stored inside a 256 bit word. Typically used to pack multiple values in\\n * a single storage slot, saving gas by performing less storage accesses.\\n *\\n * Each value is defined by its size and the least significant bit in the word, also known as offset. For example, two\\n * 128 bit values may be encoded in a word by assigning one an offset of 0, and the other an offset of 128.\\n */\\nlibrary LogCompression {\\n    int256 private constant _LOG_COMPRESSION_FACTOR = 1e14;\\n    int256 private constant _HALF_LOG_COMPRESSION_FACTOR = 0.5e14;\\n\\n    /**\\n     * @dev Returns the natural logarithm of `value`, dropping most of the decimal places to arrive at a value that,\\n     * when passed to `fromLowResLog`, will have a maximum relative error of ~0.05% compared to `value`.\\n     *\\n     * Values returned from this function should not be mixed with other fixed-point values (as they have a different\\n     * number of digits), but can be added or subtracted. Use `fromLowResLog` to undo this process and return to an\\n     * 18 decimal places fixed point value.\\n     *\\n     * Because so much precision is lost, the logarithmic values can be stored using much fewer bits than the original\\n     * value required.\\n     */\\n    function toLowResLog(uint256 value) internal pure returns (int256) {\\n        int256 ln = LogExpMath.ln(int256(value));\\n\\n        // Rounding division for signed numerator\\n        int256 lnWithError = (ln > 0 ? ln + _HALF_LOG_COMPRESSION_FACTOR : ln - _HALF_LOG_COMPRESSION_FACTOR);\\n        return lnWithError / _LOG_COMPRESSION_FACTOR;\\n    }\\n\\n    /**\\n     * @dev Restores `value` from logarithmic space. `value` is expected to be the result of a call to `toLowResLog`,\\n     * any other function that returns 4 decimals fixed point logarithms, or the sum of such values.\\n     */\\n    function fromLowResLog(int256 value) internal pure returns (uint256) {\\n        return uint256(LogExpMath.exp(value * _LOG_COMPRESSION_FACTOR));\\n    }\\n}\\n\",\"keccak256\":\"0xa42dbeb7daac5e4f89d5aad5737317162275ae3466e0b7acce766768cbdb15dc\",\"license\":\"GPL-3.0-or-later\"},\"@balancer-labs/v2-solidity-utils/contracts/helpers/WordCodec.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Library for encoding and decoding values stored inside a 256 bit word. Typically used to pack multiple values in\\n * a single storage slot, saving gas by performing less storage accesses.\\n *\\n * Each value is defined by its size and the least significant bit in the word, also known as offset. For example, two\\n * 128 bit values may be encoded in a word by assigning one an offset of 0, and the other an offset of 128.\\n */\\nlibrary WordCodec {\\n    // Masks are values with the least significant N bits set. They can be used to extract an encoded value from a word,\\n    // or to insert a new one replacing the old.\\n    uint256 private constant _MASK_1 = 2**(1) - 1;\\n    uint256 private constant _MASK_5 = 2**(5) - 1;\\n    uint256 private constant _MASK_7 = 2**(7) - 1;\\n    uint256 private constant _MASK_10 = 2**(10) - 1;\\n    uint256 private constant _MASK_16 = 2**(16) - 1;\\n    uint256 private constant _MASK_22 = 2**(22) - 1;\\n    uint256 private constant _MASK_31 = 2**(31) - 1;\\n    uint256 private constant _MASK_32 = 2**(32) - 1;\\n    uint256 private constant _MASK_53 = 2**(53) - 1;\\n    uint256 private constant _MASK_64 = 2**(64) - 1;\\n    uint256 private constant _MASK_128 = 2**(128) - 1;\\n    uint256 private constant _MASK_192 = 2**(192) - 1;\\n\\n    // Largest positive values that can be represented as N bits signed integers.\\n    int256 private constant _MAX_INT_22 = 2**(21) - 1;\\n    int256 private constant _MAX_INT_53 = 2**(52) - 1;\\n\\n    // In-place insertion\\n\\n    /**\\n     * @dev Inserts a boolean value shifted by an offset into a 256 bit word, replacing the old value. Returns the new\\n     * word.\\n     */\\n    function insertBool(\\n        bytes32 word,\\n        bool value,\\n        uint256 offset\\n    ) internal pure returns (bytes32) {\\n        bytes32 clearedWord = bytes32(uint256(word) & ~(_MASK_1 << offset));\\n        return clearedWord | bytes32(uint256(value ? 1 : 0) << offset);\\n    }\\n\\n    // Unsigned\\n\\n    /**\\n     * @dev Inserts a 5 bit unsigned integer shifted by an offset into a 256 bit word, replacing the old value. Returns\\n     * the new word.\\n     *\\n     * Assumes `value` only uses its least significant 5 bits, otherwise it may overwrite sibling bytes.\\n     */\\n    function insertUint5(\\n        bytes32 word,\\n        uint256 value,\\n        uint256 offset\\n    ) internal pure returns (bytes32) {\\n        bytes32 clearedWord = bytes32(uint256(word) & ~(_MASK_5 << offset));\\n        return clearedWord | bytes32(value << offset);\\n    }\\n\\n    /**\\n     * @dev Inserts a 7 bit unsigned integer shifted by an offset into a 256 bit word, replacing the old value. Returns\\n     * the new word.\\n     *\\n     * Assumes `value` only uses its least significant 7 bits, otherwise it may overwrite sibling bytes.\\n     */\\n    function insertUint7(\\n        bytes32 word,\\n        uint256 value,\\n        uint256 offset\\n    ) internal pure returns (bytes32) {\\n        bytes32 clearedWord = bytes32(uint256(word) & ~(_MASK_7 << offset));\\n        return clearedWord | bytes32(value << offset);\\n    }\\n\\n    /**\\n     * @dev Inserts a 10 bit unsigned integer shifted by an offset into a 256 bit word, replacing the old value. Returns\\n     * the new word.\\n     *\\n     * Assumes `value` only uses its least significant 10 bits, otherwise it may overwrite sibling bytes.\\n     */\\n    function insertUint10(\\n        bytes32 word,\\n        uint256 value,\\n        uint256 offset\\n    ) internal pure returns (bytes32) {\\n        bytes32 clearedWord = bytes32(uint256(word) & ~(_MASK_10 << offset));\\n        return clearedWord | bytes32(value << offset);\\n    }\\n\\n    /**\\n     * @dev Inserts a 16 bit unsigned integer shifted by an offset into a 256 bit word, replacing the old value.\\n     * Returns the new word.\\n     *\\n     * Assumes `value` only uses its least significant 16 bits, otherwise it may overwrite sibling bytes.\\n     */\\n    function insertUint16(\\n        bytes32 word,\\n        uint256 value,\\n        uint256 offset\\n    ) internal pure returns (bytes32) {\\n        bytes32 clearedWord = bytes32(uint256(word) & ~(_MASK_16 << offset));\\n        return clearedWord | bytes32(value << offset);\\n    }\\n\\n    /**\\n     * @dev Inserts a 31 bit unsigned integer shifted by an offset into a 256 bit word, replacing the old value. Returns\\n     * the new word.\\n     *\\n     * Assumes `value` can be represented using 31 bits.\\n     */\\n    function insertUint31(\\n        bytes32 word,\\n        uint256 value,\\n        uint256 offset\\n    ) internal pure returns (bytes32) {\\n        bytes32 clearedWord = bytes32(uint256(word) & ~(_MASK_31 << offset));\\n        return clearedWord | bytes32(value << offset);\\n    }\\n\\n    /**\\n     * @dev Inserts a 32 bit unsigned integer shifted by an offset into a 256 bit word, replacing the old value. Returns\\n     * the new word.\\n     *\\n     * Assumes `value` only uses its least significant 32 bits, otherwise it may overwrite sibling bytes.\\n     */\\n    function insertUint32(\\n        bytes32 word,\\n        uint256 value,\\n        uint256 offset\\n    ) internal pure returns (bytes32) {\\n        bytes32 clearedWord = bytes32(uint256(word) & ~(_MASK_32 << offset));\\n        return clearedWord | bytes32(value << offset);\\n    }\\n\\n    /**\\n     * @dev Inserts a 64 bit unsigned integer shifted by an offset into a 256 bit word, replacing the old value. Returns\\n     * the new word.\\n     *\\n     * Assumes `value` only uses its least significant 64 bits, otherwise it may overwrite sibling bytes.\\n     */\\n    function insertUint64(\\n        bytes32 word,\\n        uint256 value,\\n        uint256 offset\\n    ) internal pure returns (bytes32) {\\n        bytes32 clearedWord = bytes32(uint256(word) & ~(_MASK_64 << offset));\\n        return clearedWord | bytes32(value << offset);\\n    }\\n\\n    // Signed\\n\\n    /**\\n     * @dev Inserts a 22 bits signed integer shifted by an offset into a 256 bit word, replacing the old value. Returns\\n     * the new word.\\n     *\\n     * Assumes `value` can be represented using 22 bits.\\n     */\\n    function insertInt22(\\n        bytes32 word,\\n        int256 value,\\n        uint256 offset\\n    ) internal pure returns (bytes32) {\\n        bytes32 clearedWord = bytes32(uint256(word) & ~(_MASK_22 << offset));\\n        // Integer values need masking to remove the upper bits of negative values.\\n        return clearedWord | bytes32((uint256(value) & _MASK_22) << offset);\\n    }\\n\\n    // Bytes\\n\\n    /**\\n     * @dev Inserts 192 bit shifted by an offset into a 256 bit word, replacing the old value. Returns the new word.\\n     *\\n     * Assumes `value` can be represented using 192 bits.\\n     */\\n    function insertBits192(\\n        bytes32 word,\\n        bytes32 value,\\n        uint256 offset\\n    ) internal pure returns (bytes32) {\\n        bytes32 clearedWord = bytes32(uint256(word) & ~(_MASK_192 << offset));\\n        return clearedWord | bytes32((uint256(value) & _MASK_192) << offset);\\n    }\\n\\n    // Encoding\\n\\n    // Unsigned\\n\\n    /**\\n     * @dev Encodes an unsigned integer shifted by an offset. This performs no size checks: it is up to the caller to\\n     * ensure that the values are bounded.\\n     *\\n     * The return value can be logically ORed with other encoded values to form a 256 bit word.\\n     */\\n    function encodeUint(uint256 value, uint256 offset) internal pure returns (bytes32) {\\n        return bytes32(value << offset);\\n    }\\n\\n    // Signed\\n\\n    /**\\n     * @dev Encodes a 22 bits signed integer shifted by an offset.\\n     *\\n     * The return value can be logically ORed with other encoded values to form a 256 bit word.\\n     */\\n    function encodeInt22(int256 value, uint256 offset) internal pure returns (bytes32) {\\n        // Integer values need masking to remove the upper bits of negative values.\\n        return bytes32((uint256(value) & _MASK_22) << offset);\\n    }\\n\\n    /**\\n     * @dev Encodes a 53 bits signed integer shifted by an offset.\\n     *\\n     * The return value can be logically ORed with other encoded values to form a 256 bit word.\\n     */\\n    function encodeInt53(int256 value, uint256 offset) internal pure returns (bytes32) {\\n        // Integer values need masking to remove the upper bits of negative values.\\n        return bytes32((uint256(value) & _MASK_53) << offset);\\n    }\\n\\n    // Decoding\\n\\n    /**\\n     * @dev Decodes and returns a boolean shifted by an offset from a 256 bit word.\\n     */\\n    function decodeBool(bytes32 word, uint256 offset) internal pure returns (bool) {\\n        return (uint256(word >> offset) & _MASK_1) == 1;\\n    }\\n\\n    // Unsigned\\n\\n    /**\\n     * @dev Decodes and returns a 5 bit unsigned integer shifted by an offset from a 256 bit word.\\n     */\\n    function decodeUint5(bytes32 word, uint256 offset) internal pure returns (uint256) {\\n        return uint256(word >> offset) & _MASK_5;\\n    }\\n\\n    /**\\n     * @dev Decodes and returns a 7 bit unsigned integer shifted by an offset from a 256 bit word.\\n     */\\n    function decodeUint7(bytes32 word, uint256 offset) internal pure returns (uint256) {\\n        return uint256(word >> offset) & _MASK_7;\\n    }\\n\\n    /**\\n     * @dev Decodes and returns a 10 bit unsigned integer shifted by an offset from a 256 bit word.\\n     */\\n    function decodeUint10(bytes32 word, uint256 offset) internal pure returns (uint256) {\\n        return uint256(word >> offset) & _MASK_10;\\n    }\\n\\n    /**\\n     * @dev Decodes and returns a 16 bit unsigned integer shifted by an offset from a 256 bit word.\\n     */\\n    function decodeUint16(bytes32 word, uint256 offset) internal pure returns (uint256) {\\n        return uint256(word >> offset) & _MASK_16;\\n    }\\n\\n    /**\\n     * @dev Decodes and returns a 31 bit unsigned integer shifted by an offset from a 256 bit word.\\n     */\\n    function decodeUint31(bytes32 word, uint256 offset) internal pure returns (uint256) {\\n        return uint256(word >> offset) & _MASK_31;\\n    }\\n\\n    /**\\n     * @dev Decodes and returns a 32 bit unsigned integer shifted by an offset from a 256 bit word.\\n     */\\n    function decodeUint32(bytes32 word, uint256 offset) internal pure returns (uint256) {\\n        return uint256(word >> offset) & _MASK_32;\\n    }\\n\\n    /**\\n     * @dev Decodes and returns a 64 bit unsigned integer shifted by an offset from a 256 bit word.\\n     */\\n    function decodeUint64(bytes32 word, uint256 offset) internal pure returns (uint256) {\\n        return uint256(word >> offset) & _MASK_64;\\n    }\\n\\n    /**\\n     * @dev Decodes and returns a 128 bit unsigned integer shifted by an offset from a 256 bit word.\\n     */\\n    function decodeUint128(bytes32 word, uint256 offset) internal pure returns (uint256) {\\n        return uint256(word >> offset) & _MASK_128;\\n    }\\n\\n    // Signed\\n\\n    /**\\n     * @dev Decodes and returns a 22 bits signed integer shifted by an offset from a 256 bit word.\\n     */\\n    function decodeInt22(bytes32 word, uint256 offset) internal pure returns (int256) {\\n        int256 value = int256(uint256(word >> offset) & _MASK_22);\\n        // In case the decoded value is greater than the max positive integer that can be represented with 22 bits,\\n        // we know it was originally a negative integer. Therefore, we mask it to restore the sign in the 256 bit\\n        // representation.\\n        return value > _MAX_INT_22 ? (value | int256(~_MASK_22)) : value;\\n    }\\n\\n    /**\\n     * @dev Decodes and returns a 53 bits signed integer shifted by an offset from a 256 bit word.\\n     */\\n    function decodeInt53(bytes32 word, uint256 offset) internal pure returns (int256) {\\n        int256 value = int256(uint256(word >> offset) & _MASK_53);\\n        // In case the decoded value is greater than the max positive integer that can be represented with 53 bits,\\n        // we know it was originally a negative integer. Therefore, we mask it to restore the sign in the 256 bit\\n        // representation.\\n\\n        return value > _MAX_INT_53 ? (value | int256(~_MASK_53)) : value;\\n    }\\n}\\n\",\"keccak256\":\"0x249ab0ca13bd69ddf63b40d5b00ddd3c8bd7ddccb50d48c95692c32afa331fa2\",\"license\":\"GPL-3.0-or-later\"},\"@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./LogExpMath.sol\\\";\\nimport \\\"../helpers/BalancerErrors.sol\\\";\\n\\n/* solhint-disable private-vars-leading-underscore */\\n\\nlibrary FixedPoint {\\n    uint256 internal constant ONE = 1e18; // 18 decimal places\\n    uint256 internal constant MAX_POW_RELATIVE_ERROR = 10000; // 10^(-14)\\n\\n    // Minimum base for the power function when the exponent is 'free' (larger than ONE).\\n    uint256 internal constant MIN_POW_BASE_FREE_EXPONENT = 0.7e18;\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Fixed Point addition is the same as regular checked addition\\n\\n        uint256 c = a + b;\\n        _require(c >= a, Errors.ADD_OVERFLOW);\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Fixed Point addition is the same as regular checked addition\\n\\n        _require(b <= a, Errors.SUB_OVERFLOW);\\n        uint256 c = a - b;\\n        return c;\\n    }\\n\\n    function mulDown(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 product = a * b;\\n        _require(a == 0 || product / a == b, Errors.MUL_OVERFLOW);\\n\\n        return product / ONE;\\n    }\\n\\n    function mulUp(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 product = a * b;\\n        _require(a == 0 || product / a == b, Errors.MUL_OVERFLOW);\\n\\n        if (product == 0) {\\n            return 0;\\n        } else {\\n            // The traditional divUp formula is:\\n            // divUp(x, y) := (x + y - 1) / y\\n            // To avoid intermediate overflow in the addition, we distribute the division and get:\\n            // divUp(x, y) := (x - 1) / y + 1\\n            // Note that this requires x != 0, which we already tested for.\\n\\n            return ((product - 1) / ONE) + 1;\\n        }\\n    }\\n\\n    function divDown(uint256 a, uint256 b) internal pure returns (uint256) {\\n        _require(b != 0, Errors.ZERO_DIVISION);\\n\\n        if (a == 0) {\\n            return 0;\\n        } else {\\n            uint256 aInflated = a * ONE;\\n            _require(aInflated / a == ONE, Errors.DIV_INTERNAL); // mul overflow\\n\\n            return aInflated / b;\\n        }\\n    }\\n\\n    function divUp(uint256 a, uint256 b) internal pure returns (uint256) {\\n        _require(b != 0, Errors.ZERO_DIVISION);\\n\\n        if (a == 0) {\\n            return 0;\\n        } else {\\n            uint256 aInflated = a * ONE;\\n            _require(aInflated / a == ONE, Errors.DIV_INTERNAL); // mul overflow\\n\\n            // The traditional divUp formula is:\\n            // divUp(x, y) := (x + y - 1) / y\\n            // To avoid intermediate overflow in the addition, we distribute the division and get:\\n            // divUp(x, y) := (x - 1) / y + 1\\n            // Note that this requires x != 0, which we already tested for.\\n\\n            return ((aInflated - 1) / b) + 1;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns x^y, assuming both are fixed point numbers, rounding down. The result is guaranteed to not be above\\n     * the true value (that is, the error function expected - actual is always positive).\\n     */\\n    function powDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        uint256 raw = LogExpMath.pow(x, y);\\n        uint256 maxError = add(mulUp(raw, MAX_POW_RELATIVE_ERROR), 1);\\n\\n        if (raw < maxError) {\\n            return 0;\\n        } else {\\n            return sub(raw, maxError);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns x^y, assuming both are fixed point numbers, rounding up. The result is guaranteed to not be below\\n     * the true value (that is, the error function expected - actual is always negative).\\n     */\\n    function powUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        uint256 raw = LogExpMath.pow(x, y);\\n        uint256 maxError = add(mulUp(raw, MAX_POW_RELATIVE_ERROR), 1);\\n\\n        return add(raw, maxError);\\n    }\\n\\n    /**\\n     * @dev Returns the complement of a value (1 - x), capped to 0 if x is larger than 1.\\n     *\\n     * Useful when computing the complement for values with some level of relative error, as it strips this error and\\n     * prevents intermediate negative values.\\n     */\\n    function complement(uint256 x) internal pure returns (uint256) {\\n        return (x < ONE) ? (ONE - x) : 0;\\n    }\\n}\\n\",\"keccak256\":\"0x38720507bb6c838df83953d1ffa88b97d0e06baefa0e3e387303cb8a090a49f5\",\"license\":\"GPL-3.0-or-later\"},\"@balancer-labs/v2-solidity-utils/contracts/math/LogExpMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated\\n// documentation files (the \\u201cSoftware\\u201d), to deal in the Software without restriction, including without limitation the\\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to\\n// permit persons to whom the Software is furnished to do so, subject to the following conditions:\\n\\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the\\n// Software.\\n\\n// THE SOFTWARE IS PROVIDED \\u201cAS IS\\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE\\n// WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../helpers/BalancerErrors.sol\\\";\\n\\n/* solhint-disable */\\n\\n/**\\n * @dev Exponentiation and logarithm functions for 18 decimal fixed point numbers (both base and exponent/argument).\\n *\\n * Exponentiation and logarithm with arbitrary bases (x^y and log_x(y)) are implemented by conversion to natural\\n * exponentiation and logarithm (where the base is Euler's number).\\n *\\n * @author Fernando Martinelli - @fernandomartinelli\\n * @author Sergio Yuhjtman - @sergioyuhjtman\\n * @author Daniel Fernandez - @dmf7z\\n */\\nlibrary LogExpMath {\\n    // All fixed point multiplications and divisions are inlined. This means we need to divide by ONE when multiplying\\n    // two numbers, and multiply by ONE when dividing them.\\n\\n    // All arguments and return values are 18 decimal fixed point numbers.\\n    int256 constant ONE_18 = 1e18;\\n\\n    // Internally, intermediate values are computed with higher precision as 20 decimal fixed point numbers, and in the\\n    // case of ln36, 36 decimals.\\n    int256 constant ONE_20 = 1e20;\\n    int256 constant ONE_36 = 1e36;\\n\\n    // The domain of natural exponentiation is bound by the word size and number of decimals used.\\n    //\\n    // Because internally the result will be stored using 20 decimals, the largest possible result is\\n    // (2^255 - 1) / 10^20, which makes the largest exponent ln((2^255 - 1) / 10^20) = 130.700829182905140221.\\n    // The smallest possible result is 10^(-18), which makes largest negative argument\\n    // ln(10^(-18)) = -41.446531673892822312.\\n    // We use 130.0 and -41.0 to have some safety margin.\\n    int256 constant MAX_NATURAL_EXPONENT = 130e18;\\n    int256 constant MIN_NATURAL_EXPONENT = -41e18;\\n\\n    // Bounds for ln_36's argument. Both ln(0.9) and ln(1.1) can be represented with 36 decimal places in a fixed point\\n    // 256 bit integer.\\n    int256 constant LN_36_LOWER_BOUND = ONE_18 - 1e17;\\n    int256 constant LN_36_UPPER_BOUND = ONE_18 + 1e17;\\n\\n    uint256 constant MILD_EXPONENT_BOUND = 2**254 / uint256(ONE_20);\\n\\n    // 18 decimal constants\\n    int256 constant x0 = 128000000000000000000; // 2\\u02c67\\n    int256 constant a0 = 38877084059945950922200000000000000000000000000000000000; // e\\u02c6(x0) (no decimals)\\n    int256 constant x1 = 64000000000000000000; // 2\\u02c66\\n    int256 constant a1 = 6235149080811616882910000000; // e\\u02c6(x1) (no decimals)\\n\\n    // 20 decimal constants\\n    int256 constant x2 = 3200000000000000000000; // 2\\u02c65\\n    int256 constant a2 = 7896296018268069516100000000000000; // e\\u02c6(x2)\\n    int256 constant x3 = 1600000000000000000000; // 2\\u02c64\\n    int256 constant a3 = 888611052050787263676000000; // e\\u02c6(x3)\\n    int256 constant x4 = 800000000000000000000; // 2\\u02c63\\n    int256 constant a4 = 298095798704172827474000; // e\\u02c6(x4)\\n    int256 constant x5 = 400000000000000000000; // 2\\u02c62\\n    int256 constant a5 = 5459815003314423907810; // e\\u02c6(x5)\\n    int256 constant x6 = 200000000000000000000; // 2\\u02c61\\n    int256 constant a6 = 738905609893065022723; // e\\u02c6(x6)\\n    int256 constant x7 = 100000000000000000000; // 2\\u02c60\\n    int256 constant a7 = 271828182845904523536; // e\\u02c6(x7)\\n    int256 constant x8 = 50000000000000000000; // 2\\u02c6-1\\n    int256 constant a8 = 164872127070012814685; // e\\u02c6(x8)\\n    int256 constant x9 = 25000000000000000000; // 2\\u02c6-2\\n    int256 constant a9 = 128402541668774148407; // e\\u02c6(x9)\\n    int256 constant x10 = 12500000000000000000; // 2\\u02c6-3\\n    int256 constant a10 = 113314845306682631683; // e\\u02c6(x10)\\n    int256 constant x11 = 6250000000000000000; // 2\\u02c6-4\\n    int256 constant a11 = 106449445891785942956; // e\\u02c6(x11)\\n\\n    /**\\n     * @dev Exponentiation (x^y) with unsigned 18 decimal fixed point base and exponent.\\n     *\\n     * Reverts if ln(x) * y is smaller than `MIN_NATURAL_EXPONENT`, or larger than `MAX_NATURAL_EXPONENT`.\\n     */\\n    function pow(uint256 x, uint256 y) internal pure returns (uint256) {\\n        if (y == 0) {\\n            // We solve the 0^0 indetermination by making it equal one.\\n            return uint256(ONE_18);\\n        }\\n\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        // Instead of computing x^y directly, we instead rely on the properties of logarithms and exponentiation to\\n        // arrive at that result. In particular, exp(ln(x)) = x, and ln(x^y) = y * ln(x). This means\\n        // x^y = exp(y * ln(x)).\\n\\n        // The ln function takes a signed value, so we need to make sure x fits in the signed 256 bit range.\\n        _require(x < 2**255, Errors.X_OUT_OF_BOUNDS);\\n        int256 x_int256 = int256(x);\\n\\n        // We will compute y * ln(x) in a single step. Depending on the value of x, we can either use ln or ln_36. In\\n        // both cases, we leave the division by ONE_18 (due to fixed point multiplication) to the end.\\n\\n        // This prevents y * ln(x) from overflowing, and at the same time guarantees y fits in the signed 256 bit range.\\n        _require(y < MILD_EXPONENT_BOUND, Errors.Y_OUT_OF_BOUNDS);\\n        int256 y_int256 = int256(y);\\n\\n        int256 logx_times_y;\\n        if (LN_36_LOWER_BOUND < x_int256 && x_int256 < LN_36_UPPER_BOUND) {\\n            int256 ln_36_x = _ln_36(x_int256);\\n\\n            // ln_36_x has 36 decimal places, so multiplying by y_int256 isn't as straightforward, since we can't just\\n            // bring y_int256 to 36 decimal places, as it might overflow. Instead, we perform two 18 decimal\\n            // multiplications and add the results: one with the first 18 decimals of ln_36_x, and one with the\\n            // (downscaled) last 18 decimals.\\n            logx_times_y = ((ln_36_x / ONE_18) * y_int256 + ((ln_36_x % ONE_18) * y_int256) / ONE_18);\\n        } else {\\n            logx_times_y = _ln(x_int256) * y_int256;\\n        }\\n        logx_times_y /= ONE_18;\\n\\n        // Finally, we compute exp(y * ln(x)) to arrive at x^y\\n        _require(\\n            MIN_NATURAL_EXPONENT <= logx_times_y && logx_times_y <= MAX_NATURAL_EXPONENT,\\n            Errors.PRODUCT_OUT_OF_BOUNDS\\n        );\\n\\n        return uint256(exp(logx_times_y));\\n    }\\n\\n    /**\\n     * @dev Natural exponentiation (e^x) with signed 18 decimal fixed point exponent.\\n     *\\n     * Reverts if `x` is smaller than MIN_NATURAL_EXPONENT, or larger than `MAX_NATURAL_EXPONENT`.\\n     */\\n    function exp(int256 x) internal pure returns (int256) {\\n        _require(x >= MIN_NATURAL_EXPONENT && x <= MAX_NATURAL_EXPONENT, Errors.INVALID_EXPONENT);\\n\\n        if (x < 0) {\\n            // We only handle positive exponents: e^(-x) is computed as 1 / e^x. We can safely make x positive since it\\n            // fits in the signed 256 bit range (as it is larger than MIN_NATURAL_EXPONENT).\\n            // Fixed point division requires multiplying by ONE_18.\\n            return ((ONE_18 * ONE_18) / exp(-x));\\n        }\\n\\n        // First, we use the fact that e^(x+y) = e^x * e^y to decompose x into a sum of powers of two, which we call x_n,\\n        // where x_n == 2^(7 - n), and e^x_n = a_n has been precomputed. We choose the first x_n, x0, to equal 2^7\\n        // because all larger powers are larger than MAX_NATURAL_EXPONENT, and therefore not present in the\\n        // decomposition.\\n        // At the end of this process we will have the product of all e^x_n = a_n that apply, and the remainder of this\\n        // decomposition, which will be lower than the smallest x_n.\\n        // exp(x) = k_0 * a_0 * k_1 * a_1 * ... + k_n * a_n * exp(remainder), where each k_n equals either 0 or 1.\\n        // We mutate x by subtracting x_n, making it the remainder of the decomposition.\\n\\n        // The first two a_n (e^(2^7) and e^(2^6)) are too large if stored as 18 decimal numbers, and could cause\\n        // intermediate overflows. Instead we store them as plain integers, with 0 decimals.\\n        // Additionally, x0 + x1 is larger than MAX_NATURAL_EXPONENT, which means they will not both be present in the\\n        // decomposition.\\n\\n        // For each x_n, we test if that term is present in the decomposition (if x is larger than it), and if so deduct\\n        // it and compute the accumulated product.\\n\\n        int256 firstAN;\\n        if (x >= x0) {\\n            x -= x0;\\n            firstAN = a0;\\n        } else if (x >= x1) {\\n            x -= x1;\\n            firstAN = a1;\\n        } else {\\n            firstAN = 1; // One with no decimal places\\n        }\\n\\n        // We now transform x into a 20 decimal fixed point number, to have enhanced precision when computing the\\n        // smaller terms.\\n        x *= 100;\\n\\n        // `product` is the accumulated product of all a_n (except a0 and a1), which starts at 20 decimal fixed point\\n        // one. Recall that fixed point multiplication requires dividing by ONE_20.\\n        int256 product = ONE_20;\\n\\n        if (x >= x2) {\\n            x -= x2;\\n            product = (product * a2) / ONE_20;\\n        }\\n        if (x >= x3) {\\n            x -= x3;\\n            product = (product * a3) / ONE_20;\\n        }\\n        if (x >= x4) {\\n            x -= x4;\\n            product = (product * a4) / ONE_20;\\n        }\\n        if (x >= x5) {\\n            x -= x5;\\n            product = (product * a5) / ONE_20;\\n        }\\n        if (x >= x6) {\\n            x -= x6;\\n            product = (product * a6) / ONE_20;\\n        }\\n        if (x >= x7) {\\n            x -= x7;\\n            product = (product * a7) / ONE_20;\\n        }\\n        if (x >= x8) {\\n            x -= x8;\\n            product = (product * a8) / ONE_20;\\n        }\\n        if (x >= x9) {\\n            x -= x9;\\n            product = (product * a9) / ONE_20;\\n        }\\n\\n        // x10 and x11 are unnecessary here since we have high enough precision already.\\n\\n        // Now we need to compute e^x, where x is small (in particular, it is smaller than x9). We use the Taylor series\\n        // expansion for e^x: 1 + x + (x^2 / 2!) + (x^3 / 3!) + ... + (x^n / n!).\\n\\n        int256 seriesSum = ONE_20; // The initial one in the sum, with 20 decimal places.\\n        int256 term; // Each term in the sum, where the nth term is (x^n / n!).\\n\\n        // The first term is simply x.\\n        term = x;\\n        seriesSum += term;\\n\\n        // Each term (x^n / n!) equals the previous one times x, divided by n. Since x is a fixed point number,\\n        // multiplying by it requires dividing by ONE_20, but dividing by the non-fixed point n values does not.\\n\\n        term = ((term * x) / ONE_20) / 2;\\n        seriesSum += term;\\n\\n        term = ((term * x) / ONE_20) / 3;\\n        seriesSum += term;\\n\\n        term = ((term * x) / ONE_20) / 4;\\n        seriesSum += term;\\n\\n        term = ((term * x) / ONE_20) / 5;\\n        seriesSum += term;\\n\\n        term = ((term * x) / ONE_20) / 6;\\n        seriesSum += term;\\n\\n        term = ((term * x) / ONE_20) / 7;\\n        seriesSum += term;\\n\\n        term = ((term * x) / ONE_20) / 8;\\n        seriesSum += term;\\n\\n        term = ((term * x) / ONE_20) / 9;\\n        seriesSum += term;\\n\\n        term = ((term * x) / ONE_20) / 10;\\n        seriesSum += term;\\n\\n        term = ((term * x) / ONE_20) / 11;\\n        seriesSum += term;\\n\\n        term = ((term * x) / ONE_20) / 12;\\n        seriesSum += term;\\n\\n        // 12 Taylor terms are sufficient for 18 decimal precision.\\n\\n        // We now have the first a_n (with no decimals), and the product of all other a_n present, and the Taylor\\n        // approximation of the exponentiation of the remainder (both with 20 decimals). All that remains is to multiply\\n        // all three (one 20 decimal fixed point multiplication, dividing by ONE_20, and one integer multiplication),\\n        // and then drop two digits to return an 18 decimal value.\\n\\n        return (((product * seriesSum) / ONE_20) * firstAN) / 100;\\n    }\\n\\n    /**\\n     * @dev Logarithm (log(arg, base), with signed 18 decimal fixed point base and argument.\\n     */\\n    function log(int256 arg, int256 base) internal pure returns (int256) {\\n        // This performs a simple base change: log(arg, base) = ln(arg) / ln(base).\\n\\n        // Both logBase and logArg are computed as 36 decimal fixed point numbers, either by using ln_36, or by\\n        // upscaling.\\n\\n        int256 logBase;\\n        if (LN_36_LOWER_BOUND < base && base < LN_36_UPPER_BOUND) {\\n            logBase = _ln_36(base);\\n        } else {\\n            logBase = _ln(base) * ONE_18;\\n        }\\n\\n        int256 logArg;\\n        if (LN_36_LOWER_BOUND < arg && arg < LN_36_UPPER_BOUND) {\\n            logArg = _ln_36(arg);\\n        } else {\\n            logArg = _ln(arg) * ONE_18;\\n        }\\n\\n        // When dividing, we multiply by ONE_18 to arrive at a result with 18 decimal places\\n        return (logArg * ONE_18) / logBase;\\n    }\\n\\n    /**\\n     * @dev Natural logarithm (ln(a)) with signed 18 decimal fixed point argument.\\n     */\\n    function ln(int256 a) internal pure returns (int256) {\\n        // The real natural logarithm is not defined for negative numbers or zero.\\n        _require(a > 0, Errors.OUT_OF_BOUNDS);\\n        if (LN_36_LOWER_BOUND < a && a < LN_36_UPPER_BOUND) {\\n            return _ln_36(a) / ONE_18;\\n        } else {\\n            return _ln(a);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal natural logarithm (ln(a)) with signed 18 decimal fixed point argument.\\n     */\\n    function _ln(int256 a) private pure returns (int256) {\\n        if (a < ONE_18) {\\n            // Since ln(a^k) = k * ln(a), we can compute ln(a) as ln(a) = ln((1/a)^(-1)) = - ln((1/a)). If a is less\\n            // than one, 1/a will be greater than one, and this if statement will not be entered in the recursive call.\\n            // Fixed point division requires multiplying by ONE_18.\\n            return (-_ln((ONE_18 * ONE_18) / a));\\n        }\\n\\n        // First, we use the fact that ln^(a * b) = ln(a) + ln(b) to decompose ln(a) into a sum of powers of two, which\\n        // we call x_n, where x_n == 2^(7 - n), which are the natural logarithm of precomputed quantities a_n (that is,\\n        // ln(a_n) = x_n). We choose the first x_n, x0, to equal 2^7 because the exponential of all larger powers cannot\\n        // be represented as 18 fixed point decimal numbers in 256 bits, and are therefore larger than a.\\n        // At the end of this process we will have the sum of all x_n = ln(a_n) that apply, and the remainder of this\\n        // decomposition, which will be lower than the smallest a_n.\\n        // ln(a) = k_0 * x_0 + k_1 * x_1 + ... + k_n * x_n + ln(remainder), where each k_n equals either 0 or 1.\\n        // We mutate a by subtracting a_n, making it the remainder of the decomposition.\\n\\n        // For reasons related to how `exp` works, the first two a_n (e^(2^7) and e^(2^6)) are not stored as fixed point\\n        // numbers with 18 decimals, but instead as plain integers with 0 decimals, so we need to multiply them by\\n        // ONE_18 to convert them to fixed point.\\n        // For each a_n, we test if that term is present in the decomposition (if a is larger than it), and if so divide\\n        // by it and compute the accumulated sum.\\n\\n        int256 sum = 0;\\n        if (a >= a0 * ONE_18) {\\n            a /= a0; // Integer, not fixed point division\\n            sum += x0;\\n        }\\n\\n        if (a >= a1 * ONE_18) {\\n            a /= a1; // Integer, not fixed point division\\n            sum += x1;\\n        }\\n\\n        // All other a_n and x_n are stored as 20 digit fixed point numbers, so we convert the sum and a to this format.\\n        sum *= 100;\\n        a *= 100;\\n\\n        // Because further a_n are  20 digit fixed point numbers, we multiply by ONE_20 when dividing by them.\\n\\n        if (a >= a2) {\\n            a = (a * ONE_20) / a2;\\n            sum += x2;\\n        }\\n\\n        if (a >= a3) {\\n            a = (a * ONE_20) / a3;\\n            sum += x3;\\n        }\\n\\n        if (a >= a4) {\\n            a = (a * ONE_20) / a4;\\n            sum += x4;\\n        }\\n\\n        if (a >= a5) {\\n            a = (a * ONE_20) / a5;\\n            sum += x5;\\n        }\\n\\n        if (a >= a6) {\\n            a = (a * ONE_20) / a6;\\n            sum += x6;\\n        }\\n\\n        if (a >= a7) {\\n            a = (a * ONE_20) / a7;\\n            sum += x7;\\n        }\\n\\n        if (a >= a8) {\\n            a = (a * ONE_20) / a8;\\n            sum += x8;\\n        }\\n\\n        if (a >= a9) {\\n            a = (a * ONE_20) / a9;\\n            sum += x9;\\n        }\\n\\n        if (a >= a10) {\\n            a = (a * ONE_20) / a10;\\n            sum += x10;\\n        }\\n\\n        if (a >= a11) {\\n            a = (a * ONE_20) / a11;\\n            sum += x11;\\n        }\\n\\n        // a is now a small number (smaller than a_11, which roughly equals 1.06). This means we can use a Taylor series\\n        // that converges rapidly for values of `a` close to one - the same one used in ln_36.\\n        // Let z = (a - 1) / (a + 1).\\n        // ln(a) = 2 * (z + z^3 / 3 + z^5 / 5 + z^7 / 7 + ... + z^(2 * n + 1) / (2 * n + 1))\\n\\n        // Recall that 20 digit fixed point division requires multiplying by ONE_20, and multiplication requires\\n        // division by ONE_20.\\n        int256 z = ((a - ONE_20) * ONE_20) / (a + ONE_20);\\n        int256 z_squared = (z * z) / ONE_20;\\n\\n        // num is the numerator of the series: the z^(2 * n + 1) term\\n        int256 num = z;\\n\\n        // seriesSum holds the accumulated sum of each term in the series, starting with the initial z\\n        int256 seriesSum = num;\\n\\n        // In each step, the numerator is multiplied by z^2\\n        num = (num * z_squared) / ONE_20;\\n        seriesSum += num / 3;\\n\\n        num = (num * z_squared) / ONE_20;\\n        seriesSum += num / 5;\\n\\n        num = (num * z_squared) / ONE_20;\\n        seriesSum += num / 7;\\n\\n        num = (num * z_squared) / ONE_20;\\n        seriesSum += num / 9;\\n\\n        num = (num * z_squared) / ONE_20;\\n        seriesSum += num / 11;\\n\\n        // 6 Taylor terms are sufficient for 36 decimal precision.\\n\\n        // Finally, we multiply by 2 (non fixed point) to compute ln(remainder)\\n        seriesSum *= 2;\\n\\n        // We now have the sum of all x_n present, and the Taylor approximation of the logarithm of the remainder (both\\n        // with 20 decimals). All that remains is to sum these two, and then drop two digits to return a 18 decimal\\n        // value.\\n\\n        return (sum + seriesSum) / 100;\\n    }\\n\\n    /**\\n     * @dev Intrnal high precision (36 decimal places) natural logarithm (ln(x)) with signed 18 decimal fixed point argument,\\n     * for x close to one.\\n     *\\n     * Should only be used if x is between LN_36_LOWER_BOUND and LN_36_UPPER_BOUND.\\n     */\\n    function _ln_36(int256 x) private pure returns (int256) {\\n        // Since ln(1) = 0, a value of x close to one will yield a very small result, which makes using 36 digits\\n        // worthwhile.\\n\\n        // First, we transform x to a 36 digit fixed point value.\\n        x *= ONE_18;\\n\\n        // We will use the following Taylor expansion, which converges very rapidly. Let z = (x - 1) / (x + 1).\\n        // ln(x) = 2 * (z + z^3 / 3 + z^5 / 5 + z^7 / 7 + ... + z^(2 * n + 1) / (2 * n + 1))\\n\\n        // Recall that 36 digit fixed point division requires multiplying by ONE_36, and multiplication requires\\n        // division by ONE_36.\\n        int256 z = ((x - ONE_36) * ONE_36) / (x + ONE_36);\\n        int256 z_squared = (z * z) / ONE_36;\\n\\n        // num is the numerator of the series: the z^(2 * n + 1) term\\n        int256 num = z;\\n\\n        // seriesSum holds the accumulated sum of each term in the series, starting with the initial z\\n        int256 seriesSum = num;\\n\\n        // In each step, the numerator is multiplied by z^2\\n        num = (num * z_squared) / ONE_36;\\n        seriesSum += num / 3;\\n\\n        num = (num * z_squared) / ONE_36;\\n        seriesSum += num / 5;\\n\\n        num = (num * z_squared) / ONE_36;\\n        seriesSum += num / 7;\\n\\n        num = (num * z_squared) / ONE_36;\\n        seriesSum += num / 9;\\n\\n        num = (num * z_squared) / ONE_36;\\n        seriesSum += num / 11;\\n\\n        num = (num * z_squared) / ONE_36;\\n        seriesSum += num / 13;\\n\\n        num = (num * z_squared) / ONE_36;\\n        seriesSum += num / 15;\\n\\n        // 8 Taylor terms are sufficient for 36 decimal precision.\\n\\n        // All that remains is multiplying by 2 (non fixed point).\\n        return seriesSum * 2;\\n    }\\n}\\n\",\"keccak256\":\"0x66c6a4efc58bcc18d11fdc3236ec53f6044944918e86116f3aa3deee1daac8ef\",\"license\":\"MIT\"},\"@balancer-labs/v2-solidity-utils/contracts/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../helpers/BalancerErrors.sol\\\";\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow checks.\\n * Adapted from OpenZeppelin's SafeMath library\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the addition of two unsigned integers of 256 bits, reverting on overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        _require(c >= a, Errors.ADD_OVERFLOW);\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a + b;\\n        _require((b >= 0 && c >= a) || (b < 0 && c < a), Errors.ADD_OVERFLOW);\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers of 256 bits, reverting on overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        _require(b <= a, Errors.SUB_OVERFLOW);\\n        uint256 c = a - b;\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a - b;\\n        _require((b >= 0 && c <= a) || (b < 0 && c > a), Errors.SUB_OVERFLOW);\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers of 256 bits.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers of 256 bits.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a * b;\\n        _require(a == 0 || c / a == b, Errors.MUL_OVERFLOW);\\n        return c;\\n    }\\n\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        bool roundUp\\n    ) internal pure returns (uint256) {\\n        return roundUp ? divUp(a, b) : divDown(a, b);\\n    }\\n\\n    function divDown(uint256 a, uint256 b) internal pure returns (uint256) {\\n        _require(b != 0, Errors.ZERO_DIVISION);\\n        return a / b;\\n    }\\n\\n    function divUp(uint256 a, uint256 b) internal pure returns (uint256) {\\n        _require(b != 0, Errors.ZERO_DIVISION);\\n\\n        if (a == 0) {\\n            return 0;\\n        } else {\\n            return 1 + (a - 1) / b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb665c41c5d079058a53d3041d464ca5b6cac21de6a1e9ec514185c85eff2c5fa\",\"license\":\"MIT\"},\"@balancer-labs/v2-solidity-utils/contracts/misc/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../openzeppelin/IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for WETH9.\\n * See https://github.com/gnosis/canonical-weth/blob/0dd1ea3e295eef916d0c6223ec63141137d22d67/contracts/WETH9.sol\\n */\\ninterface IWETH is IERC20 {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x19a0628bedbe48178a4c90509a40d750d5039677b964ec533a24361a8d97274b\",\"license\":\"GPL-3.0-or-later\"},\"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        _HASHED_NAME = keccak256(bytes(name));\\n        _HASHED_VERSION = keccak256(bytes(version));\\n        _TYPE_HASH = keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view virtual returns (bytes32) {\\n        return keccak256(abi.encode(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION, _getChainId(), address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", _domainSeparatorV4(), structHash));\\n    }\\n\\n    function _getChainId() private view returns (uint256 chainId) {\\n        // Silence state mutability warning without generating bytecode.\\n        // See https://github.com/ethereum/solidity/issues/10090#issuecomment-741789128 and\\n        // https://github.com/ethereum/solidity/issues/2691\\n        this;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            chainId := chainid()\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0cf3ec5d6130aac057e69df14b1ff87baf9c6c2cb13bc545952def004e629ac0\",\"license\":\"MIT\"},\"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../helpers/BalancerErrors.sol\\\";\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(msg.sender, recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(\\n            sender,\\n            msg.sender,\\n            _allowances[sender][msg.sender].sub(amount, Errors.ERC20_TRANSFER_EXCEEDS_ALLOWANCE)\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(\\n            msg.sender,\\n            spender,\\n            _allowances[msg.sender][spender].sub(subtractedValue, Errors.ERC20_DECREASED_ALLOWANCE_BELOW_ZERO)\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        _require(sender != address(0), Errors.ERC20_TRANSFER_FROM_ZERO_ADDRESS);\\n        _require(recipient != address(0), Errors.ERC20_TRANSFER_TO_ZERO_ADDRESS);\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, Errors.ERC20_TRANSFER_EXCEEDS_BALANCE);\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        _require(account != address(0), Errors.ERC20_BURN_FROM_ZERO_ADDRESS);\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, Errors.ERC20_BURN_EXCEEDS_ALLOWANCE);\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4bd56e87f0041ba666a540160962cd9f1eed11164a9a91af180550d69da4c8bc\",\"license\":\"MIT\"},\"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./ERC20.sol\\\";\\nimport \\\"./IERC20Permit.sol\\\";\\nimport \\\"./EIP712.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * _Available since v3.4._\\n */\\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712 {\\n    mapping(address => uint256) private _nonces;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private immutable _PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n     */\\n    constructor(string memory name) EIP712(name, \\\"1\\\") {}\\n\\n    /**\\n     * @dev See {IERC20Permit-permit}.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        // solhint-disable-next-line not-rely-on-time\\n        _require(block.timestamp <= deadline, Errors.EXPIRED_PERMIT);\\n\\n        uint256 nonce = _nonces[owner];\\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, nonce, deadline));\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ecrecover(hash, v, r, s);\\n        _require((signer != address(0)) && (signer == owner), Errors.INVALID_SIGNATURE);\\n\\n        _nonces[owner] = nonce + 1;\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-nonces}.\\n     */\\n    function nonces(address owner) public view override returns (uint256) {\\n        return _nonces[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n}\\n\",\"keccak256\":\"0x28f96497e4b653b5ae3b3f1f34ce749dab19c1034304f77398c4958e8af7e900\",\"license\":\"MIT\"},\"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xd828a935a72a6d182912abba290e4debb8c684c36fd756088f7acb30e0b2bb76\",\"license\":\"MIT\"},\"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over `owner`'s tokens,\\n     * given `owner`'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for `permit`, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xffe929ce55ef0cbdcc60eee8bc9375c295757ad13afe3d757646538aa0429ff5\",\"license\":\"MIT\"},\"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../helpers/BalancerErrors.sol\\\";\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        _require(c >= a, Errors.ADD_OVERFLOW);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, Errors.SUB_OVERFLOW);\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, uint256 errorCode) internal pure returns (uint256) {\\n        _require(b <= a, errorCode);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n}\\n\",\"keccak256\":\"0xafe0542eb14932a66ce6280fbe9991130ead5bbcb7836d0a822fc4a59810c100\",\"license\":\"MIT\"},\"@balancer-labs/v2-vault/contracts/interfaces/IAsset.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev This is an empty interface used to represent either ERC20-conforming token contracts or ETH (using the zero\\n * address sentinel value). We're just relying on the fact that `interface` can be used to declare new address-like\\n * types.\\n *\\n * This concept is unrelated to a Pool's Asset Managers.\\n */\\ninterface IAsset {\\n    // solhint-disable-previous-line no-empty-blocks\\n}\\n\",\"keccak256\":\"0x70ecf1d48c285d78718bd2e159345677038ed8a81c74444bedd6a5c61af9aff6\",\"license\":\"GPL-3.0-or-later\"},\"@balancer-labs/v2-vault/contracts/interfaces/IAuthorizer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\ninterface IAuthorizer {\\n    /**\\n     * @dev Returns true if `account` can perform the action described by `actionId` in the contract `where`.\\n     */\\n    function canPerform(\\n        bytes32 actionId,\\n        address account,\\n        address where\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x792871e208bba1dad291f8d1cffad86f4afa5e2360816bd9c43481f7297155f5\",\"license\":\"GPL-3.0-or-later\"},\"@balancer-labs/v2-vault/contracts/interfaces/IBasePool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IVault.sol\\\";\\nimport \\\"./IPoolSwapStructs.sol\\\";\\n\\n/**\\n * @dev Interface for adding and removing liquidity that all Pool contracts should implement. Note that this is not\\n * the complete Pool contract interface, as it is missing the swap hooks. Pool contracts should also inherit from\\n * either IGeneralPool or IMinimalSwapInfoPool\\n */\\ninterface IBasePool is IPoolSwapStructs {\\n    /**\\n     * @dev Called by the Vault when a user calls `IVault.joinPool` to add liquidity to this Pool. Returns how many of\\n     * each registered token the user should provide, as well as the amount of protocol fees the Pool owes to the Vault.\\n     * The Vault will then take tokens from `sender` and add them to the Pool's balances, as well as collect\\n     * the reported amount in protocol fees, which the pool should calculate based on `protocolSwapFeePercentage`.\\n     *\\n     * Protocol fees are reported and charged on join events so that the Pool is free of debt whenever new users join.\\n     *\\n     * `sender` is the account performing the join (from which tokens will be withdrawn), and `recipient` is the account\\n     * designated to receive any benefits (typically pool shares). `balances` contains the total balances\\n     * for each token the Pool registered in the Vault, in the same order that `IVault.getPoolTokens` would return.\\n     *\\n     * `lastChangeBlock` is the last block in which *any* of the Pool's registered tokens last changed its total\\n     * balance.\\n     *\\n     * `userData` contains any pool-specific instructions needed to perform the calculations, such as the type of\\n     * join (e.g., proportional given an amount of pool shares, single-asset, multi-asset, etc.)\\n     *\\n     * Contracts implementing this function should check that the caller is indeed the Vault before performing any\\n     * state-changing operations, such as minting pool shares.\\n     */\\n    function onJoinPool(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        uint256[] memory balances,\\n        uint256 lastChangeBlock,\\n        uint256 protocolSwapFeePercentage,\\n        bytes memory userData\\n    ) external returns (uint256[] memory amountsIn, uint256[] memory dueProtocolFeeAmounts);\\n\\n    /**\\n     * @dev Called by the Vault when a user calls `IVault.exitPool` to remove liquidity from this Pool. Returns how many\\n     * tokens the Vault should deduct from the Pool's balances, as well as the amount of protocol fees the Pool owes\\n     * to the Vault. The Vault will then take tokens from the Pool's balances and send them to `recipient`,\\n     * as well as collect the reported amount in protocol fees, which the Pool should calculate based on\\n     * `protocolSwapFeePercentage`.\\n     *\\n     * Protocol fees are charged on exit events to guarantee that users exiting the Pool have paid their share.\\n     *\\n     * `sender` is the account performing the exit (typically the pool shareholder), and `recipient` is the account\\n     * to which the Vault will send the proceeds. `balances` contains the total token balances for each token\\n     * the Pool registered in the Vault, in the same order that `IVault.getPoolTokens` would return.\\n     *\\n     * `lastChangeBlock` is the last block in which *any* of the Pool's registered tokens last changed its total\\n     * balance.\\n     *\\n     * `userData` contains any pool-specific instructions needed to perform the calculations, such as the type of\\n     * exit (e.g., proportional given an amount of pool shares, single-asset, multi-asset, etc.)\\n     *\\n     * Contracts implementing this function should check that the caller is indeed the Vault before performing any\\n     * state-changing operations, such as burning pool shares.\\n     */\\n    function onExitPool(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        uint256[] memory balances,\\n        uint256 lastChangeBlock,\\n        uint256 protocolSwapFeePercentage,\\n        bytes memory userData\\n    ) external returns (uint256[] memory amountsOut, uint256[] memory dueProtocolFeeAmounts);\\n\\n    function getPoolId() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xceae7edca5dc3084127b998c4a5b4c8a01e00777484fb19fcc4d5199adc7f826\",\"license\":\"GPL-3.0-or-later\"},\"@balancer-labs/v2-vault/contracts/interfaces/IFlashLoanRecipient.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\n// Inspired by Aave Protocol's IFlashLoanReceiver.\\n\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/IERC20.sol\\\";\\n\\ninterface IFlashLoanRecipient {\\n    /**\\n     * @dev When `flashLoan` is called on the Vault, it invokes the `receiveFlashLoan` hook on the recipient.\\n     *\\n     * At the time of the call, the Vault will have transferred `amounts` for `tokens` to the recipient. Before this\\n     * call returns, the recipient must have transferred `amounts` plus `feeAmounts` for each token back to the\\n     * Vault, or else the entire flash loan will revert.\\n     *\\n     * `userData` is the same value passed in the `IVault.flashLoan` call.\\n     */\\n    function receiveFlashLoan(\\n        IERC20[] memory tokens,\\n        uint256[] memory amounts,\\n        uint256[] memory feeAmounts,\\n        bytes memory userData\\n    ) external;\\n}\\n\",\"keccak256\":\"0x5ceb7a9b209c01659b25898622a2415414e12a7200559e57283fd511fe96c92a\",\"license\":\"GPL-3.0-or-later\"},\"@balancer-labs/v2-vault/contracts/interfaces/IMinimalSwapInfoPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IBasePool.sol\\\";\\n\\n/**\\n * @dev Pool contracts with the MinimalSwapInfo or TwoToken specialization settings should implement this interface.\\n *\\n * This is called by the Vault when a user calls `IVault.swap` or `IVault.batchSwap` to swap with this Pool.\\n * Returns the number of tokens the Pool will grant to the user in a 'given in' swap, or that the user will grant\\n * to the pool in a 'given out' swap.\\n *\\n * This can often be implemented by a `view` function, since many pricing algorithms don't need to track state\\n * changes in swaps. However, contracts implementing this in non-view functions should check that the caller is\\n * indeed the Vault.\\n */\\ninterface IMinimalSwapInfoPool is IBasePool {\\n    function onSwap(\\n        SwapRequest memory swapRequest,\\n        uint256 currentBalanceTokenIn,\\n        uint256 currentBalanceTokenOut\\n    ) external returns (uint256 amount);\\n}\\n\",\"keccak256\":\"0x7469919e147c0db8b4f290d310ca3816dec5d3c6cc6b258cf6e0df820a20a179\",\"license\":\"GPL-3.0-or-later\"},\"@balancer-labs/v2-vault/contracts/interfaces/IPoolSwapStructs.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/IERC20.sol\\\";\\n\\nimport \\\"./IVault.sol\\\";\\n\\ninterface IPoolSwapStructs {\\n    // This is not really an interface - it just defines common structs used by other interfaces: IGeneralPool and\\n    // IMinimalSwapInfoPool.\\n    //\\n    // This data structure represents a request for a token swap, where `kind` indicates the swap type ('given in' or\\n    // 'given out') which indicates whether or not the amount sent by the pool is known.\\n    //\\n    // The pool receives `tokenIn` and sends `tokenOut`. `amount` is the number of `tokenIn` tokens the pool will take\\n    // in, or the number of `tokenOut` tokens the Pool will send out, depending on the given swap `kind`.\\n    //\\n    // All other fields are not strictly necessary for most swaps, but are provided to support advanced scenarios in\\n    // some Pools.\\n    //\\n    // `poolId` is the ID of the Pool involved in the swap - this is useful for Pool contracts that implement more than\\n    // one Pool.\\n    //\\n    // The meaning of `lastChangeBlock` depends on the Pool specialization:\\n    //  - Two Token or Minimal Swap Info: the last block in which either `tokenIn` or `tokenOut` changed its total\\n    //    balance.\\n    //  - General: the last block in which *any* of the Pool's registered tokens changed its total balance.\\n    //\\n    // `from` is the origin address for the funds the Pool receives, and `to` is the destination address\\n    // where the Pool sends the outgoing tokens.\\n    //\\n    // `userData` is extra data provided by the caller - typically a signature from a trusted party.\\n    struct SwapRequest {\\n        IVault.SwapKind kind;\\n        IERC20 tokenIn;\\n        IERC20 tokenOut;\\n        uint256 amount;\\n        // Misc data\\n        bytes32 poolId;\\n        uint256 lastChangeBlock;\\n        address from;\\n        address to;\\n        bytes userData;\\n    }\\n}\\n\",\"keccak256\":\"0x618519301dfd8c123981fef84161e3068988bc2a231cd41785c304ba45135af3\",\"license\":\"GPL-3.0-or-later\"},\"@balancer-labs/v2-vault/contracts/interfaces/IProtocolFeesCollector.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/IERC20.sol\\\";\\n\\nimport \\\"./IVault.sol\\\";\\nimport \\\"./IAuthorizer.sol\\\";\\n\\ninterface IProtocolFeesCollector {\\n    event SwapFeePercentageChanged(uint256 newSwapFeePercentage);\\n    event FlashLoanFeePercentageChanged(uint256 newFlashLoanFeePercentage);\\n\\n    function withdrawCollectedFees(\\n        IERC20[] calldata tokens,\\n        uint256[] calldata amounts,\\n        address recipient\\n    ) external;\\n\\n    function setSwapFeePercentage(uint256 newSwapFeePercentage) external;\\n\\n    function setFlashLoanFeePercentage(uint256 newFlashLoanFeePercentage) external;\\n\\n    function getSwapFeePercentage() external view returns (uint256);\\n\\n    function getFlashLoanFeePercentage() external view returns (uint256);\\n\\n    function getCollectedFeeAmounts(IERC20[] memory tokens) external view returns (uint256[] memory feeAmounts);\\n\\n    function getAuthorizer() external view returns (IAuthorizer);\\n\\n    function vault() external view returns (IVault);\\n}\\n\",\"keccak256\":\"0xacad6dfbdf2395aeb8b793b3cb5d9ee2702d8d5f667084ff7bfa248f64700f47\",\"license\":\"GPL-3.0-or-later\"},\"@balancer-labs/v2-vault/contracts/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/IERC20.sol\\\";\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/helpers/ISignaturesValidator.sol\\\";\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/helpers/ITemporarilyPausable.sol\\\";\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/misc/IWETH.sol\\\";\\n\\nimport \\\"./IAsset.sol\\\";\\nimport \\\"./IAuthorizer.sol\\\";\\nimport \\\"./IFlashLoanRecipient.sol\\\";\\nimport \\\"./IProtocolFeesCollector.sol\\\";\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Full external interface for the Vault core contract - no external or public methods exist in the contract that\\n * don't override one of these declarations.\\n */\\ninterface IVault is ISignaturesValidator, ITemporarilyPausable {\\n    // Generalities about the Vault:\\n    //\\n    // - Whenever documentation refers to 'tokens', it strictly refers to ERC20-compliant token contracts. Tokens are\\n    // transferred out of the Vault by calling the `IERC20.transfer` function, and transferred in by calling\\n    // `IERC20.transferFrom`. In these cases, the sender must have previously allowed the Vault to use their tokens by\\n    // calling `IERC20.approve`. The only deviation from the ERC20 standard that is supported is functions not returning\\n    // a boolean value: in these scenarios, a non-reverting call is assumed to be successful.\\n    //\\n    // - All non-view functions in the Vault are non-reentrant: calling them while another one is mid-execution (e.g.\\n    // while execution control is transferred to a token contract during a swap) will result in a revert. View\\n    // functions can be called in a re-reentrant way, but doing so might cause them to return inconsistent results.\\n    // Contracts calling view functions in the Vault must make sure the Vault has not already been entered.\\n    //\\n    // - View functions revert if referring to either unregistered Pools, or unregistered tokens for registered Pools.\\n\\n    // Authorizer\\n    //\\n    // Some system actions are permissioned, like setting and collecting protocol fees. This permissioning system exists\\n    // outside of the Vault in the Authorizer contract: the Vault simply calls the Authorizer to check if the caller\\n    // can perform a given action.\\n\\n    /**\\n     * @dev Returns the Vault's Authorizer.\\n     */\\n    function getAuthorizer() external view returns (IAuthorizer);\\n\\n    /**\\n     * @dev Sets a new Authorizer for the Vault. The caller must be allowed by the current Authorizer to do this.\\n     *\\n     * Emits an `AuthorizerChanged` event.\\n     */\\n    function setAuthorizer(IAuthorizer newAuthorizer) external;\\n\\n    /**\\n     * @dev Emitted when a new authorizer is set by `setAuthorizer`.\\n     */\\n    event AuthorizerChanged(IAuthorizer indexed newAuthorizer);\\n\\n    // Relayers\\n    //\\n    // Additionally, it is possible for an account to perform certain actions on behalf of another one, using their\\n    // Vault ERC20 allowance and Internal Balance. These accounts are said to be 'relayers' for these Vault functions,\\n    // and are expected to be smart contracts with sound authentication mechanisms. For an account to be able to wield\\n    // this power, two things must occur:\\n    //  - The Authorizer must grant the account the permission to be a relayer for the relevant Vault function. This\\n    //    means that Balancer governance must approve each individual contract to act as a relayer for the intended\\n    //    functions.\\n    //  - Each user must approve the relayer to act on their behalf.\\n    // This double protection means users cannot be tricked into approving malicious relayers (because they will not\\n    // have been allowed by the Authorizer via governance), nor can malicious relayers approved by a compromised\\n    // Authorizer or governance drain user funds, since they would also need to be approved by each individual user.\\n\\n    /**\\n     * @dev Returns true if `user` has approved `relayer` to act as a relayer for them.\\n     */\\n    function hasApprovedRelayer(address user, address relayer) external view returns (bool);\\n\\n    /**\\n     * @dev Allows `relayer` to act as a relayer for `sender` if `approved` is true, and disallows it otherwise.\\n     *\\n     * Emits a `RelayerApprovalChanged` event.\\n     */\\n    function setRelayerApproval(\\n        address sender,\\n        address relayer,\\n        bool approved\\n    ) external;\\n\\n    /**\\n     * @dev Emitted every time a relayer is approved or disapproved by `setRelayerApproval`.\\n     */\\n    event RelayerApprovalChanged(address indexed relayer, address indexed sender, bool approved);\\n\\n    // Internal Balance\\n    //\\n    // Users can deposit tokens into the Vault, where they are allocated to their Internal Balance, and later\\n    // transferred or withdrawn. It can also be used as a source of tokens when joining Pools, as a destination\\n    // when exiting them, and as either when performing swaps. This usage of Internal Balance results in greatly reduced\\n    // gas costs when compared to relying on plain ERC20 transfers, leading to large savings for frequent users.\\n    //\\n    // Internal Balance management features batching, which means a single contract call can be used to perform multiple\\n    // operations of different kinds, with different senders and recipients, at once.\\n\\n    /**\\n     * @dev Returns `user`'s Internal Balance for a set of tokens.\\n     */\\n    function getInternalBalance(address user, IERC20[] memory tokens) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Performs a set of user balance operations, which involve Internal Balance (deposit, withdraw or transfer)\\n     * and plain ERC20 transfers using the Vault's allowance. This last feature is particularly useful for relayers, as\\n     * it lets integrators reuse a user's Vault allowance.\\n     *\\n     * For each operation, if the caller is not `sender`, it must be an authorized relayer for them.\\n     */\\n    function manageUserBalance(UserBalanceOp[] memory ops) external payable;\\n\\n    /**\\n     * @dev Data for `manageUserBalance` operations, which include the possibility for ETH to be sent and received\\n     without manual WETH wrapping or unwrapping.\\n     */\\n    struct UserBalanceOp {\\n        UserBalanceOpKind kind;\\n        IAsset asset;\\n        uint256 amount;\\n        address sender;\\n        address payable recipient;\\n    }\\n\\n    // There are four possible operations in `manageUserBalance`:\\n    //\\n    // - DEPOSIT_INTERNAL\\n    // Increases the Internal Balance of the `recipient` account by transferring tokens from the corresponding\\n    // `sender`. The sender must have allowed the Vault to use their tokens via `IERC20.approve()`.\\n    //\\n    // ETH can be used by passing the ETH sentinel value as the asset and forwarding ETH in the call: it will be wrapped\\n    // and deposited as WETH. Any ETH amount remaining will be sent back to the caller (not the sender, which is\\n    // relevant for relayers).\\n    //\\n    // Emits an `InternalBalanceChanged` event.\\n    //\\n    //\\n    // - WITHDRAW_INTERNAL\\n    // Decreases the Internal Balance of the `sender` account by transferring tokens to the `recipient`.\\n    //\\n    // ETH can be used by passing the ETH sentinel value as the asset. This will deduct WETH instead, unwrap it and send\\n    // it to the recipient as ETH.\\n    //\\n    // Emits an `InternalBalanceChanged` event.\\n    //\\n    //\\n    // - TRANSFER_INTERNAL\\n    // Transfers tokens from the Internal Balance of the `sender` account to the Internal Balance of `recipient`.\\n    //\\n    // Reverts if the ETH sentinel value is passed.\\n    //\\n    // Emits an `InternalBalanceChanged` event.\\n    //\\n    //\\n    // - TRANSFER_EXTERNAL\\n    // Transfers tokens from `sender` to `recipient`, using the Vault's ERC20 allowance. This is typically used by\\n    // relayers, as it lets them reuse a user's Vault allowance.\\n    //\\n    // Reverts if the ETH sentinel value is passed.\\n    //\\n    // Emits an `ExternalBalanceTransfer` event.\\n\\n    enum UserBalanceOpKind { DEPOSIT_INTERNAL, WITHDRAW_INTERNAL, TRANSFER_INTERNAL, TRANSFER_EXTERNAL }\\n\\n    /**\\n     * @dev Emitted when a user's Internal Balance changes, either from calls to `manageUserBalance`, or through\\n     * interacting with Pools using Internal Balance.\\n     *\\n     * Because Internal Balance works exclusively with ERC20 tokens, ETH deposits and withdrawals will use the WETH\\n     * address.\\n     */\\n    event InternalBalanceChanged(address indexed user, IERC20 indexed token, int256 delta);\\n\\n    /**\\n     * @dev Emitted when a user's Vault ERC20 allowance is used by the Vault to transfer tokens to an external account.\\n     */\\n    event ExternalBalanceTransfer(IERC20 indexed token, address indexed sender, address recipient, uint256 amount);\\n\\n    // Pools\\n    //\\n    // There are three specialization settings for Pools, which allow for cheaper swaps at the cost of reduced\\n    // functionality:\\n    //\\n    //  - General: no specialization, suited for all Pools. IGeneralPool is used for swap request callbacks, passing the\\n    // balance of all tokens in the Pool. These Pools have the largest swap costs (because of the extra storage reads),\\n    // which increase with the number of registered tokens.\\n    //\\n    //  - Minimal Swap Info: IMinimalSwapInfoPool is used instead of IGeneralPool, which saves gas by only passing the\\n    // balance of the two tokens involved in the swap. This is suitable for some pricing algorithms, like the weighted\\n    // constant product one popularized by Balancer V1. Swap costs are smaller compared to general Pools, and are\\n    // independent of the number of registered tokens.\\n    //\\n    //  - Two Token: only allows two tokens to be registered. This achieves the lowest possible swap gas cost. Like\\n    // minimal swap info Pools, these are called via IMinimalSwapInfoPool.\\n\\n    enum PoolSpecialization { GENERAL, MINIMAL_SWAP_INFO, TWO_TOKEN }\\n\\n    /**\\n     * @dev Registers the caller account as a Pool with a given specialization setting. Returns the Pool's ID, which\\n     * is used in all Pool-related functions. Pools cannot be deregistered, nor can the Pool's specialization be\\n     * changed.\\n     *\\n     * The caller is expected to be a smart contract that implements either `IGeneralPool` or `IMinimalSwapInfoPool`,\\n     * depending on the chosen specialization setting. This contract is known as the Pool's contract.\\n     *\\n     * Note that the same contract may register itself as multiple Pools with unique Pool IDs, or in other words,\\n     * multiple Pools may share the same contract.\\n     *\\n     * Emits a `PoolRegistered` event.\\n     */\\n    function registerPool(PoolSpecialization specialization) external returns (bytes32);\\n\\n    /**\\n     * @dev Emitted when a Pool is registered by calling `registerPool`.\\n     */\\n    event PoolRegistered(bytes32 indexed poolId, address indexed poolAddress, PoolSpecialization specialization);\\n\\n    /**\\n     * @dev Returns a Pool's contract address and specialization setting.\\n     */\\n    function getPool(bytes32 poolId) external view returns (address, PoolSpecialization);\\n\\n    /**\\n     * @dev Registers `tokens` for the `poolId` Pool. Must be called by the Pool's contract.\\n     *\\n     * Pools can only interact with tokens they have registered. Users join a Pool by transferring registered tokens,\\n     * exit by receiving registered tokens, and can only swap registered tokens.\\n     *\\n     * Each token can only be registered once. For Pools with the Two Token specialization, `tokens` must have a length\\n     * of two, that is, both tokens must be registered in the same `registerTokens` call, and they must be sorted in\\n     * ascending order.\\n     *\\n     * The `tokens` and `assetManagers` arrays must have the same length, and each entry in these indicates the Asset\\n     * Manager for the corresponding token. Asset Managers can manage a Pool's tokens via `managePoolBalance`,\\n     * depositing and withdrawing them directly, and can even set their balance to arbitrary amounts. They are therefore\\n     * expected to be highly secured smart contracts with sound design principles, and the decision to register an\\n     * Asset Manager should not be made lightly.\\n     *\\n     * Pools can choose not to assign an Asset Manager to a given token by passing in the zero address. Once an Asset\\n     * Manager is set, it cannot be changed except by deregistering the associated token and registering again with a\\n     * different Asset Manager.\\n     *\\n     * Emits a `TokensRegistered` event.\\n     */\\n    function registerTokens(\\n        bytes32 poolId,\\n        IERC20[] memory tokens,\\n        address[] memory assetManagers\\n    ) external;\\n\\n    /**\\n     * @dev Emitted when a Pool registers tokens by calling `registerTokens`.\\n     */\\n    event TokensRegistered(bytes32 indexed poolId, IERC20[] tokens, address[] assetManagers);\\n\\n    /**\\n     * @dev Deregisters `tokens` for the `poolId` Pool. Must be called by the Pool's contract.\\n     *\\n     * Only registered tokens (via `registerTokens`) can be deregistered. Additionally, they must have zero total\\n     * balance. For Pools with the Two Token specialization, `tokens` must have a length of two, that is, both tokens\\n     * must be deregistered in the same `deregisterTokens` call.\\n     *\\n     * A deregistered token can be re-registered later on, possibly with a different Asset Manager.\\n     *\\n     * Emits a `TokensDeregistered` event.\\n     */\\n    function deregisterTokens(bytes32 poolId, IERC20[] memory tokens) external;\\n\\n    /**\\n     * @dev Emitted when a Pool deregisters tokens by calling `deregisterTokens`.\\n     */\\n    event TokensDeregistered(bytes32 indexed poolId, IERC20[] tokens);\\n\\n    /**\\n     * @dev Returns detailed information for a Pool's registered token.\\n     *\\n     * `cash` is the number of tokens the Vault currently holds for the Pool. `managed` is the number of tokens\\n     * withdrawn and held outside the Vault by the Pool's token Asset Manager. The Pool's total balance for `token`\\n     * equals the sum of `cash` and `managed`.\\n     *\\n     * Internally, `cash` and `managed` are stored using 112 bits. No action can ever cause a Pool's token `cash`,\\n     * `managed` or `total` balance to be greater than 2^112 - 1.\\n     *\\n     * `lastChangeBlock` is the number of the block in which `token`'s total balance was last modified (via either a\\n     * join, exit, swap, or Asset Manager update). This value is useful to avoid so-called 'sandwich attacks', for\\n     * example when developing price oracles. A change of zero (e.g. caused by a swap with amount zero) is considered a\\n     * change for this purpose, and will update `lastChangeBlock`.\\n     *\\n     * `assetManager` is the Pool's token Asset Manager.\\n     */\\n    function getPoolTokenInfo(bytes32 poolId, IERC20 token)\\n        external\\n        view\\n        returns (\\n            uint256 cash,\\n            uint256 managed,\\n            uint256 lastChangeBlock,\\n            address assetManager\\n        );\\n\\n    /**\\n     * @dev Returns a Pool's registered tokens, the total balance for each, and the latest block when *any* of\\n     * the tokens' `balances` changed.\\n     *\\n     * The order of the `tokens` array is the same order that will be used in `joinPool`, `exitPool`, as well as in all\\n     * Pool hooks (where applicable). Calls to `registerTokens` and `deregisterTokens` may change this order.\\n     *\\n     * If a Pool only registers tokens once, and these are sorted in ascending order, they will be stored in the same\\n     * order as passed to `registerTokens`.\\n     *\\n     * Total balances include both tokens held by the Vault and those withdrawn by the Pool's Asset Managers. These are\\n     * the amounts used by joins, exits and swaps. For a detailed breakdown of token balances, use `getPoolTokenInfo`\\n     * instead.\\n     */\\n    function getPoolTokens(bytes32 poolId)\\n        external\\n        view\\n        returns (\\n            IERC20[] memory tokens,\\n            uint256[] memory balances,\\n            uint256 lastChangeBlock\\n        );\\n\\n    /**\\n     * @dev Called by users to join a Pool, which transfers tokens from `sender` into the Pool's balance. This will\\n     * trigger custom Pool behavior, which will typically grant something in return to `recipient` - often tokenized\\n     * Pool shares.\\n     *\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\n     *\\n     * The `assets` and `maxAmountsIn` arrays must have the same length, and each entry indicates the maximum amount\\n     * to send for each asset. The amounts to send are decided by the Pool and not the Vault: it just enforces\\n     * these maximums.\\n     *\\n     * If joining a Pool that holds WETH, it is possible to send ETH directly: the Vault will do the wrapping. To enable\\n     * this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead of the\\n     * WETH address. Note that it is not possible to combine ETH and WETH in the same join. Any excess ETH will be sent\\n     * back to the caller (not the sender, which is important for relayers).\\n     *\\n     * `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\\n     * interacting with Pools that register and deregister tokens frequently. If sending ETH however, the array must be\\n     * sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the final\\n     * `assets` array might not be sorted. Pools with no registered tokens cannot be joined.\\n     *\\n     * If `fromInternalBalance` is true, the caller's Internal Balance will be preferred: ERC20 transfers will only\\n     * be made for the difference between the requested amount and Internal Balance (if any). Note that ETH cannot be\\n     * withdrawn from Internal Balance: attempting to do so will trigger a revert.\\n     *\\n     * This causes the Vault to call the `IBasePool.onJoinPool` hook on the Pool's contract, where Pools implement\\n     * their own custom logic. This typically requires additional information from the user (such as the expected number\\n     * of Pool shares). This can be encoded in the `userData` argument, which is ignored by the Vault and passed\\n     * directly to the Pool's contract, as is `recipient`.\\n     *\\n     * Emits a `PoolBalanceChanged` event.\\n     */\\n    function joinPool(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        JoinPoolRequest memory request\\n    ) external payable;\\n\\n    struct JoinPoolRequest {\\n        IAsset[] assets;\\n        uint256[] maxAmountsIn;\\n        bytes userData;\\n        bool fromInternalBalance;\\n    }\\n\\n    /**\\n     * @dev Called by users to exit a Pool, which transfers tokens from the Pool's balance to `recipient`. This will\\n     * trigger custom Pool behavior, which will typically ask for something in return from `sender` - often tokenized\\n     * Pool shares. The amount of tokens that can be withdrawn is limited by the Pool's `cash` balance (see\\n     * `getPoolTokenInfo`).\\n     *\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\n     *\\n     * The `tokens` and `minAmountsOut` arrays must have the same length, and each entry in these indicates the minimum\\n     * token amount to receive for each token contract. The amounts to send are decided by the Pool and not the Vault:\\n     * it just enforces these minimums.\\n     *\\n     * If exiting a Pool that holds WETH, it is possible to receive ETH directly: the Vault will do the unwrapping. To\\n     * enable this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead\\n     * of the WETH address. Note that it is not possible to combine ETH and WETH in the same exit.\\n     *\\n     * `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\\n     * interacting with Pools that register and deregister tokens frequently. If receiving ETH however, the array must\\n     * be sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the\\n     * final `assets` array might not be sorted. Pools with no registered tokens cannot be exited.\\n     *\\n     * If `toInternalBalance` is true, the tokens will be deposited to `recipient`'s Internal Balance. Otherwise,\\n     * an ERC20 transfer will be performed. Note that ETH cannot be deposited to Internal Balance: attempting to\\n     * do so will trigger a revert.\\n     *\\n     * `minAmountsOut` is the minimum amount of tokens the user expects to get out of the Pool, for each token in the\\n     * `tokens` array. This array must match the Pool's registered tokens.\\n     *\\n     * This causes the Vault to call the `IBasePool.onExitPool` hook on the Pool's contract, where Pools implement\\n     * their own custom logic. This typically requires additional information from the user (such as the expected number\\n     * of Pool shares to return). This can be encoded in the `userData` argument, which is ignored by the Vault and\\n     * passed directly to the Pool's contract.\\n     *\\n     * Emits a `PoolBalanceChanged` event.\\n     */\\n    function exitPool(\\n        bytes32 poolId,\\n        address sender,\\n        address payable recipient,\\n        ExitPoolRequest memory request\\n    ) external;\\n\\n    struct ExitPoolRequest {\\n        IAsset[] assets;\\n        uint256[] minAmountsOut;\\n        bytes userData;\\n        bool toInternalBalance;\\n    }\\n\\n    /**\\n     * @dev Emitted when a user joins or exits a Pool by calling `joinPool` or `exitPool`, respectively.\\n     */\\n    event PoolBalanceChanged(\\n        bytes32 indexed poolId,\\n        address indexed liquidityProvider,\\n        IERC20[] tokens,\\n        int256[] deltas,\\n        uint256[] protocolFeeAmounts\\n    );\\n\\n    enum PoolBalanceChangeKind { JOIN, EXIT }\\n\\n    // Swaps\\n    //\\n    // Users can swap tokens with Pools by calling the `swap` and `batchSwap` functions. To do this,\\n    // they need not trust Pool contracts in any way: all security checks are made by the Vault. They must however be\\n    // aware of the Pools' pricing algorithms in order to estimate the prices Pools will quote.\\n    //\\n    // The `swap` function executes a single swap, while `batchSwap` can perform multiple swaps in sequence.\\n    // In each individual swap, tokens of one kind are sent from the sender to the Pool (this is the 'token in'),\\n    // and tokens of another kind are sent from the Pool to the recipient in exchange (this is the 'token out').\\n    // More complex swaps, such as one token in to multiple tokens out can be achieved by batching together\\n    // individual swaps.\\n    //\\n    // There are two swap kinds:\\n    //  - 'given in' swaps, where the amount of tokens in (sent to the Pool) is known, and the Pool determines (via the\\n    // `onSwap` hook) the amount of tokens out (to send to the recipient).\\n    //  - 'given out' swaps, where the amount of tokens out (received from the Pool) is known, and the Pool determines\\n    // (via the `onSwap` hook) the amount of tokens in (to receive from the sender).\\n    //\\n    // Additionally, it is possible to chain swaps using a placeholder input amount, which the Vault replaces with\\n    // the calculated output of the previous swap. If the previous swap was 'given in', this will be the calculated\\n    // tokenOut amount. If the previous swap was 'given out', it will use the calculated tokenIn amount. These extended\\n    // swaps are known as 'multihop' swaps, since they 'hop' through a number of intermediate tokens before arriving at\\n    // the final intended token.\\n    //\\n    // In all cases, tokens are only transferred in and out of the Vault (or withdrawn from and deposited into Internal\\n    // Balance) after all individual swaps have been completed, and the net token balance change computed. This makes\\n    // certain swap patterns, such as multihops, or swaps that interact with the same token pair in multiple Pools, cost\\n    // much less gas than they would otherwise.\\n    //\\n    // It also means that under certain conditions it is possible to perform arbitrage by swapping with multiple\\n    // Pools in a way that results in net token movement out of the Vault (profit), with no tokens being sent in (only\\n    // updating the Pool's internal accounting).\\n    //\\n    // To protect users from front-running or the market changing rapidly, they supply a list of 'limits' for each token\\n    // involved in the swap, where either the maximum number of tokens to send (by passing a positive value) or the\\n    // minimum amount of tokens to receive (by passing a negative value) is specified.\\n    //\\n    // Additionally, a 'deadline' timestamp can also be provided, forcing the swap to fail if it occurs after\\n    // this point in time (e.g. if the transaction failed to be included in a block promptly).\\n    //\\n    // If interacting with Pools that hold WETH, it is possible to both send and receive ETH directly: the Vault will do\\n    // the wrapping and unwrapping. To enable this mechanism, the IAsset sentinel value (the zero address) must be\\n    // passed in the `assets` array instead of the WETH address. Note that it is possible to combine ETH and WETH in the\\n    // same swap. Any excess ETH will be sent back to the caller (not the sender, which is relevant for relayers).\\n    //\\n    // Finally, Internal Balance can be used when either sending or receiving tokens.\\n\\n    enum SwapKind { GIVEN_IN, GIVEN_OUT }\\n\\n    /**\\n     * @dev Performs a swap with a single Pool.\\n     *\\n     * If the swap is 'given in' (the number of tokens to send to the Pool is known), it returns the amount of tokens\\n     * taken from the Pool, which must be greater than or equal to `limit`.\\n     *\\n     * If the swap is 'given out' (the number of tokens to take from the Pool is known), it returns the amount of tokens\\n     * sent to the Pool, which must be less than or equal to `limit`.\\n     *\\n     * Internal Balance usage and the recipient are determined by the `funds` struct.\\n     *\\n     * Emits a `Swap` event.\\n     */\\n    function swap(\\n        SingleSwap memory singleSwap,\\n        FundManagement memory funds,\\n        uint256 limit,\\n        uint256 deadline\\n    ) external payable returns (uint256);\\n\\n    /**\\n     * @dev Data for a single swap executed by `swap`. `amount` is either `amountIn` or `amountOut` depending on\\n     * the `kind` value.\\n     *\\n     * `assetIn` and `assetOut` are either token addresses, or the IAsset sentinel value for ETH (the zero address).\\n     * Note that Pools never interact with ETH directly: it will be wrapped to or unwrapped from WETH by the Vault.\\n     *\\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\\n     * used to extend swap behavior.\\n     */\\n    struct SingleSwap {\\n        bytes32 poolId;\\n        SwapKind kind;\\n        IAsset assetIn;\\n        IAsset assetOut;\\n        uint256 amount;\\n        bytes userData;\\n    }\\n\\n    /**\\n     * @dev Performs a series of swaps with one or multiple Pools. In each individual swap, the caller determines either\\n     * the amount of tokens sent to or received from the Pool, depending on the `kind` value.\\n     *\\n     * Returns an array with the net Vault asset balance deltas. Positive amounts represent tokens (or ETH) sent to the\\n     * Vault, and negative amounts represent tokens (or ETH) sent by the Vault. Each delta corresponds to the asset at\\n     * the same index in the `assets` array.\\n     *\\n     * Swaps are executed sequentially, in the order specified by the `swaps` array. Each array element describes a\\n     * Pool, the token to be sent to this Pool, the token to receive from it, and an amount that is either `amountIn` or\\n     * `amountOut` depending on the swap kind.\\n     *\\n     * Multihop swaps can be executed by passing an `amount` value of zero for a swap. This will cause the amount in/out\\n     * of the previous swap to be used as the amount in for the current one. In a 'given in' swap, 'tokenIn' must equal\\n     * the previous swap's `tokenOut`. For a 'given out' swap, `tokenOut` must equal the previous swap's `tokenIn`.\\n     *\\n     * The `assets` array contains the addresses of all assets involved in the swaps. These are either token addresses,\\n     * or the IAsset sentinel value for ETH (the zero address). Each entry in the `swaps` array specifies tokens in and\\n     * out by referencing an index in `assets`. Note that Pools never interact with ETH directly: it will be wrapped to\\n     * or unwrapped from WETH by the Vault.\\n     *\\n     * Internal Balance usage, sender, and recipient are determined by the `funds` struct. The `limits` array specifies\\n     * the minimum or maximum amount of each token the vault is allowed to transfer.\\n     *\\n     * `batchSwap` can be used to make a single swap, like `swap` does, but doing so requires more gas than the\\n     * equivalent `swap` call.\\n     *\\n     * Emits `Swap` events.\\n     */\\n    function batchSwap(\\n        SwapKind kind,\\n        BatchSwapStep[] memory swaps,\\n        IAsset[] memory assets,\\n        FundManagement memory funds,\\n        int256[] memory limits,\\n        uint256 deadline\\n    ) external payable returns (int256[] memory);\\n\\n    /**\\n     * @dev Data for each individual swap executed by `batchSwap`. The asset in and out fields are indexes into the\\n     * `assets` array passed to that function, and ETH assets are converted to WETH.\\n     *\\n     * If `amount` is zero, the multihop mechanism is used to determine the actual amount based on the amount in/out\\n     * from the previous swap, depending on the swap kind.\\n     *\\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\\n     * used to extend swap behavior.\\n     */\\n    struct BatchSwapStep {\\n        bytes32 poolId;\\n        uint256 assetInIndex;\\n        uint256 assetOutIndex;\\n        uint256 amount;\\n        bytes userData;\\n    }\\n\\n    /**\\n     * @dev Emitted for each individual swap performed by `swap` or `batchSwap`.\\n     */\\n    event Swap(\\n        bytes32 indexed poolId,\\n        IERC20 indexed tokenIn,\\n        IERC20 indexed tokenOut,\\n        uint256 amountIn,\\n        uint256 amountOut\\n    );\\n\\n    /**\\n     * @dev All tokens in a swap are either sent from the `sender` account to the Vault, or from the Vault to the\\n     * `recipient` account.\\n     *\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\n     *\\n     * If `fromInternalBalance` is true, the `sender`'s Internal Balance will be preferred, performing an ERC20\\n     * transfer for the difference between the requested amount and the User's Internal Balance (if any). The `sender`\\n     * must have allowed the Vault to use their tokens via `IERC20.approve()`. This matches the behavior of\\n     * `joinPool`.\\n     *\\n     * If `toInternalBalance` is true, tokens will be deposited to `recipient`'s internal balance instead of\\n     * transferred. This matches the behavior of `exitPool`.\\n     *\\n     * Note that ETH cannot be deposited to or withdrawn from Internal Balance: attempting to do so will trigger a\\n     * revert.\\n     */\\n    struct FundManagement {\\n        address sender;\\n        bool fromInternalBalance;\\n        address payable recipient;\\n        bool toInternalBalance;\\n    }\\n\\n    /**\\n     * @dev Simulates a call to `batchSwap`, returning an array of Vault asset deltas. Calls to `swap` cannot be\\n     * simulated directly, but an equivalent `batchSwap` call can and will yield the exact same result.\\n     *\\n     * Each element in the array corresponds to the asset at the same index, and indicates the number of tokens (or ETH)\\n     * the Vault would take from the sender (if positive) or send to the recipient (if negative). The arguments it\\n     * receives are the same that an equivalent `batchSwap` call would receive.\\n     *\\n     * Unlike `batchSwap`, this function performs no checks on the sender or recipient field in the `funds` struct.\\n     * This makes it suitable to be called by off-chain applications via eth_call without needing to hold tokens,\\n     * approve them for the Vault, or even know a user's address.\\n     *\\n     * Note that this function is not 'view' (due to implementation details): the client code must explicitly execute\\n     * eth_call instead of eth_sendTransaction.\\n     */\\n    function queryBatchSwap(\\n        SwapKind kind,\\n        BatchSwapStep[] memory swaps,\\n        IAsset[] memory assets,\\n        FundManagement memory funds\\n    ) external returns (int256[] memory assetDeltas);\\n\\n    // Flash Loans\\n\\n    /**\\n     * @dev Performs a 'flash loan', sending tokens to `recipient`, executing the `receiveFlashLoan` hook on it,\\n     * and then reverting unless the tokens plus a proportional protocol fee have been returned.\\n     *\\n     * The `tokens` and `amounts` arrays must have the same length, and each entry in these indicates the loan amount\\n     * for each token contract. `tokens` must be sorted in ascending order.\\n     *\\n     * The 'userData' field is ignored by the Vault, and forwarded as-is to `recipient` as part of the\\n     * `receiveFlashLoan` call.\\n     *\\n     * Emits `FlashLoan` events.\\n     */\\n    function flashLoan(\\n        IFlashLoanRecipient recipient,\\n        IERC20[] memory tokens,\\n        uint256[] memory amounts,\\n        bytes memory userData\\n    ) external;\\n\\n    /**\\n     * @dev Emitted for each individual flash loan performed by `flashLoan`.\\n     */\\n    event FlashLoan(IFlashLoanRecipient indexed recipient, IERC20 indexed token, uint256 amount, uint256 feeAmount);\\n\\n    // Asset Management\\n    //\\n    // Each token registered for a Pool can be assigned an Asset Manager, which is able to freely withdraw the Pool's\\n    // tokens from the Vault, deposit them, or assign arbitrary values to its `managed` balance (see\\n    // `getPoolTokenInfo`). This makes them extremely powerful and dangerous. Even if an Asset Manager only directly\\n    // controls one of the tokens in a Pool, a malicious manager could set that token's balance to manipulate the\\n    // prices of the other tokens, and then drain the Pool with swaps. The risk of using Asset Managers is therefore\\n    // not constrained to the tokens they are managing, but extends to the entire Pool's holdings.\\n    //\\n    // However, a properly designed Asset Manager smart contract can be safely used for the Pool's benefit,\\n    // for example by lending unused tokens out for interest, or using them to participate in voting protocols.\\n    //\\n    // This concept is unrelated to the IAsset interface.\\n\\n    /**\\n     * @dev Performs a set of Pool balance operations, which may be either withdrawals, deposits or updates.\\n     *\\n     * Pool Balance management features batching, which means a single contract call can be used to perform multiple\\n     * operations of different kinds, with different Pools and tokens, at once.\\n     *\\n     * For each operation, the caller must be registered as the Asset Manager for `token` in `poolId`.\\n     */\\n    function managePoolBalance(PoolBalanceOp[] memory ops) external;\\n\\n    struct PoolBalanceOp {\\n        PoolBalanceOpKind kind;\\n        bytes32 poolId;\\n        IERC20 token;\\n        uint256 amount;\\n    }\\n\\n    /**\\n     * Withdrawals decrease the Pool's cash, but increase its managed balance, leaving the total balance unchanged.\\n     *\\n     * Deposits increase the Pool's cash, but decrease its managed balance, leaving the total balance unchanged.\\n     *\\n     * Updates don't affect the Pool's cash balance, but because the managed balance changes, it does alter the total.\\n     * The external amount can be either increased or decreased by this call (i.e., reporting a gain or a loss).\\n     */\\n    enum PoolBalanceOpKind { WITHDRAW, DEPOSIT, UPDATE }\\n\\n    /**\\n     * @dev Emitted when a Pool's token Asset Manager alters its balance via `managePoolBalance`.\\n     */\\n    event PoolBalanceManaged(\\n        bytes32 indexed poolId,\\n        address indexed assetManager,\\n        IERC20 indexed token,\\n        int256 cashDelta,\\n        int256 managedDelta\\n    );\\n\\n    // Protocol Fees\\n    //\\n    // Some operations cause the Vault to collect tokens in the form of protocol fees, which can then be withdrawn by\\n    // permissioned accounts.\\n    //\\n    // There are two kinds of protocol fees:\\n    //\\n    //  - flash loan fees: charged on all flash loans, as a percentage of the amounts lent.\\n    //\\n    //  - swap fees: a percentage of the fees charged by Pools when performing swaps. For a number of reasons, including\\n    // swap gas costs and interface simplicity, protocol swap fees are not charged on each individual swap. Rather,\\n    // Pools are expected to keep track of how much they have charged in swap fees, and pay any outstanding debts to the\\n    // Vault when they are joined or exited. This prevents users from joining a Pool with unpaid debt, as well as\\n    // exiting a Pool in debt without first paying their share.\\n\\n    /**\\n     * @dev Returns the current protocol fee module.\\n     */\\n    function getProtocolFeesCollector() external view returns (IProtocolFeesCollector);\\n\\n    /**\\n     * @dev Safety mechanism to pause most Vault operations in the event of an emergency - typically detection of an\\n     * error in some part of the system.\\n     *\\n     * The Vault can only be paused during an initial time period, after which pausing is forever disabled.\\n     *\\n     * While the contract is paused, the following features are disabled:\\n     * - depositing and transferring internal balance\\n     * - transferring external balance (using the Vault's allowance)\\n     * - swaps\\n     * - joining Pools\\n     * - Asset Manager interactions\\n     *\\n     * Internal Balance can still be withdrawn, and Pools exited.\\n     */\\n    function setPaused(bool paused) external;\\n\\n    /**\\n     * @dev Returns the Vault's WETH instance.\\n     */\\n    function WETH() external view returns (IWETH);\\n    // solhint-disable-previous-line func-name-mixedcase\\n}\\n\",\"keccak256\":\"0x8a0904cb11d6571fdc0051b2de6b675d0e1cf8af45c1a5467d047812f1086223\",\"license\":\"GPL-3.0-or-later\"},\"@sense-finance/v1-utils/src/Trust.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.7.0;\\n\\n/// @notice Ultra minimal authorization logic for smart contracts.\\n/// @author From https://github.com/Rari-Capital/solmate/blob/fab107565a51674f3a3b5bfdaacc67f6179b1a9b/src/auth/Trust.sol\\nabstract contract Trust {\\n    event UserTrustUpdated(address indexed user, bool trusted);\\n\\n    mapping(address => bool) public isTrusted;\\n\\n    constructor(address initialUser) {\\n        isTrusted[initialUser] = true;\\n\\n        emit UserTrustUpdated(initialUser, true);\\n    }\\n\\n    function setIsTrusted(address user, bool trusted) public virtual requiresTrust {\\n        isTrusted[user] = trusted;\\n\\n        emit UserTrustUpdated(user, trusted);\\n    }\\n\\n    modifier requiresTrust() {\\n        require(isTrusted[msg.sender], \\\"UNTRUSTED\\\");\\n\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x2d3887076c81425d3954aea7735aebd9093e3df69c8132b1713fae4a34201d43\",\"license\":\"AGPL-3.0-only\"},\"lib/v1-space/src/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.7.0;\\n\\n// solhint-disable\\n\\n/**\\n * @dev Reverts if `condition` is false, with a revert reason containing `errorCode`. Only codes up to 999 are\\n * supported.\\n */\\nfunction _require(bool condition, uint256 errorCode) pure {\\n    if (!condition) _revert(errorCode);\\n}\\n\\n/**\\n * @dev Reverts with a revert reason containing `errorCode`. Only codes up to 999 are supported.\\n */\\nfunction _revert(uint256 errorCode) pure {\\n    // We're going to dynamically create a revert string based on the error code, with the following format:\\n    // 'SNS#{errorCode}'\\n    // where the code is left-padded with zeroes to three digits (so they range from 000 to 999).\\n    //\\n    // We don't have revert strings embedded in the contract to save bytecode size: it takes much less space to store a\\n    // number (8 to 16 bits) than the individual string characters.\\n    //\\n    // The dynamic string creation algorithm that follows could be implemented in Solidity, but assembly allows for a\\n    // much denser implementation, again saving bytecode size. Given this function unconditionally reverts, this is a\\n    // safe place to rely on it without worrying about how its usage might affect e.g. memory contents.\\n    assembly {\\n        // First, we need to compute the ASCII representation of the error code. We assume that it is in the 0-999\\n        // range, so we only need to convert three digits. To convert the digits to ASCII, we add 0x30, the value for\\n        // the '0' character.\\n\\n        let units := add(mod(errorCode, 10), 0x30)\\n\\n        errorCode := div(errorCode, 10)\\n        let tenths := add(mod(errorCode, 10), 0x30)\\n\\n        errorCode := div(errorCode, 10)\\n        let hundreds := add(mod(errorCode, 10), 0x30)\\n\\n        // With the individual characters, we can now construct the full string. The \\\"SNS#\\\" part is a known constant\\n        // (0x3f534e5323): we simply shift this by 24 (to provide space for the 3 bytes of the error code), and add the\\n        // characters to it, each shifted by a multiple of 8.\\n        // The revert reason is then shifted left by 200 bits (256 minus the length of the string, 7 characters * 8 bits\\n        // per character = 56) to locate it in the most significant part of the 256 slot (the beginning of a byte\\n        // array).\\n\\n        let revertReason := shl(200, add(0x3f534e5323000000, add(add(units, shl(8, tenths)), shl(16, hundreds))))\\n\\n        // We can now encode the reason in memory, which can be safely overwritten as we're about to revert. The encoded\\n        // message will have the following layout:\\n        // [ revert reason identifier ] [ string location offset ] [ string length ] [ string contents ]\\n\\n        // The Solidity revert reason identifier is 0x08c739a0, the function selector of the Error(string) function. We\\n        // also write zeroes to the next 28 bytes of memory, but those are about to be overwritten.\\n        mstore(0x0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\\n        // Next is the offset to the location of the string, which will be placed immediately after (20 bytes away).\\n        mstore(0x04, 0x0000000000000000000000000000000000000000000000000000000000000020)\\n        // The string length is fixed: 7 characters.\\n        mstore(0x24, 7)\\n        // Finally, the string itself is stored.\\n        mstore(0x44, revertReason)\\n\\n        // Even if the string is only 7 bytes long, we need to return a full 32 byte slot containing it. The length of\\n        // the encoded message is therefore 4 + 32 + 32 + 32 = 100.\\n        revert(0, 100)\\n    }\\n}\\n\\nlibrary Errors {\\n    // Space (using error codes as Space uses ^0.7.0)\\n    uint256 internal constant CALLER_NOT_VAULT = 100;\\n    uint256 internal constant INVALID_G1 = 101;\\n    uint256 internal constant INVALID_G2 = 102;\\n    uint256 internal constant INVALID_POOL_ID = 103;\\n    uint256 internal constant POOL_ALREADY_DEPLOYED = 104;\\n    uint256 internal constant POOL_PAST_MATURITY = 105;\\n    uint256 internal constant SWAP_TOO_SMALL = 106;\\n    uint256 internal constant NEGATIVE_RATE = 107;\\n}\\n\",\"keccak256\":\"0x4db2836d9dbec7d68bd3f1ad70e1638f0edb2269c9de1d1755b9eac807fda561\",\"license\":\"AGPL-3.0-only\"},\"lib/v1-space/src/Space.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\n// External references\\nimport { FixedPoint } from \\\"@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol\\\";\\nimport { Math as BasicMath } from \\\"@balancer-labs/v2-solidity-utils/contracts/math/Math.sol\\\";\\nimport { BalancerPoolToken } from \\\"@balancer-labs/v2-pool-utils/contracts/BalancerPoolToken.sol\\\";\\nimport { ERC20 } from \\\"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol\\\";\\nimport { LogCompression } from \\\"@balancer-labs/v2-solidity-utils/contracts/helpers/LogCompression.sol\\\";\\n\\nimport { IMinimalSwapInfoPool } from \\\"@balancer-labs/v2-vault/contracts/interfaces/IMinimalSwapInfoPool.sol\\\";\\nimport { IVault } from \\\"@balancer-labs/v2-vault/contracts/interfaces/IVault.sol\\\";\\nimport { IERC20 } from \\\"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/IERC20.sol\\\";\\n\\nimport { Errors, _require } from \\\"./Errors.sol\\\";\\nimport { PoolPriceOracle } from \\\"./oracle/PoolPriceOracle.sol\\\";\\n\\ninterface AdapterLike {\\n    function scale() external returns (uint256);\\n\\n    function scaleStored() external view returns (uint256);\\n\\n    function target() external view returns (address);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function name() external view returns (string memory);\\n\\n    function getUnderlyingPrice() external view returns (uint256);\\n}\\n\\n/*\\n                    SPACE\\n        *   '*\\n                *\\n                        *\\n                            *\\n                    *\\n                            *\\n                .                      .\\n                .                      ;\\n                :                  - --+- -\\n                !           .          !\\n\\n*/\\n\\n/// @notice A Yieldspace implementation extended such that LPs can deposit\\n/// [Principal Token, Yield-bearing asset], rather than [Principal Token, Underlying], while keeping the benefits of the\\n/// yieldspace invariant (e.g. it can hold [Principal Token, cDAI], rather than [Principal Token, DAI], while still operating\\n/// in \\\"yield space\\\" for the principal token side. See the YieldSpace paper for more https://yield.is/YieldSpace.pdf)\\n/// @dev We use much more internal storage here than in other Sense contracts because it\\n/// conforms to Balancer's own style, and we're using several Balancer functions that play nicer if we do.\\n/// @dev Requires an external \\\"Adapter\\\" contract with a `scale()` function which returns the\\n/// current exchange rate from Target to the Underlying asset.\\ncontract Space is IMinimalSwapInfoPool, BalancerPoolToken, PoolPriceOracle {\\n    using FixedPoint for uint256;\\n\\n    /* ========== STRUCTURES ========== */\\n\\n    struct OracleData {\\n        uint16 oracleIndex;\\n        uint32 oracleSampleInitialTimestamp;\\n        bool oracleEnabled;\\n        int200 logInvariant;\\n    }\\n\\n    /* ========== CONSTANTS ========== */\\n\\n    /// @notice Minimum BPT we can have for this pool after initialization\\n    uint256 public constant MINIMUM_BPT = 1e6;\\n\\n    /// @notice Approx seconds per year to determine the ipmlied rate\\n    uint256 public constant SECONDS_PER_YEAR = 31536000;\\n\\n    /* ========== PUBLIC IMMUTABLES ========== */\\n\\n    /// @notice Adapter address for the associated Series\\n    address public immutable adapter;\\n\\n    /// @notice Maturity timestamp for associated Series\\n    uint256 public immutable maturity;\\n\\n    /// @notice Principal Token index (there are only two tokens in this pool, so `targeti` is always just the complement)\\n    uint256 public immutable pti;\\n\\n    /// @notice Yieldspace config, passed in from the Space Factory\\n    uint256 public immutable ts;\\n    uint256 public immutable g1;\\n    uint256 public immutable g2;\\n\\n    /* ========== INTERNAL IMMUTABLES ========== */\\n\\n    /// @dev Balancer pool id (as registered with the Balancer Vault)\\n    bytes32 internal immutable _poolId;\\n\\n    /// @dev Token registered at index 0 for this pool\\n    IERC20 internal immutable _token0;\\n\\n    /// @dev Token registered at index one for this pool\\n    IERC20 internal immutable _token1;\\n\\n    /// @dev Factor needed to scale the PT to 18 decimals\\n    uint256 internal immutable _scalingFactorPT;\\n\\n    /// @dev Factor needed to scale the Target token to 18 decimals\\n    uint256 internal immutable _scalingFactorTarget;\\n\\n    /// @dev Balancer Vault\\n    IVault internal immutable _vault;\\n\\n    /// @dev Contract that collects Balancer protocol fees\\n    address internal immutable _protocolFeesCollector;\\n\\n    /* ========== INTERNAL MUTABLE STORAGE ========== */\\n\\n    /// @dev Scale value for the yield-bearing asset's first `join` (i.e. initialization)\\n    uint256 internal _initScale;\\n\\n    /// @dev Invariant tracking for calculating Balancer protocol fees\\n    uint256 internal _lastToken0Reserve;\\n    uint256 internal _lastToken1Reserve;\\n\\n    /// @dev Oracle sample collection metadata\\n    OracleData internal oracleData;\\n\\n    constructor(\\n        IVault vault,\\n        address _adapter,\\n        uint256 _maturity,\\n        address pt,\\n        uint256 _ts,\\n        uint256 _g1,\\n        uint256 _g2,\\n        bool _oracleEnabled\\n    ) BalancerPoolToken(AdapterLike(_adapter).name(), AdapterLike(_adapter).symbol()) {\\n        bytes32 poolId = vault.registerPool(IVault.PoolSpecialization.TWO_TOKEN);\\n\\n        address target = AdapterLike(_adapter).target();\\n        IERC20[] memory tokens = new IERC20[](2);\\n\\n        // Ensure that the array of tokens is correctly ordered\\n        uint256 _pti = pt < target ? 0 : 1;\\n        tokens[_pti] = IERC20(pt);\\n        tokens[1 - _pti] = IERC20(target);\\n        vault.registerTokens(poolId, tokens, new address[](2));\\n\\n        // Set Balancer-specific pool config\\n        _vault = vault;\\n        _poolId = poolId;\\n        _token0 = tokens[0];\\n        _token1 = tokens[1];\\n        _protocolFeesCollector = address(vault.getProtocolFeesCollector());\\n\\n        _scalingFactorPT = 10**(BasicMath.sub(uint256(18), ERC20(pt).decimals()));\\n        _scalingFactorTarget = 10**(BasicMath.sub(uint256(18), ERC20(target).decimals()));\\n\\n        // Set Yieldspace config\\n        g1 = _g1; // Fees are baked into factors `g1` & `g2`,\\n        g2 = _g2; // see the \\\"Fees\\\" section of the yieldspace paper\\n        ts = _ts;\\n\\n        // Set Space-specific slots\\n        pti = _pti;\\n        adapter = _adapter;\\n        maturity = _maturity;\\n        oracleData.oracleEnabled = _oracleEnabled;\\n    }\\n\\n    /* ========== BALANCER VAULT HOOKS ========== */\\n\\n    function onJoinPool(\\n        bytes32 poolId,\\n        address, /* sender */\\n        address recipient,\\n        uint256[] memory reserves,\\n        uint256 lastChangeBlock,\\n        uint256 protocolSwapFeePercentage,\\n        bytes memory userData\\n    ) external override onlyVault(poolId) returns (uint256[] memory, uint256[] memory) {\\n        // Space does not have multiple join types like other Balancer pools,\\n        // instead, its `joinPool` always behaves like `EXACT_TOKENS_IN_FOR_BPT_OUT`\\n\\n        _require(maturity >= block.timestamp, Errors.POOL_PAST_MATURITY);\\n\\n        uint256[] memory reqAmountsIn = abi.decode(userData, (uint256[]));\\n\\n        // Upscale both requested amounts and reserves to 18 decimals\\n        _upscaleArray(reserves);\\n        _upscaleArray(reqAmountsIn);\\n\\n        if (totalSupply() == 0) {\\n            uint256 initScale = AdapterLike(adapter).scale();\\n\\n            // Convert target balance into Underlying\\n            // note We assume scale values will always be 18 decimals\\n            uint256 underlyingIn = reqAmountsIn[1 - pti].mulDown(initScale);\\n\\n            // Just like weighted pool 2 token from the balancer v2 monorepo,\\n            // we lock MINIMUM_BPT in by minting it for the PT address. This reduces potential\\n            // issues with rounding and ensures that this code path will only be executed once\\n            _mintPoolTokens(address(0), MINIMUM_BPT);\\n\\n            // Mint the recipient BPT comensurate with the value of their join in Underlying\\n            _mintPoolTokens(recipient, underlyingIn.sub(MINIMUM_BPT));\\n\\n            // Amounts entering the Pool, so we round up\\n            _downscaleUpArray(reqAmountsIn);\\n\\n            // Set the scale value all future deposits will be backdated to\\n            _initScale = initScale;\\n\\n            // For the first join, we don't pull any PT, regardless of what the caller requested.\\n            // This starts this pool off as synthetic Underlying only, as the yieldspace invariant expects\\n            delete reqAmountsIn[pti];\\n\\n            // Cache starting Target reserves\\n            reserves = reqAmountsIn;\\n        \\n            // Cache new reserves, post join\\n            _cacheReserves(reserves);\\n\\n            return (reqAmountsIn, new uint256[](2));\\n        } else {\\n            // Update oracle with upscaled reserves\\n            _updateOracle(lastChangeBlock, reserves[pti], reserves[1 - pti]);\\n\\n            // Calculate fees due before updating bpt balances to determine invariant growth from just swap fees\\n            if (protocolSwapFeePercentage != 0) {\\n                // This doesn't break the YS virtual reserves efficiency trick because, even though we're minting new BPT, \\n                // the BPT is still getting denser faster than it's getting diluted, \\n                // meaning that it'll never fall below invariant #23 in the YS paper\\n                _mintPoolTokens(_protocolFeesCollector, _bptFeeDue(reserves, protocolSwapFeePercentage));\\n            }\\n\\n            (uint256 bptToMint, uint256[] memory amountsIn) = _tokensInForBptOut(reqAmountsIn, reserves);\\n\\n            // Amounts entering the Pool, so we round up\\n            _downscaleUpArray(amountsIn);\\n\\n            // `recipient` receives liquidity tokens\\n            _mintPoolTokens(recipient, bptToMint);\\n\\n            // Update reserves for caching\\n            //\\n            // No risk of overflow as this function will only succeed if the user actually has `amountsIn` and\\n            // the max token supply for a well-behaved token is bounded by `uint256 totalSupply`\\n            reserves[0] += amountsIn[0];\\n            reserves[1] += amountsIn[1];\\n\\n            // Cache new reserves, post join\\n            _cacheReserves(reserves);\\n\\n            // Inspired by PR #990 in the balancer v2 monorepo, we always return pt dueProtocolFeeAmounts\\n            // to the Vault, and pay protocol fees by minting BPT directly to the protocolFeeCollector instead\\n            return (amountsIn, new uint256[](2));\\n        }\\n    }\\n\\n    function onExitPool(\\n        bytes32 poolId,\\n        address sender,\\n        address, /* recipient */\\n        uint256[] memory reserves,\\n        uint256 lastChangeBlock,\\n        uint256 protocolSwapFeePercentage,\\n        bytes memory userData\\n    ) external override onlyVault(poolId) returns (uint256[] memory, uint256[] memory) {\\n        // Space does not have multiple exit types like other Balancer pools,\\n        // instead, its `exitPool` always behaves like `EXACT_BPT_IN_FOR_TOKENS_OUT`\\n\\n        // Upscale reserves to 18 decimals\\n        _upscaleArray(reserves);\\n\\n        // Update oracle with upscaled reserves\\n        _updateOracle(lastChangeBlock, reserves[pti], reserves[1 - pti]);\\n\\n        // Calculate fees due before updating bpt balances to determine invariant growth from just swap fees\\n        if (protocolSwapFeePercentage != 0) {\\n            _mintPoolTokens(_protocolFeesCollector, _bptFeeDue(reserves, protocolSwapFeePercentage));\\n        }\\n\\n        // Determine what percentage of the pool the BPT being passed in represents\\n        uint256 bptAmountIn = abi.decode(userData, (uint256));\\n        uint256 pctPool = bptAmountIn.divUp(totalSupply());\\n\\n        // Calculate the amount of tokens owed in return for giving that amount of BPT in\\n        uint256[] memory amountsOut = new uint256[](2);\\n        // Even though we are sending tokens to the user, we round both amounts out *up* here, b/c:\\n        //     1) Maximizing the number of tokens users get when exiting maximizes the\\n        //        number of BPT we mint for users joining afterwards (it maximizes the equation \\n        //        totalSupply * amtIn / reserves). As a result, we ensure that the total supply component of the\\n        //        numerator is greater than the denominator in the \\\"marginal rate equation\\\" (eq. 2) from the YS paper\\n        //     2) We lock MINIMUM_BPT away at initialization, which means a number of reserves will\\n        //        remain untouched and will function as a buffer for \\\"off by one\\\" rounding errors\\n        amountsOut[0] = reserves[0].mulUp(pctPool);\\n        amountsOut[1] = reserves[1].mulUp(pctPool);\\n\\n        // Amounts are leaving the Pool, so we round down\\n        _downscaleDownArray(amountsOut);\\n\\n        // `sender` pays for the liquidity\\n        _burnPoolTokens(sender, bptAmountIn);\\n\\n        // Update reserves for caching\\n        reserves[0] = reserves[0].sub(amountsOut[0]);\\n        reserves[1] = reserves[1].sub(amountsOut[1]);\\n\\n        // Cache new invariant and reserves, post exit\\n        _cacheReserves(reserves);\\n\\n        return (amountsOut, new uint256[](2));\\n    }\\n\\n    function onSwap(\\n        SwapRequest memory request,\\n        uint256 reservesTokenIn,\\n        uint256 reservesTokenOut\\n    ) external override returns (uint256) {\\n        bool pTIn = request.tokenIn == _token0 ? pti == 0 : pti == 1;\\n\\n        uint256 scalingFactorTokenIn = _scalingFactor(pTIn);\\n        uint256 scalingFactorTokenOut = _scalingFactor(!pTIn);\\n\\n        // Upscale reserves to 18 decimals\\n        reservesTokenIn = _upscale(reservesTokenIn, scalingFactorTokenIn);\\n        reservesTokenOut = _upscale(reservesTokenOut, scalingFactorTokenOut);\\n\\n        // Update oracle with upscaled reserves\\n        _updateOracle(\\n            request.lastChangeBlock, \\n            pTIn ? reservesTokenIn : reservesTokenOut,\\n            pTIn ? reservesTokenOut: reservesTokenIn\\n        );\\n\\n        uint256 scale = AdapterLike(adapter).scale();\\n\\n        if (pTIn) {\\n            // Add LP supply to PT reserves, as suggested by the yieldspace paper\\n            reservesTokenIn = reservesTokenIn.add(totalSupply());\\n\\n            // Backdate the Target reserves and convert to Underlying, as if it were still t0 (initialization)\\n            reservesTokenOut = reservesTokenOut.mulDown(_initScale);\\n        } else {\\n            // Backdate the Target reserves and convert to Underlying, as if it were still t0 (initialization)\\n            reservesTokenIn = reservesTokenIn.mulDown(_initScale);\\n\\n            // Add LP supply to PT reserves, as suggested by the yieldspace paper\\n            reservesTokenOut = reservesTokenOut.add(totalSupply());\\n        }\\n\\n        if (request.kind == IVault.SwapKind.GIVEN_IN) {\\n            request.amount = _upscale(request.amount, scalingFactorTokenIn);\\n            // If Target is being swapped in, convert the amountIn to Underlying using present day Scale\\n            if (!pTIn) {\\n                request.amount = request.amount.mulDown(scale);\\n            }\\n\\n            // Determine the amountOut\\n            uint256 amountOut = _onSwap(pTIn, true, request.amount, reservesTokenIn, reservesTokenOut);\\n\\n            // If PTs are being swapped in, convert the Underlying out back to Target using present day Scale\\n            if (pTIn) {\\n                amountOut = amountOut.divDown(scale);\\n            }\\n\\n            // AmountOut, so we round down\\n            return _downscaleDown(amountOut, scalingFactorTokenOut);\\n        } else {\\n            request.amount = _upscale(request.amount, scalingFactorTokenOut);\\n            // If PTs are being swapped in, convert the amountOut from Target to Underlying using present day Scale\\n            if (pTIn) {\\n                request.amount = request.amount.mulDown(scale);\\n            }\\n\\n            // Determine the amountIn\\n            uint256 amountIn = _onSwap(pTIn, false, request.amount, reservesTokenIn, reservesTokenOut);\\n\\n            // If Target is being swapped in, convert the amountIn back to Target using present day Scale\\n            if (!pTIn) {\\n                amountIn = amountIn.divDown(scale);\\n            }\\n\\n            // amountIn, so we round up\\n            return _downscaleUp(amountIn, scalingFactorTokenIn);\\n        }\\n    }\\n\\n    /* ========== INTERNAL JOIN/SWAP ACCOUNTING ========== */\\n\\n    /// @notice Calculate the max amount of BPT that can be minted from the requested amounts in,\\n    // given the ratio of the reserves, and assuming we don't make any swaps\\n    function _tokensInForBptOut(uint256[] memory reqAmountsIn, uint256[] memory reserves)\\n        internal\\n        view\\n        returns (uint256, uint256[] memory)\\n    {\\n        // Disambiguate reserves wrt token type\\n        (uint256 pTReserves, uint256 targetReserves) = (reserves[pti], reserves[1 - pti]);\\n\\n        uint256[] memory amountsIn = new uint256[](2);\\n\\n        // If the pool has been initialized, but there aren't yet any PT in it\\n        if (pTReserves == 0) {\\n            uint256 reqTargetIn = reqAmountsIn[1 - pti];\\n            // Mint LP shares according to the relative amount of Target being offered\\n            uint256 bptToMint = BasicMath.mul(totalSupply(), reqTargetIn) / targetReserves;\\n\\n            // Pull the entire offered Target\\n            amountsIn[1 - pti] = reqTargetIn;\\n\\n            return (bptToMint, amountsIn);\\n        } else {\\n            // Disambiguate requested amounts wrt token type\\n            (uint256 reqPTIn, uint256 reqTargetIn) = (reqAmountsIn[pti], reqAmountsIn[1 - pti]);\\n            // Caclulate the percentage of the pool we'd get if we pulled all of the requested Target in\\n            uint256 bptToMintTarget = BasicMath.mul(totalSupply(), reqTargetIn) / targetReserves;\\n\\n            // Caclulate the percentage of the pool we'd get if we pulled all of the requested PT in\\n            uint256 bptToMintPT = BasicMath.mul(totalSupply(), reqPTIn) / pTReserves;\\n\\n            // Determine which amountIn is our limiting factor\\n            if (bptToMintTarget < bptToMintPT) {\\n                amountsIn[pti] = BasicMath.mul(pTReserves, reqTargetIn) / targetReserves;\\n                amountsIn[1 - pti] = reqTargetIn;\\n\\n                return (bptToMintTarget, amountsIn);\\n            } else {\\n                amountsIn[pti] = reqPTIn;\\n                amountsIn[1 - pti] = BasicMath.mul(targetReserves, reqPTIn) / pTReserves;\\n\\n                return (bptToMintPT, amountsIn);\\n            }\\n        }\\n    }\\n\\n    /// @notice Calculate the missing variable in the yield space equation given the direction (PT in vs. out)\\n    /// @dev We round in favor of the LPs, meaning that traders get slightly worse prices than they would if we had full\\n    /// precision. However, the differences are small (on the order of 1e-11), and should only matter for very small trades.\\n    function _onSwap(\\n        bool pTIn,\\n        bool givenIn,\\n        uint256 amountDelta,\\n        uint256 reservesTokenIn,\\n        uint256 reservesTokenOut\\n    ) internal view returns (uint256) {\\n        // xPre = token in reserves pre swap\\n        // yPre = token out reserves pre swap\\n\\n        // Seconds until maturity, in 18 decimals\\n        // After maturity, this pool becomes a constant sum AMM\\n        uint256 ttm = maturity > block.timestamp ? uint256(maturity - block.timestamp) * FixedPoint.ONE : 0;\\n\\n        // Time shifted partial `t` from the yieldspace paper (`ttm` adjusted by some factor `ts`)\\n        uint256 t = ts.mulDown(ttm);\\n\\n        // Full `t` with fees baked in\\n        uint256 a = (pTIn ? g2 : g1).mulUp(t).complement();\\n\\n        // Pow up for `x1` & `y1` and down for `xOrY2` causes the pow induced error for `xOrYPost`\\n        // to tend towards higher values rather than lower.\\n        // Effectively we're adding a little bump up for ammountIn, and down for amountOut\\n\\n        // x1 = xPre ^ a; y1 = yPre ^ a\\n        uint256 x1 = reservesTokenIn.powUp(a);\\n        uint256 y1 = reservesTokenOut.powUp(a);\\n\\n        // y2 = (yPre - amountOut) ^ a; x2 = (xPre + amountIn) ^ a\\n        //\\n        // No overflow risk in the addition as Balancer will only allow an `amountDelta` for tokens coming in\\n        // if the user actually has it, and the max token supply for well-behaved tokens is bounded by the uint256 type\\n        uint256 newReservesTokenInOrOut = givenIn ? reservesTokenIn + amountDelta : reservesTokenOut.sub(amountDelta);\\n        uint256 xOrY2 = newReservesTokenInOrOut.powDown(a);\\n\\n        // x1 + y1 = xOrY2 + xOrYPost ^ a\\n        // -> xOrYPost ^ a = x1 + y1 - x2\\n        // -> xOrYPost = (x1 + y1 - xOrY2) ^ (1 / a)\\n        uint256 xOrYPost = (x1.add(y1).sub(xOrY2)).powUp(FixedPoint.ONE.divDown(a));\\n        _require(!givenIn || reservesTokenOut > xOrYPost, Errors.SWAP_TOO_SMALL);\\n\\n        if (givenIn) {\\n            // Check that PT reserves are greater than \\\"Underlying\\\" reserves per section 6.3 of the YS paper\\n            _require(\\n                pTIn ?\\n                newReservesTokenInOrOut >= xOrYPost :\\n                newReservesTokenInOrOut <= xOrYPost,\\n                Errors.NEGATIVE_RATE\\n            );\\n\\n            // amountOut = yPre - yPost\\n            return reservesTokenOut.sub(xOrYPost);\\n        } else {\\n            _require(\\n                pTIn ?\\n                xOrYPost >= newReservesTokenInOrOut :\\n                xOrYPost <= newReservesTokenInOrOut,\\n                Errors.NEGATIVE_RATE\\n            );\\n\\n            // amountIn = xPost - xPre\\n            return xOrYPost.sub(reservesTokenIn);\\n        }\\n    }\\n\\n    /* ========== PROTOCOL FEE HELPERS ========== */\\n\\n    /// @notice Determine the growth in the invariant due to swap fees only\\n    /// @dev This can't be a view function b/c `Adapter.scale` is not a view function\\n    function _bptFeeDue(uint256[] memory reserves, uint256 protocolSwapFeePercentage) internal view returns (uint256) {\\n        uint256 ttm = maturity > block.timestamp ? uint256(maturity - block.timestamp) * FixedPoint.ONE : 0;\\n        uint256 a = ts.mulDown(ttm).complement();\\n\\n        // Invariant growth from time only\\n        uint256 timeOnlyInvariant = _lastToken0Reserve.powDown(a).add(_lastToken1Reserve.powDown(a));\\n\\n        // `x` & `y` for the actual invariant, with growth from time and fees\\n        uint256 x = reserves[pti].add(totalSupply()).powDown(a);\\n        uint256 y = reserves[1 - pti].mulDown(_initScale).powDown(a);\\n        uint256 fullInvariant = x.add(y);\\n\\n        if (fullInvariant <= timeOnlyInvariant) {\\n            // Similar to the invariant check in balancer-v2-monorepo/**/WeightedMath.sol,\\n            // this shouldn't happen outside of rounding errors, yet we keep this so that those\\n            // potential errors don't lead to a locked state\\n            return 0;\\n        }\\n\\n        // The formula to calculate fees due is:\\n        //\\n        // where:\\n        //   `g` is the factor by which reserves have grown\\n        //   `time-only invariant` = x^a + y^a\\n        //   `realized invariant`  = (g*x)^a + (g*y)^a\\n        //\\n        //              /   realized invariant     \\\\ ^ (1/a)\\n        // `growth` =  |   ----------------------  |\\n        //              \\\\   time-only invariant    /\\n        //\\n        //\\n        // This gets us the proportional growth of all token balances, or `growth`\\n        //\\n        // We can plug this into the following equation from `WeightedMath` in PR#1111 on the Balancer monorepo:\\n        //\\n        //             supply * protocol fee * (growth - 1)\\n        //                 ---------------------------\\n        //                          growth\\n        // toMint = --------------------------------------\\n        //              1 - protocol fee * (growth - 1)\\n        //                ---------------------------\\n        //                          growth\\n\\n        uint256 growth = fullInvariant.divDown(timeOnlyInvariant).powDown(FixedPoint.ONE.divDown(a));\\n        uint256 k = protocolSwapFeePercentage.mulDown(growth.sub(FixedPoint.ONE)).divDown(growth);\\n\\n        return totalSupply().mulDown(k).divDown(k.complement());\\n    }\\n\\n    /// @notice Cache the given reserve amounts\\n    /// @dev if the oracle is set, this function will also cache the invariant and supply\\n    function _cacheReserves(uint256[] memory reserves) internal {\\n        uint256 reservePT = reserves[pti].add(totalSupply());\\n        // Calculate the backdated Target reserve\\n        uint256 reserveUnderlying = reserves[1 - pti].mulDown(_initScale);\\n\\n        // Caclulate the invariant and store everything\\n        uint256 lastToken0Reserve;\\n        uint256 lastToken1Reserve;\\n        if (pti == 0) {\\n            lastToken0Reserve = reservePT;\\n            lastToken1Reserve = reserveUnderlying;\\n        } else {\\n            lastToken0Reserve = reserveUnderlying;\\n            lastToken1Reserve = reservePT;\\n        }\\n\\n        if (oracleData.oracleEnabled) {\\n            // If the oracle is enabled, cache the current invarant as well so that callers can determine liquidity\\n            uint256 ttm = maturity > block.timestamp ? uint256(maturity - block.timestamp) * FixedPoint.ONE : 0;\\n            uint256 a = ts.mulDown(ttm).complement();\\n\\n            oracleData.logInvariant = int200(\\n                LogCompression.toLowResLog(\\n                    lastToken0Reserve.powDown(a).add(lastToken1Reserve.powDown(a))\\n                )\\n            );\\n        }\\n\\n        _lastToken0Reserve = lastToken0Reserve;\\n        _lastToken1Reserve = lastToken1Reserve;\\n    }\\n\\n    /* ========== ORACLE HELPERS ========== */\\n\\n    /// @notice Update the oracle with the current index and timestamp\\n    /// @dev Must receive reserves that have already been upscaled\\n    /// @dev Acts as a no-op if:\\n    ///     * the oracle is not enabled \\n    ///     * a price has already been stored for this block\\n    ///     * the Target side of the pool doesn't have enough liquidity\\n    function _updateOracle(\\n        uint256 lastChangeBlock,\\n        uint256 balancePT,\\n        uint256 balanceTarget\\n    ) internal {\\n        // The Target side of the pool must have at least 0.01 units of liquidity for us to collect a price sample\\n        // note additional liquidity contraints may be enforced outside of this contract via the invariant TWAP\\n        if (oracleData.oracleEnabled && block.number > lastChangeBlock && balanceTarget >= 1e16) {\\n            // Use equation (2) from the YieldSpace paper to calculate the the marginal rate from the reserves\\n            uint256 impliedRate = balancePT.add(totalSupply())\\n                .divDown(balanceTarget.mulDown(_initScale))\\n                .sub(FixedPoint.ONE);\\n\\n            // Cacluate the price of one PT in Target terms\\n            uint256 pTPriceInTarget = getPriceFromImpliedRate(impliedRate);\\n\\n            // Following Balancer's oracle conventions, get price of token 1 in terms of token 0 and\\n            // and the price of one BPT in terms of token 0\\n            //\\n            // note b/c reserves are upscaled coming into this function,\\n            // price is already upscaled to 18 decimals, regardless of the decimals used for token 0 & 1\\n            uint256 pairPrice = pti == 0 ? FixedPoint.ONE.divDown(pTPriceInTarget) : pTPriceInTarget;\\n\\n            uint256 oracleUpdatedIndex = _processPriceData(\\n                oracleData.oracleSampleInitialTimestamp,\\n                oracleData.oracleIndex,\\n                LogCompression.toLowResLog(pairPrice),\\n                // We diverge from Balancer's defaults here by storing implied rate\\n                // rather than BPT price in this second slot\\n                //\\n                // Also note implied rates of less than 1e6 are taken as 1e6, b/c:\\n                //     1) `toLowResLog` fails for 0 and 1e6 is precise enough for our needs\\n                //     2) 1e6 is the lowest value Balancer passes into this util (min for totalSupply())\\n                impliedRate < 1e6 ? LogCompression.toLowResLog(1e6) : LogCompression.toLowResLog(impliedRate),\\n                int256(oracleData.logInvariant)\\n            );\\n\\n            if (oracleData.oracleIndex != oracleUpdatedIndex) {\\n                oracleData.oracleSampleInitialTimestamp = uint32(block.timestamp);\\n                oracleData.oracleIndex = uint16(oracleUpdatedIndex);\\n            }\\n        }\\n    }\\n\\n    function _getOracleIndex() internal view override returns (uint256) {\\n        return oracleData.oracleIndex;\\n    }\\n\\n    /* ========== PUBLIC GETTERS ========== */\\n\\n    /// @notice Get the APY implied rate for PTs given a price in Target\\n    function getImpliedRateFromPrice(uint256 pTPriceInTarget) public view returns (uint256 impliedRate) {\\n        if (block.timestamp >= maturity) {\\n            return 0;\\n        }\\n\\n        impliedRate = FixedPoint.ONE\\n            .divDown(pTPriceInTarget.mulDown(AdapterLike(adapter).scaleStored()))\\n            .powDown(SECONDS_PER_YEAR.divDown(maturity - block.timestamp))\\n            .sub(FixedPoint.ONE);\\n    }\\n\\n    /// @notice Get price of PTs in Target terms given a price for PTs in Target\\n    function getPriceFromImpliedRate(uint256 impliedRate) public view returns (uint256 pTPriceInTarget) {\\n        if (block.timestamp >= maturity) {\\n            return FixedPoint.ONE;\\n        }\\n\\n        pTPriceInTarget = FixedPoint.ONE\\n            .divDown(impliedRate.add(FixedPoint.ONE)\\n            .powDown((maturity - block.timestamp)\\n            .divDown(SECONDS_PER_YEAR)))\\n            .divDown(AdapterLike(adapter).scaleStored());\\n    }\\n\\n    /// @notice Get the \\\"fair\\\" price for the BPT tokens given a correct price for PTs\\n    /// in terms of Target. i.e. the price of one BPT in terms of Target using reserves\\n    /// as they would be if they accurately reflected the true PT price\\n    /// @dev for a technical explanation of the concept, see the description in the following repo:\\n    /// https://github.com/makerdao/univ2-lp-oracle/blob/874a59d74d847909cc4a31f0d38ee6b020f6525f/src/UNIV2LPOracle.sol#L26\\n    function getFairBPTPrice(uint256 ptTwapDuration)\\n        public\\n        view\\n        returns (uint256 fairBptPriceInTarget)\\n    {\\n        OracleAverageQuery[] memory queries = new OracleAverageQuery[](1);\\n        queries[0] = OracleAverageQuery({\\n            variable: Variable.PAIR_PRICE,\\n            secs: ptTwapDuration,\\n            ago: 1 hours // take the oracle from 1 hour ago + ptTwapDuration ago to 1 hour ago\\n        });\\n\\n        // TWAP read will revert with ORACLE_NOT_INITIALIZED if the buffer has not been filled\\n        uint256[] memory results = this.getTimeWeightedAverage(queries);\\n        uint256 pTPriceInTarget = pti == 1 ? results[0] : FixedPoint.ONE.divDown(results[0]);\\n\\n        uint256 impliedRate = getImpliedRateFromPrice(pTPriceInTarget);\\n        (, uint256[] memory balances, ) = _vault.getPoolTokens(_poolId);\\n\\n        uint256 ttm = maturity > block.timestamp\\n            ? uint256(maturity - block.timestamp) * FixedPoint.ONE\\n            : 0;\\n        uint256 a = ts.mulDown(ttm).complement();\\n\\n        uint256 k = balances[pti].add(totalSupply()).powDown(a).add(\\n            balances[1 - pti].mulDown(_initScale).powDown(a)\\n        );\\n\\n        // Equilibrium reserves for the PT side, w/o the final `- totalSupply` at the end\\n        uint256 equilibriumPTReservesPartial = k.divDown(\\n            FixedPoint.ONE.divDown(FixedPoint.ONE.add(impliedRate).powDown(a)).add(FixedPoint.ONE)\\n        ).powDown(FixedPoint.ONE.divDown(a));\\n\\n        uint256 equilibriumTargetReserves = equilibriumPTReservesPartial\\n            .divDown(_initScale.mulDown(FixedPoint.ONE.add(impliedRate)));\\n\\n        fairBptPriceInTarget = equilibriumTargetReserves\\n            // Complete the equilibrium PT reserve calc\\n            .add(equilibriumPTReservesPartial.sub(totalSupply())\\n            .mulDown(pTPriceInTarget)).divDown(totalSupply());\\n    }\\n\\n    /// @notice Get token indices for PT and Target\\n    function getIndices() public view returns (uint256 _pti, uint256 _targeti) {\\n        _pti = pti;\\n        _targeti = 1 - pti;\\n    }\\n\\n    /* ========== BALANCER REQUIRED INTERFACE ========== */\\n\\n    function getPoolId() public view override returns (bytes32) {\\n        return _poolId;\\n    }\\n\\n    function getVault() public view returns (IVault) {\\n        return _vault;\\n    }\\n\\n    /* ========== BALANCER SCALING FUNCTIONS ========== */\\n\\n    /// @notice Scaling factors for PT & Target tokens\\n    function _scalingFactor(bool pt) internal view returns (uint256) {\\n        return pt ? _scalingFactorPT : _scalingFactorTarget;\\n    }\\n\\n    /// @notice Scale number type to 18 decimals if need be\\n    function _upscale(uint256 amount, uint256 scalingFactor) internal pure returns (uint256) {\\n        return BasicMath.mul(amount, scalingFactor);\\n    }\\n\\n    /// @notice Ensure number type is back in its base decimal if need be, rounding down\\n    function _downscaleDown(uint256 amount, uint256 scalingFactor) internal pure returns (uint256) {\\n        return amount / scalingFactor;\\n    }\\n\\n    /// @notice Ensure number type is back in its base decimal if need be, rounding up\\n    function _downscaleUp(uint256 amount, uint256 scalingFactor) internal pure returns (uint256) {\\n        return BasicMath.divUp(amount, scalingFactor);\\n    }\\n\\n    /// @notice Upscale array of token amounts to 18 decimals if need be\\n    function _upscaleArray(uint256[] memory amounts) internal view {\\n        amounts[pti] = BasicMath.mul(amounts[pti], _scalingFactor(true));\\n        amounts[1 - pti] = BasicMath.mul(amounts[1 - pti], _scalingFactor(false));\\n    }\\n\\n    /// @notice Downscale array of token amounts to 18 decimals if need be, rounding down\\n    function _downscaleDownArray(uint256[] memory amounts) internal view {\\n        amounts[pti] = amounts[pti] / _scalingFactor(true);\\n        amounts[1 - pti] = amounts[1 - pti] / _scalingFactor(false);\\n    }\\n    /// @notice Downscale array of token amounts to 18 decimals if need be, rounding up\\n    function _downscaleUpArray(uint256[] memory amounts) internal view {\\n        amounts[pti] = BasicMath.divUp(amounts[pti], _scalingFactor(true));\\n        amounts[1 - pti] = BasicMath.divUp(amounts[1 - pti], _scalingFactor(false));\\n    }\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    /// Taken from balancer-v2-monorepo/**/WeightedPool2Tokens.sol\\n    modifier onlyVault(bytes32 poolId_) {\\n        _require(msg.sender == address(getVault()), Errors.CALLER_NOT_VAULT);\\n        _require(poolId_ == getPoolId(), Errors.INVALID_POOL_ID);\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x984c72f26a8c604f5a732a05faf5bf92a4eb4d4546ec1a520f12863c5ba738bf\",\"license\":\"AGPL-3.0-only\"},\"lib/v1-space/src/SpaceFactory.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport { FixedPoint } from \\\"@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol\\\";\\nimport { BasePoolFactory } from \\\"@balancer-labs/v2-pool-utils/contracts/factories/BasePoolFactory.sol\\\";\\nimport { IVault } from \\\"@balancer-labs/v2-vault/contracts/interfaces/IVault.sol\\\";\\nimport { Trust } from \\\"@sense-finance/v1-utils/src/Trust.sol\\\";\\n\\nimport { Space } from \\\"./Space.sol\\\";\\nimport { Errors, _require } from \\\"./Errors.sol\\\";\\n\\ninterface DividerLike {\\n    function series(\\n        address, /* adapter */\\n        uint256 /* maturity */\\n    )\\n        external\\n        returns (\\n            address, /* principal token */\\n            address, /* yield token */\\n            address, /* sponsor */\\n            uint256, /* reward */\\n            uint256, /* iscale */\\n            uint256, /* mscale */\\n            uint256, /* maxscale */\\n            uint128, /* issuance */\\n            uint128 /* tilt */\\n        );\\n\\n    function pt(address adapter, uint256 maturity) external returns (address);\\n\\n    function yt(address adapter, uint256 maturity) external returns (address);\\n}\\n\\ncontract SpaceFactory is Trust {\\n    /* ========== PUBLIC IMMUTABLES ========== */\\n\\n    /// @notice Balancer Vault\\n    IVault public immutable vault;\\n\\n    /// @notice Sense Divider\\n    address public immutable divider;\\n\\n    /* ========== PUBLIC MUTABLE STORAGE ========== */\\n\\n    /// @notice Pool registry (adapter -> maturity -> pool address)\\n    mapping(address => mapping(uint256 => address)) public pools;\\n\\n    /// @notice Yieldspace config\\n    uint256 public ts;\\n    uint256 public g1;\\n    uint256 public g2;\\n\\n    /// @notice Oracle flag\\n    bool public oracleEnabled;\\n\\n    constructor(\\n        IVault _vault,\\n        address _divider,\\n        uint256 _ts,\\n        uint256 _g1,\\n        uint256 _g2,\\n        bool _oracleEnabled\\n    ) Trust(msg.sender) {\\n        vault = _vault;\\n        divider = _divider;\\n        ts = _ts;\\n        g1 = _g1;\\n        g2 = _g2;\\n        oracleEnabled = _oracleEnabled;\\n    }\\n\\n    /// @notice Deploys a new `Space` contract\\n    function create(address adapter, uint256 maturity) external returns (address pool) {\\n        _require(pools[adapter][maturity] == address(0), Errors.POOL_ALREADY_DEPLOYED);\\n\\n        pool = address(new Space(\\n            vault,\\n            adapter,\\n            maturity,\\n            DividerLike(divider).pt(\\n                adapter,\\n                maturity\\n            ),\\n            ts,\\n            g1,\\n            g2,\\n            oracleEnabled\\n        ));\\n\\n        pools[adapter][maturity] = pool;\\n    }\\n\\n    function setParams(\\n        uint256 _ts,\\n        uint256 _g1,\\n        uint256 _g2,\\n        bool _oracleEnabled\\n    ) public requiresTrust {\\n        // g1 is for swapping Targets to PT and should discount the effective interest\\n        _require(_g1 <= FixedPoint.ONE, Errors.INVALID_G1);\\n        // g2 is for swapping PT to Target and should mark the effective interest up\\n        _require(_g2 >= FixedPoint.ONE, Errors.INVALID_G2);\\n\\n        ts = _ts;\\n        g1 = _g1;\\n        g2 = _g2;\\n        oracleEnabled = _oracleEnabled;\\n    }\\n}\\n\",\"keccak256\":\"0xce445befd4a617a6dd6fdfa7defda7aed777dae507b6ed8f1e1ed4a5bee28efa\",\"license\":\"AGPL-3.0-only\"},\"lib/v1-space/src/oracle/Buffer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n// Forked from balancer-v2-monorepo/pkg/pool-utils/contracts/oracle/**\\n// at commit ef246cf213541c4120a78f811560f100e5a7e15a\\n\\npragma solidity ^0.7.0;\\n\\nlibrary Buffer {\\n    // The buffer is a circular storage structure with 20 slots.\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    uint256 internal constant SIZE = 20;\\n\\n    /**\\n     * @dev Returns the index of the element before the one pointed by `index`.\\n     */\\n    function prev(uint256 index) internal pure returns (uint256) {\\n        return sub(index, 1);\\n    }\\n\\n    /**\\n     * @dev Returns the index of the element after the one pointed by `index`.\\n     */\\n    function next(uint256 index) internal pure returns (uint256) {\\n        return add(index, 1);\\n    }\\n\\n    /**\\n     * @dev Returns the index of an element `offset` slots after the one pointed by `index`.\\n     */\\n    function add(uint256 index, uint256 offset) internal pure returns (uint256) {\\n        return (index + offset) % SIZE;\\n    }\\n\\n    /**\\n     * @dev Returns the index of an element `offset` slots before the one pointed by `index`.\\n     */\\n    function sub(uint256 index, uint256 offset) internal pure returns (uint256) {\\n        return (index + SIZE - offset) % SIZE;\\n    }\\n}\\n\",\"keccak256\":\"0x6db2a38d08fd362a90e95c2702ae51277312e6f9a83de5c0a4e921c582d76ca6\",\"license\":\"GPL-3.0-or-later\"},\"lib/v1-space/src/oracle/PoolPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n// Forked from balancer-v2-monorepo/pkg/pool-utils/contracts/oracle/**\\n// at commit ef246cf213541c4120a78f811560f100e5a7e15a\\n\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/helpers/BalancerErrors.sol\\\";\\n\\nimport \\\"./interfaces/IPriceOracle.sol\\\";\\nimport \\\"./interfaces/IPoolPriceOracle.sol\\\";\\n\\nimport \\\"./Buffer.sol\\\";\\nimport \\\"./Samples.sol\\\";\\nimport \\\"./QueryProcessor.sol\\\";\\n\\n/**\\n * @dev This module allows Pools to access historical pricing information.\\n *\\n * It uses a 20 long circular buffer to store past data, where the data within each sample is the result of\\n * accumulating live data for no more than two minutes. Therefore, assuming the worst case scenario where new data is\\n * updated in every single block, the oldest samples in the buffer (and therefore largest queryable period) will\\n * be slightly over 6.5 hours old.\\n *\\n * Usage of this module requires the caller to keep track of two variables: the latest circular buffer index, and the\\n * timestamp when the index last changed. Aditionally, access to the latest circular buffer index must be exposed by\\n * implementing `_getOracleIndex`.\\n *\\n * This contract relies on the `QueryProcessor` linked library to reduce bytecode size.\\n */\\nabstract contract PoolPriceOracle is IPoolPriceOracle, IPriceOracle {\\n    using Buffer for uint256;\\n    using Samples for bytes32;\\n\\n    // Each sample in the buffer accumulates information for up to 20 minutes. This is simply to reduce the size of the\\n    // buffer: small time deviations will not have any significant effect.\\n    // solhint-disable not-rely-on-time\\n    uint256 private constant _MAX_SAMPLE_DURATION = 20 minutes;\\n\\n    // We use a mapping to simulate an array: the buffer won't grow or shrink, and since we will always use valid\\n    // indexes using a mapping saves gas by skipping the bounds checks.\\n    mapping(uint256 => bytes32) internal _samples;\\n\\n    // IPoolPriceOracle\\n\\n    function getSample(uint256 index)\\n        external\\n        view\\n        override\\n        returns (\\n            int256 logPairPrice,\\n            int256 accLogPairPrice,\\n            int256 logBptPrice,\\n            int256 accLogBptPrice,\\n            int256 logInvariant,\\n            int256 accLogInvariant,\\n            uint256 timestamp\\n        )\\n    {\\n        _require(index < Buffer.SIZE, Errors.ORACLE_INVALID_INDEX);\\n\\n        bytes32 sample = _getSample(index);\\n        return sample.unpack();\\n    }\\n\\n    function getTotalSamples() external pure override returns (uint256) {\\n        return Buffer.SIZE;\\n    }\\n\\n    /**\\n     * @dev Manually dirty oracle sample storage slots with dummy data, to reduce the gas cost of the future swaps\\n     * that will initialize them. This function is only useful before the oracle has been fully initialized.\\n     *\\n     * `endIndex` is non-inclusive.\\n     */\\n    function dirtyUninitializedOracleSamples(uint256 startIndex, uint256 endIndex) external {\\n        _require(startIndex < endIndex && endIndex <= Buffer.SIZE, Errors.OUT_OF_BOUNDS);\\n\\n        // Uninitialized samples are identified by a zero timestamp -- all other fields are ignored,\\n        // so any non-zero value with a zero timestamp suffices.\\n        bytes32 initSample = Samples.pack(1, 0, 0, 0, 0, 0, 0);\\n        for (uint256 i = startIndex; i < endIndex; i++) {\\n            if (_samples[i].timestamp() == 0) {\\n                _samples[i] = initSample;\\n            }\\n        }\\n    }\\n\\n    // IPriceOracle\\n\\n    function getLargestSafeQueryWindow() external pure override returns (uint256) {\\n        return 6.66 hours;\\n    }\\n\\n    function getLatest(Variable variable) external view override returns (uint256) {\\n        return QueryProcessor.getInstantValue(_samples, variable, _getOracleIndex());\\n    }\\n\\n    function getTimeWeightedAverage(OracleAverageQuery[] memory queries)\\n        external\\n        view\\n        override\\n        returns (uint256[] memory results)\\n    {\\n        results = new uint256[](queries.length);\\n        uint256 latestIndex = _getOracleIndex();\\n\\n        for (uint256 i = 0; i < queries.length; ++i) {\\n            results[i] = QueryProcessor.getTimeWeightedAverage(_samples, queries[i], latestIndex);\\n        }\\n    }\\n\\n    function getPastAccumulators(OracleAccumulatorQuery[] memory queries)\\n        external\\n        view\\n        override\\n        returns (int256[] memory results)\\n    {\\n        results = new int256[](queries.length);\\n        uint256 latestIndex = _getOracleIndex();\\n\\n        OracleAccumulatorQuery memory query;\\n        for (uint256 i = 0; i < queries.length; ++i) {\\n            query = queries[i];\\n            results[i] = _getPastAccumulator(query.variable, latestIndex, query.ago);\\n        }\\n    }\\n\\n    // Internal functions\\n\\n    /**\\n     * @dev Processes new price and invariant data, updating the latest sample or creating a new one.\\n     *\\n     * Receives the new logarithms of values to store: `logPairPrice`, `logBptPrice` and `logInvariant`, as well the\\n     * index of the latest sample and the timestamp of its creation.\\n     *\\n     * Returns the index of the latest sample. If different from `latestIndex`, the caller should also store the\\n     * timestamp, and pass it on future calls to this function.\\n     */\\n    function _processPriceData(\\n        uint256 latestSampleCreationTimestamp,\\n        uint256 latestIndex,\\n        int256 logPairPrice,\\n        int256 logBptPrice,\\n        int256 logInvariant\\n    ) internal returns (uint256) {\\n        // Read latest sample, and compute the next one by updating it with the newly received data.\\n        bytes32 sample = _getSample(latestIndex).update(logPairPrice, logBptPrice, logInvariant, block.timestamp);\\n\\n        // We create a new sample if more than _MAX_SAMPLE_DURATION seconds have elapsed since the creation of the\\n        // latest one. In other words, no sample accumulates data over a period larger than _MAX_SAMPLE_DURATION.\\n        bool newSample = block.timestamp - latestSampleCreationTimestamp >= _MAX_SAMPLE_DURATION;\\n        latestIndex = newSample ? latestIndex.next() : latestIndex;\\n\\n        // Store the updated or new sample.\\n        _samples[latestIndex] = sample;\\n\\n        return latestIndex;\\n    }\\n\\n    function _getPastAccumulator(\\n        IPriceOracle.Variable variable,\\n        uint256 latestIndex,\\n        uint256 ago\\n    ) internal view returns (int256) {\\n        return QueryProcessor.getPastAccumulator(_samples, variable, latestIndex, ago);\\n    }\\n\\n    function _findNearestSample(\\n        uint256 lookUpDate,\\n        uint256 offset,\\n        uint256 length\\n    ) internal view returns (bytes32 prev, bytes32 next) {\\n        return QueryProcessor.findNearestSample(_samples, lookUpDate, offset, length);\\n    }\\n\\n    /**\\n     * @dev Returns the sample that corresponds to a given `index`.\\n     *\\n     * Using this function instead of accessing storage directly results in denser bytecode (since the storage slot is\\n     * only computed here).\\n     */\\n    function _getSample(uint256 index) internal view returns (bytes32) {\\n        return _samples[index];\\n    }\\n\\n    /**\\n     * @dev Virtual function to be implemented by derived contracts. Must return the current index of the oracle\\n     * circular buffer.\\n     */\\n    function _getOracleIndex() internal view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0xa2f822f2317b64feeeeae34d7a19a0d5ee3339e49e854ae47cae7724a0ab2088\",\"license\":\"GPL-3.0-or-later\"},\"lib/v1-space/src/oracle/QueryProcessor.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n// Forked from balancer-v2-monorepo/pkg/pool-utils/contracts/oracle/**\\n// at commit ef246cf213541c4120a78f811560f100e5a7e15a\\n\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/helpers/BalancerErrors.sol\\\";\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/helpers/LogCompression.sol\\\";\\n\\nimport \\\"./interfaces/IPriceOracle.sol\\\";\\n\\nimport \\\"./Buffer.sol\\\";\\nimport \\\"./Samples.sol\\\";\\n\\n/**\\n * @dev Auxiliary library for PoolPriceOracle, offloading most of the query code to reduce bytecode size by using this\\n * as a linked library. The downside is an extra DELEGATECALL is added (2600 gas as of the Berlin hardfork), but the\\n * bytecode size gains are so big (specially of the oracle contract does not use `LogCompression.fromLowResLog`) that\\n * it is worth it.\\n */\\nlibrary QueryProcessor {\\n    using Buffer for uint256;\\n    using Samples for bytes32;\\n    using LogCompression for int256;\\n\\n    /**\\n     * @dev Returns the value for `variable` at the indexed sample.\\n     */\\n    function getInstantValue(\\n        mapping(uint256 => bytes32) storage samples,\\n        IPriceOracle.Variable variable,\\n        uint256 index\\n    ) external view returns (uint256) {\\n        bytes32 sample = samples[index];\\n        _require(sample.timestamp() > 0, Errors.ORACLE_NOT_INITIALIZED);\\n\\n        int256 rawInstantValue = sample.instant(variable);\\n        return LogCompression.fromLowResLog(rawInstantValue);\\n    }\\n\\n    /**\\n     * @dev Returns the time average weighted price corresponding to `query`.\\n     */\\n    function getTimeWeightedAverage(\\n        mapping(uint256 => bytes32) storage samples,\\n        IPriceOracle.OracleAverageQuery memory query,\\n        uint256 latestIndex\\n    ) external view returns (uint256) {\\n        _require(query.secs != 0, Errors.ORACLE_BAD_SECS);\\n\\n        int256 beginAccumulator = getPastAccumulator(samples, query.variable, latestIndex, query.ago + query.secs);\\n        int256 endAccumulator = getPastAccumulator(samples, query.variable, latestIndex, query.ago);\\n        return LogCompression.fromLowResLog((endAccumulator - beginAccumulator) / int256(query.secs));\\n    }\\n\\n    /**\\n     * @dev Returns the value of the accumulator for `variable` `ago` seconds ago. `latestIndex` must be the index of\\n     * the latest sample in the buffer.\\n     *\\n     * Reverts under the following conditions:\\n     *  - if the buffer is empty.\\n     *  - if querying past information and the buffer has not been fully initialized.\\n     *  - if querying older information than available in the buffer. Note that a full buffer guarantees queries for the\\n     *    past 34 hours will not revert.\\n     *\\n     * If requesting information for a timestamp later than the latest one, it is extrapolated using the latest\\n     * available data.\\n     *\\n     * When no exact information is available for the requested past timestamp (as usually happens, since at most one\\n     * timestamp is stored every two minutes), it is estimated by performing linear interpolation using the closest\\n     * values. This process is guaranteed to complete performing at most 10 storage reads.\\n     */\\n    function getPastAccumulator(\\n        mapping(uint256 => bytes32) storage samples,\\n        IPriceOracle.Variable variable,\\n        uint256 latestIndex,\\n        uint256 ago\\n    ) public view returns (int256) {\\n        // solhint-disable not-rely-on-time\\n        // `ago` must not be before the epoch.\\n        _require(block.timestamp >= ago, Errors.ORACLE_INVALID_SECONDS_QUERY);\\n        uint256 lookUpTime = block.timestamp - ago;\\n\\n        bytes32 latestSample = samples[latestIndex];\\n        uint256 latestTimestamp = latestSample.timestamp();\\n\\n        // The latest sample only has a non-zero timestamp if no data was ever processed and stored in the buffer.\\n        _require(latestTimestamp > 0, Errors.ORACLE_NOT_INITIALIZED);\\n\\n        if (latestTimestamp <= lookUpTime) {\\n            // The accumulator at times ahead of the latest one are computed by extrapolating the latest data. This is\\n            // equivalent to the instant value not changing between the last timestamp and the look up time.\\n\\n            // We can use unchecked arithmetic since the accumulator can be represented in 53 bits, timestamps in 31\\n            // bits, and the instant value in 22 bits.\\n            uint256 elapsed = lookUpTime - latestTimestamp;\\n            return latestSample.accumulator(variable) + (latestSample.instant(variable) * int256(elapsed));\\n        } else {\\n            // The look up time is before the latest sample, but we need to make sure that it is not before the oldest\\n            // sample as well.\\n\\n            // Since we use a circular buffer, the oldest sample is simply the next one.\\n            uint256 bufferLength;\\n            uint256 oldestIndex = latestIndex.next();\\n            {\\n                // Local scope used to prevent stack-too-deep errors.\\n                bytes32 oldestSample = samples[oldestIndex];\\n                uint256 oldestTimestamp = oldestSample.timestamp();\\n\\n                if (oldestTimestamp > 0) {\\n                    // If the oldest timestamp is not zero, it means the buffer was fully initialized.\\n                    bufferLength = Buffer.SIZE;\\n                } else {\\n                    // If the buffer was not fully initialized, we haven't wrapped around it yet,\\n                    // and can treat it as a regular array where the oldest index is the first one,\\n                    // and the length the number of samples.\\n                    bufferLength = oldestIndex; // Equal to latestIndex.next()\\n                    oldestIndex = 0;\\n                    oldestTimestamp = samples[0].timestamp();\\n                }\\n\\n                // Finally check that the look up time is not previous to the oldest timestamp.\\n                _require(oldestTimestamp <= lookUpTime, Errors.ORACLE_QUERY_TOO_OLD);\\n            }\\n\\n            // Perform binary search to find nearest samples to the desired timestamp.\\n            (bytes32 prev, bytes32 next) = findNearestSample(samples, lookUpTime, oldestIndex, bufferLength);\\n\\n            // `next`'s timestamp is guaranteed to be larger than `prev`'s, so we can skip checked arithmetic.\\n            uint256 samplesTimeDiff = next.timestamp() - prev.timestamp();\\n\\n            if (samplesTimeDiff > 0) {\\n                // We estimate the accumulator at the requested look up time by interpolating linearly between the\\n                // previous and next accumulators.\\n\\n                // We can use unchecked arithmetic since the accumulators can be represented in 53 bits, and timestamps\\n                // in 31 bits.\\n                int256 samplesAccDiff = next.accumulator(variable) - prev.accumulator(variable);\\n                uint256 elapsed = lookUpTime - prev.timestamp();\\n                return prev.accumulator(variable) + ((samplesAccDiff * int256(elapsed)) / int256(samplesTimeDiff));\\n            } else {\\n                // Rarely, one of the samples will have the exact requested look up time, which is indicated by `prev`\\n                // and `next` being the same. In this case, we simply return the accumulator at that point in time.\\n                return prev.accumulator(variable);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Finds the two samples with timestamps before and after `lookUpDate`. If one of the samples matches exactly,\\n     * both `prev` and `next` will be it. `offset` is the index of the oldest sample in the buffer. `length` is the size\\n     * of the samples list.\\n     *\\n     * Assumes `lookUpDate` is greater or equal than the timestamp of the oldest sample, and less or equal than the\\n     * timestamp of the latest sample.\\n     */\\n    function findNearestSample(\\n        mapping(uint256 => bytes32) storage samples,\\n        uint256 lookUpDate,\\n        uint256 offset,\\n        uint256 length\\n    ) public view returns (bytes32 prev, bytes32 next) {\\n        // We're going to perform a binary search in the circular buffer, which requires it to be sorted. To achieve\\n        // this, we offset all buffer accesses by `offset`, making the first element the oldest one.\\n\\n        // Auxiliary variables in a typical binary search: we will look at some value `mid` between `low` and `high`,\\n        // periodically increasing `low` or decreasing `high` until we either find a match or determine the element is\\n        // not in the array.\\n        uint256 low = 0;\\n        uint256 high = length - 1;\\n        uint256 mid;\\n\\n        // If the search fails and no sample has a timestamp of `lookUpDate` (as is the most common scenario), `sample`\\n        // will be either the sample with the largest timestamp smaller than `lookUpDate`, or the one with the smallest\\n        // timestamp larger than `lookUpDate`.\\n        bytes32 sample;\\n        uint256 sampleTimestamp;\\n\\n        while (low <= high) {\\n            // Mid is the floor of the average.\\n            uint256 midWithoutOffset = (high + low) / 2;\\n\\n            // Recall that the buffer is not actually sorted: we need to apply the offset to access it in a sorted way.\\n            mid = midWithoutOffset.add(offset);\\n            sample = samples[mid];\\n            sampleTimestamp = sample.timestamp();\\n\\n            if (sampleTimestamp < lookUpDate) {\\n                // If the mid sample is bellow the look up date, then increase the low index to start from there.\\n                low = midWithoutOffset + 1;\\n            } else if (sampleTimestamp > lookUpDate) {\\n                // If the mid sample is above the look up date, then decrease the high index to start from there.\\n\\n                // We can skip checked arithmetic: it is impossible for `high` to ever be 0, as a scenario where `low`\\n                // equals 0 and `high` equals 1 would result in `low` increasing to 1 in the previous `if` clause.\\n                high = midWithoutOffset - 1;\\n            } else {\\n                // sampleTimestamp == lookUpDate\\n                // If we have an exact match, return the sample as both `prev` and `next`.\\n                return (sample, sample);\\n            }\\n        }\\n\\n        // In case we reach here, it means we didn't find exactly the sample we where looking for.\\n        return sampleTimestamp < lookUpDate ? (sample, samples[mid.next()]) : (samples[mid.prev()], sample);\\n    }\\n}\\n\",\"keccak256\":\"0x20323db19e0f7299d16046f5d85fcb248a5c11dcd73674969fe70788ce048308\",\"license\":\"GPL-3.0-or-later\"},\"lib/v1-space/src/oracle/Samples.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n// Forked from balancer-v2-monorepo/pkg/pool-utils/contracts/oracle/**\\n// at commit ef246cf213541c4120a78f811560f100e5a7e15a\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/helpers/WordCodec.sol\\\";\\n\\nimport \\\"./interfaces/IPriceOracle.sol\\\";\\n\\n/**\\n * @dev This library provides functions to help manipulating samples for Pool Price Oracles. It handles updates,\\n * encoding, and decoding of samples.\\n *\\n * Each sample holds the timestamp of its last update, plus information about three pieces of data: the price pair, the\\n * price of BPT (the associated Pool token), and the invariant.\\n *\\n * Prices and invariant are not stored directly: instead, we store their logarithm. These are known as the 'instant'\\n * values: the exact value at that timestamp.\\n *\\n * Additionally, for each value we keep an accumulator with the sum of all past values, each weighted by the time\\n * elapsed since the previous update. This lets us later subtract accumulators at different points in time and divide by\\n * the time elapsed between them, arriving at the geometric mean of the values (also known as log-average).\\n *\\n * All samples are stored in a single 256 bit word with the following structure:\\n *\\n * [    log pair price     |        bpt price      |       invariant       |  timestamp ]\\n * [ instant | accumulator | instant | accumulator | instant | accumulator |            ]\\n * [  int22  |    int53    |  int22  |    int53    |  int22  |    int53    |    uint31  ]\\n * MSB                                                                                LSB\\n *\\n * Assuming the timestamp doesn't overflow (which holds until the year 2038), the largest elapsed time is 2^31, which\\n * means the largest possible accumulator value is 2^21 * 2^31, which can be represented using a signed 53 bit integer.\\n */\\nlibrary Samples {\\n    using WordCodec for int256;\\n    using WordCodec for uint256;\\n    using WordCodec for bytes32;\\n\\n    uint256 internal constant _TIMESTAMP_OFFSET = 0;\\n    uint256 internal constant _ACC_LOG_INVARIANT_OFFSET = 31;\\n    uint256 internal constant _INST_LOG_INVARIANT_OFFSET = 84;\\n    uint256 internal constant _ACC_LOG_BPT_PRICE_OFFSET = 106;\\n    uint256 internal constant _INST_LOG_BPT_PRICE_OFFSET = 159;\\n    uint256 internal constant _ACC_LOG_PAIR_PRICE_OFFSET = 181;\\n    uint256 internal constant _INST_LOG_PAIR_PRICE_OFFSET = 234;\\n\\n    /**\\n     * @dev Updates a sample, accumulating the new data based on the elapsed time since the previous update. Returns the\\n     * updated sample.\\n     *\\n     * IMPORTANT: This function does not perform any arithmetic checks. In particular, it assumes the caller will never\\n     * pass values that cannot be represented as 22 bit signed integers. Additionally, it also assumes\\n     * `currentTimestamp` is greater than `sample`'s timestamp.\\n     */\\n    function update(\\n        bytes32 sample,\\n        int256 instLogPairPrice,\\n        int256 instLogBptPrice,\\n        int256 instLogInvariant,\\n        uint256 currentTimestamp\\n    ) internal pure returns (bytes32) {\\n        // Because elapsed can be represented as a 31 bit unsigned integer, and the received values can be represented\\n        // as 22 bit signed integers, we don't need to perform checked arithmetic.\\n\\n        int256 elapsed = int256(currentTimestamp - timestamp(sample));\\n        int256 accLogPairPrice = _accLogPairPrice(sample) + instLogPairPrice * elapsed;\\n        int256 accLogBptPrice = _accLogBptPrice(sample) + instLogBptPrice * elapsed;\\n        int256 accLogInvariant = _accLogInvariant(sample) + instLogInvariant * elapsed;\\n\\n        return\\n            pack(\\n                instLogPairPrice,\\n                accLogPairPrice,\\n                instLogBptPrice,\\n                accLogBptPrice,\\n                instLogInvariant,\\n                accLogInvariant,\\n                currentTimestamp\\n            );\\n    }\\n\\n    /**\\n     * @dev Returns the instant value stored in `sample` for `variable`.\\n     */\\n    function instant(bytes32 sample, IPriceOracle.Variable variable) internal pure returns (int256) {\\n        if (variable == IPriceOracle.Variable.PAIR_PRICE) {\\n            return _instLogPairPrice(sample);\\n        } else if (variable == IPriceOracle.Variable.BPT_PRICE) {\\n            return _instLogBptPrice(sample);\\n        } else {\\n            // variable == IPriceOracle.Variable.INVARIANT\\n            return _instLogInvariant(sample);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the accumulator value stored in `sample` for `variable`.\\n     */\\n    function accumulator(bytes32 sample, IPriceOracle.Variable variable) internal pure returns (int256) {\\n        if (variable == IPriceOracle.Variable.PAIR_PRICE) {\\n            return _accLogPairPrice(sample);\\n        } else if (variable == IPriceOracle.Variable.BPT_PRICE) {\\n            return _accLogBptPrice(sample);\\n        } else {\\n            // variable == IPriceOracle.Variable.INVARIANT\\n            return _accLogInvariant(sample);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns `sample`'s timestamp.\\n     */\\n    function timestamp(bytes32 sample) internal pure returns (uint256) {\\n        return sample.decodeUint31(_TIMESTAMP_OFFSET);\\n    }\\n\\n    /**\\n     * @dev Returns `sample`'s instant value for the logarithm of the pair price.\\n     */\\n    function _instLogPairPrice(bytes32 sample) private pure returns (int256) {\\n        return sample.decodeInt22(_INST_LOG_PAIR_PRICE_OFFSET);\\n    }\\n\\n    /**\\n     * @dev Returns `sample`'s accumulator of the logarithm of the pair price.\\n     */\\n    function _accLogPairPrice(bytes32 sample) private pure returns (int256) {\\n        return sample.decodeInt53(_ACC_LOG_PAIR_PRICE_OFFSET);\\n    }\\n\\n    /**\\n     * @dev Returns `sample`'s instant value for the logarithm of the BPT price.\\n     */\\n    function _instLogBptPrice(bytes32 sample) private pure returns (int256) {\\n        return sample.decodeInt22(_INST_LOG_BPT_PRICE_OFFSET);\\n    }\\n\\n    /**\\n     * @dev Returns `sample`'s accumulator of the logarithm of the BPT price.\\n     */\\n    function _accLogBptPrice(bytes32 sample) private pure returns (int256) {\\n        return sample.decodeInt53(_ACC_LOG_BPT_PRICE_OFFSET);\\n    }\\n\\n    /**\\n     * @dev Returns `sample`'s instant value for the logarithm of the invariant.\\n     */\\n    function _instLogInvariant(bytes32 sample) private pure returns (int256) {\\n        return sample.decodeInt22(_INST_LOG_INVARIANT_OFFSET);\\n    }\\n\\n    /**\\n     * @dev Returns `sample`'s accumulator of the logarithm of the invariant.\\n     */\\n    function _accLogInvariant(bytes32 sample) private pure returns (int256) {\\n        return sample.decodeInt53(_ACC_LOG_INVARIANT_OFFSET);\\n    }\\n\\n    /**\\n     * @dev Returns a sample created by packing together its components.\\n     */\\n    function pack(\\n        int256 instLogPairPrice,\\n        int256 accLogPairPrice,\\n        int256 instLogBptPrice,\\n        int256 accLogBptPrice,\\n        int256 instLogInvariant,\\n        int256 accLogInvariant,\\n        uint256 _timestamp\\n    ) internal pure returns (bytes32) {\\n        return\\n            instLogPairPrice.encodeInt22(_INST_LOG_PAIR_PRICE_OFFSET) |\\n            accLogPairPrice.encodeInt53(_ACC_LOG_PAIR_PRICE_OFFSET) |\\n            instLogBptPrice.encodeInt22(_INST_LOG_BPT_PRICE_OFFSET) |\\n            accLogBptPrice.encodeInt53(_ACC_LOG_BPT_PRICE_OFFSET) |\\n            instLogInvariant.encodeInt22(_INST_LOG_INVARIANT_OFFSET) |\\n            accLogInvariant.encodeInt53(_ACC_LOG_INVARIANT_OFFSET) |\\n            _timestamp.encodeUint(_TIMESTAMP_OFFSET); // Using 31 bits\\n    }\\n\\n    /**\\n     * @dev Unpacks a sample into its components.\\n     */\\n    function unpack(bytes32 sample)\\n        internal\\n        pure\\n        returns (\\n            int256 logPairPrice,\\n            int256 accLogPairPrice,\\n            int256 logBptPrice,\\n            int256 accLogBptPrice,\\n            int256 logInvariant,\\n            int256 accLogInvariant,\\n            uint256 _timestamp\\n        )\\n    {\\n        logPairPrice = _instLogPairPrice(sample);\\n        accLogPairPrice = _accLogPairPrice(sample);\\n        logBptPrice = _instLogBptPrice(sample);\\n        accLogBptPrice = _accLogBptPrice(sample);\\n        logInvariant = _instLogInvariant(sample);\\n        accLogInvariant = _accLogInvariant(sample);\\n        _timestamp = timestamp(sample);\\n    }\\n}\\n\",\"keccak256\":\"0x6a8b600560ead7313dff43b15cf1016e129039ea0616094d4f5f1a03cb336ef3\",\"license\":\"GPL-3.0-or-later\"},\"lib/v1-space/src/oracle/interfaces/IPoolPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n// Forked from balancer-v2-monorepo/pkg/pool-utils/contracts/oracle/**\\n// at commit ef246cf213541c4120a78f811560f100e5a7e15a\\n\\npragma solidity ^0.7.0;\\n\\ninterface IPoolPriceOracle {\\n    /**\\n     * @dev Returns the raw data of the sample at `index`.\\n     */\\n    function getSample(uint256 index)\\n        external\\n        view\\n        returns (\\n            int256 logPairPrice,\\n            int256 accLogPairPrice,\\n            int256 logBptPrice,\\n            int256 accLogBptPrice,\\n            int256 logInvariant,\\n            int256 accLogInvariant,\\n            uint256 timestamp\\n        );\\n\\n    /**\\n     * @dev Returns the total number of samples.\\n     */\\n    function getTotalSamples() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x5711219fdbf293809b3d5f03e445fcb9d3dfd30761959f86e6a36f05ea06f3b1\",\"license\":\"GPL-3.0-or-later\"},\"lib/v1-space/src/oracle/interfaces/IPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n// Forked from balancer-v2-monorepo/pkg/pool-utils/contracts/oracle/**\\n// at commit ef246cf213541c4120a78f811560f100e5a7e15a\\n\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @dev Interface for querying historical data from a Pool that can be used as a Price Oracle.\\n *\\n * This lets third parties retrieve average prices of tokens held by a Pool over a given period of time, as well as the\\n * price of the Pool share token (BPT) and invariant. Since the invariant is a sensible measure of Pool liquidity, it\\n * can be used to compare two different price sources, and choose the most liquid one.\\n *\\n * Once the oracle is fully initialized, all queries are guaranteed to succeed as long as they require no data that\\n * is not older than the largest safe query window.\\n */\\ninterface IPriceOracle {\\n    // The three values that can be queried:\\n    //\\n    // - PAIR_PRICE: the price of the tokens in the Pool, expressed as the price of the second token in units of the\\n    //   first token. For example, if token A is worth $2, and token B is worth $4, the pair price will be 2.0.\\n    //   Note that the price is computed *including* the tokens decimals. This means that the pair price of a Pool with\\n    //   DAI and USDC will be close to 1.0, despite DAI having 18 decimals and USDC 6.\\n    //\\n    // - BPT_PRICE: the price of the Pool share token (BPT), in units of the first token.\\n    //   Note that the price is computed *including* the tokens decimals. This means that the BPT price of a Pool with\\n    //   USDC in which BPT is worth $5 will be 5.0, despite the BPT having 18 decimals and USDC 6.\\n    //\\n    // - INVARIANT: the value of the Pool's invariant, which serves as a measure of its liquidity.\\n    enum Variable { PAIR_PRICE, BPT_PRICE, INVARIANT }\\n\\n    /**\\n     * @dev Returns the time average weighted price corresponding to each of `queries`. Prices are represented as 18\\n     * decimal fixed point values.\\n     */\\n    function getTimeWeightedAverage(OracleAverageQuery[] memory queries)\\n        external\\n        view\\n        returns (uint256[] memory results);\\n\\n    /**\\n     * @dev Returns latest sample of `variable`. Prices are represented as 18 decimal fixed point values.\\n     */\\n    function getLatest(Variable variable) external view returns (uint256);\\n\\n    /**\\n     * @dev Information for a Time Weighted Average query.\\n     *\\n     * Each query computes the average over a window of duration `secs` seconds that ended `ago` seconds ago. For\\n     * example, the average over the past 30 minutes is computed by settings secs to 1800 and ago to 0. If secs is 1800\\n     * and ago is 1800 as well, the average between 60 and 30 minutes ago is computed instead.\\n     */\\n    struct OracleAverageQuery {\\n        Variable variable;\\n        uint256 secs;\\n        uint256 ago;\\n    }\\n\\n    /**\\n     * @dev Returns largest time window that can be safely queried, where 'safely' means the Oracle is guaranteed to be\\n     * able to produce a result and not revert.\\n     *\\n     * If a query has a non-zero `ago` value, then `secs + ago` (the oldest point in time) must be smaller than this\\n     * value for 'safe' queries.\\n     */\\n    function getLargestSafeQueryWindow() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the accumulators corresponding to each of `queries`.\\n     */\\n    function getPastAccumulators(OracleAccumulatorQuery[] memory queries)\\n        external\\n        view\\n        returns (int256[] memory results);\\n\\n    /**\\n     * @dev Information for an Accumulator query.\\n     *\\n     * Each query estimates the accumulator at a time `ago` seconds ago.\\n     */\\n    struct OracleAccumulatorQuery {\\n        Variable variable;\\n        uint256 ago;\\n    }\\n}\\n\",\"keccak256\":\"0x264db8343a04bb39d3cb26121563918587ecab71406c42d478f6a2a5ccfddd45\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60c060405234801561001057600080fd5b50604051615f30380380615f3083398101604081905261002f916100c1565b3360008181526020818152604091829020805460ff191660019081179091558251908152915183927fe95aec380cae16330d146d5499ef7db6f3657e477104a733e771bc09e500d98692908290030190a250606095861b6001600160601b03199081166080529490951b90931660a0526002919091556003556004556005805460ff1916911515919091179055610146565b60008060008060008060c087890312156100d9578182fd5b86516100e48161012e565b60208801519096506100f58161012e565b8095505060408701519350606087015192506080870151915060a08701518015158114610120578182fd5b809150509295509295509295565b6001600160a01b038116811461014357600080fd5b50565b60805160601c60a05160601c615db76101796000398061022352806104ed52508061020052806105675250615db76000f3fe60806040523480156200001157600080fd5b5060043610620000dc5760003560e01c8063756a24e4116200008d578063bdd8a3661162000063578063bdd8a36614620001aa578063e86d60bf14620001b4578063fbfa77cf14620001be57620000dc565b8063756a24e414620001635780638f38a555146200017c57806396d64879146200019357620000dc565b80631852288b11620000c35780631852288b1462000129578063378efa3714620001405780636970a924146200014a57620000dc565b80630ecaea7314620000e15780631393916a1462000110575b600080fd5b620000f8620000f236600462000694565b620001c8565b60405162000107919062000703565b60405180910390f35b62000127620001213660046200065b565b62000371565b005b620001276200013a366004620006c2565b62000434565b620000f8620004eb565b620001546200050f565b60405162000107919062000785565b6200016d62000515565b60405162000107919062000730565b620000f86200018d36600462000694565b6200051e565b6200016d620001a436600462000616565b62000544565b6200015462000559565b620001546200055f565b620000f862000565565b6001600160a01b0382811660009081526001602090815260408083208584529091528120549091620001fe911615606862000589565b7f000000000000000000000000000000000000000000000000000000000000000083837f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d10eb4b987876040518363ffffffff1660e01b81526004016200027192919062000717565b602060405180830381600087803b1580156200028c57600080fd5b505af1158015620002a1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002c791906200063c565b60025460035460045460055460405160ff90911690620002e790620005f2565b620002fa9897969594939291906200073b565b604051809103906000f08015801562000317573d6000803e3d6000fd5b506001600160a01b0393841660009081526001602090815260408083209583529490529290922080547fffffffffffffffffffffffff00000000000000000000000000000000000000001693831693909317909255919050565b3360009081526020819052604090205460ff16620003d6576040805162461bcd60e51b815260206004820152600960248201527f554e545255535445440000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6001600160a01b03821660008181526020818152604091829020805460ff1916851515908117909155825190815291517fe95aec380cae16330d146d5499ef7db6f3657e477104a733e771bc09e500d9869281900390910190a25050565b3360009081526020819052604090205460ff1662000499576040805162461bcd60e51b815260206004820152600960248201527f554e545255535445440000000000000000000000000000000000000000000000604482015290519081900360640190fd5b620004b1670de0b6b3a7640000841115606562000589565b620004c9670de0b6b3a7640000831015606662000589565b6002939093556003919091556004556005805460ff1916911515919091179055565b7f000000000000000000000000000000000000000000000000000000000000000081565b60045481565b60055460ff1681565b60016020908152600092835260408084209091529082529020546001600160a01b031681565b60006020819052908152604090205460ff1681565b60035481565b60025481565b7f000000000000000000000000000000000000000000000000000000000000000081565b816200059a576200059a816200059e565b5050565b62461bcd60e51b600090815260206004526007602452673f534e5323000030600a808404818106603090810160081b95839006959095019082900491820690940160101b939093010160c81b604452606490fd5b6155da80620007a883390190565b803580151581146200061157600080fd5b919050565b60006020828403121562000628578081fd5b813562000635816200078e565b9392505050565b6000602082840312156200064e578081fd5b815162000635816200078e565b600080604083850312156200066e578081fd5b82356200067b816200078e565b91506200068b6020840162000600565b90509250929050565b60008060408385031215620006a7578182fd5b8235620006b4816200078e565b946020939093013593505050565b60008060008060808587031215620006d8578182fd5b843593506020850135925060408501359150620006f86060860162000600565b905092959194509250565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b6001600160a01b03988916815296881660208801526040870195909552929095166060850152608084015260a083019390935260c082019290925290151560e08201526101000190565b90815260200190565b6001600160a01b0381168114620007a457600080fd5b5056fe6102a06040527f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c960e0523480156200003657600080fd5b50604051620055da380380620055da8339810160408190526200005991620007c2565b866001600160a01b03166306fdde036040518163ffffffff1660e01b815260040160006040518083038186803b1580156200009357600080fd5b505afa158015620000a8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620000d2919081019062000856565b876001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b1580156200010c57600080fd5b505afa15801562000121573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200014b919081019062000856565b8180604051806040016040528060018152602001603160f81b8152508484816003908051906020019062000181929190620006d7565b50805162000197906004906020840190620006d7565b50506005805460ff19166012179055508151602092830120608052805191012060a05250507f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60c052506040516309b2760f60e01b81526000906001600160a01b038a16906309b2760f906200021390600290600401620009d2565b602060405180830381600087803b1580156200022e57600080fd5b505af115801562000243573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002699190620007a9565b90506000886001600160a01b031663d4b839926040518163ffffffff1660e01b815260040160206040518083038186803b158015620002a757600080fd5b505afa158015620002bc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002e2919062000783565b6040805160028082526060808301845293945090916020830190803683370190505090506000826001600160a01b0316896001600160a01b0316106200032a5760016200032d565b60005b60ff169050888282815181106200034057fe5b60200260200101906001600160a01b031690816001600160a01b031681525050828282600103815181106200037157fe5b6001600160a01b03928316602091820292909201015260408051600280825260608201909252918e16916366a9c7d29187918691816020016020820280368337019050506040518463ffffffff1660e01b8152600401620003d59392919062000938565b600060405180830381600087803b158015620003f057600080fd5b505af115801562000405573d6000803e3d6000fd5b5050506001600160601b031960608e901b1661026052506101c0849052815182906000906200043057fe5b60200260200101516001600160a01b03166101e0816001600160a01b031660601b81525050816001815181106200046357fe5b60200260200101516001600160a01b0316610200816001600160a01b031660601b815250508b6001600160a01b031663d2946c2b6040518163ffffffff1660e01b815260040160206040518083038186803b158015620004c257600080fd5b505afa158015620004d7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620004fd919062000783565b6001600160a01b0316610280816001600160a01b031660601b81525050620005a960128a6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156200055a57600080fd5b505afa1580156200056f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000595919062000915565b60ff166200065760201b62001ccc1760201c565b600a0a6102208181525050620005f46012846001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156200055a57600080fd5b600a0a61024052610180969096525050506101a091909152610160929092526101405260609390931b6001600160601b031916610100525061012052600b805460ff60301b19166601000000000000921515929092029190911790555062000a00565b6000620006698383111560016200066f565b50900390565b816200068057620006808162000684565b5050565b62461bcd60e51b6000908152602060045260076024526642414c23000030600a808404818106603090810160081b95839006959095019082900491820690940160101b939093010160c81b604452606490fd5b828054600181600116156101000203166002900490600052602060002090601f0160209004810192826200070f57600085556200075a565b82601f106200072a57805160ff19168380011785556200075a565b828001600101855582156200075a579182015b828111156200075a5782518255916020019190600101906200073d565b50620007689291506200076c565b5090565b5b808211156200076857600081556001016200076d565b60006020828403121562000795578081fd5b8151620007a281620009e7565b9392505050565b600060208284031215620007bb578081fd5b5051919050565b600080600080600080600080610100898b031215620007df578384fd5b8851620007ec81620009e7565b60208a0151909850620007ff81620009e7565b60408a015160608b015191985096506200081981620009e7565b809550506080890151935060a0890151925060c0890151915060e0890151801515811462000845578182fd5b809150509295985092959890939650565b6000602080838503121562000869578182fd5b82516001600160401b038082111562000880578384fd5b818501915085601f83011262000894578384fd5b815181811115620008a157fe5b604051601f8201601f1916810185018381118282101715620008bf57fe5b6040528181528382018501881015620008d6578586fd5b8592505b81831015620008f95783830185015181840186015291840191620008da565b818311156200090a57858583830101525b979650505050505050565b60006020828403121562000927578081fd5b815160ff81168114620007a2578182fd5b60006060820185835260206060818501528186518084526080860191508288019350845b81811015620009835784516001600160a01b0316835293830193918301916001016200095c565b505084810360408601528551808252908201925081860190845b81811015620009c45782516001600160a01b0316855293830193918301916001016200099d565b509298975050505050505050565b6020810160038310620009e157fe5b91905290565b6001600160a01b0381168114620009fd57600080fd5b50565b60805160a05160c05160e0516101005160601c610120516101405161016051610180516101a0516101c0516101e05160601c6102005160601c61022051610240516102605160601c6102805160601c6149d362000c0760003980610c455280611a92525080610e2b528061133352508061291152508061293852505080610eb35250806108655280611362525080610a675280612a2d5250806116925280612a0752508061145f5280611b905280612454528061287152806129d05250806109f55280610b425280610bcd5280610c015280610ef05280610f1952806112b0528061149d52806114f1528061194252806119a25280611a275280611a5b528061219552806121d852806122135280612254528061230652806124b852806124f25280612653528061268f52806126d152806127105280612756528061278c52806127bf5280612bfb5280612c3e5280612c795280612cc15280612cf55280612d7e5280612dd65280612e215280612e555280612ee15280612f1a5280612f655280612fb052508061073c52806108c6528061090d52806113fa528061143152806118445280611bb65280611c8a52806123ef5280612426528061280c5280612843528061296e52806129a552508061053a528061093a5280610f9a52806118a65280611bef5250806116e3525080611eb8525080611efa525080611ed952506149d36000f3fe608060405234801561001057600080fd5b50600436106102925760003560e01c806370a0823111610160578063b10be739116100d8578063dd62ed3e1161008c578063e86d60bf11610071578063e86d60bf14610515578063f3f586e51461051d578063ffd088eb1461053057610292565b8063dd62ed3e146104fa578063e6a69ab81461050d57610292565b8063bdd8a366116100bd578063bdd8a366146104cc578063d505accf146104d4578063d5c096c4146104e757610292565b8063b10be739146104b1578063b48b5b40146104c457610292565b806395d89b411161012f578063a457c2d711610114578063a457c2d714610478578063a503e6281461048b578063a9059cbb1461049e57610292565b806395d89b411461045d5780639d2c110c1461046557610292565b806370a082311461040e57806374f3b009146104215780637ecebe00146104425780638d928af81461045557610292565b80633331bc361161020e5780635863056d116101c25780636970a924116101a75780636970a924146103de5780636b843239146103e65780636f4830311461040657610292565b80635863056d146103a257806360d1507c146103b857610292565b806338fff2d0116101f357806338fff2d014610374578063395093511461037c578063580702231461038f57610292565b80633331bc36146103575780633644e5151461036c57610292565b806318160ddd11610265578063204f83f91161024a578063204f83f91461032757806323b872dd1461032f578063313ce5671461034257610292565b806318160ddd146102ff5780631dccd8301461030757610292565b806303eadcfc1461029757806306fdde03146102b55780630845d030146102ca578063095ea7b3146102df575b600080fd5b61029f610538565b6040516102ac9190614754565b60405180910390f35b6102bd61055c565b6040516102ac91906148d4565b6102d26105f2565b6040516102ac9190614831565b6102f26102ed3660046141c7565b6105f9565b6040516102ac9190614826565b6102d2610610565b61031a61031536600461438d565b610616565b6040516102ac91906147ee565b6102d261073a565b6102f261033d366004614112565b61075e565b61034a6107d4565b6040516102ac9190614935565b61036a6103653660046146cb565b6107dd565b005b6102d2610854565b6102d2610863565b6102f261038a3660046141c7565b610887565b6102d261039d3660046146b3565b6108c2565b6103aa6109f3565b6040516102ac929190614927565b6103cb6103c63660046146b3565b610a1d565b6040516102ac979695949392919061483a565b6102d2610a65565b6103f96103f43660046142be565b610a89565b6040516102ac9190614768565b6102d2610b40565b6102d261041c3660046140be565b610b64565b61043461042f36600461448d565b610b7f565b6040516102ac929190614801565b6102d26104503660046140be565b610e0e565b61029f610e29565b6102bd610e4d565b6102d26104733660046145bc565b610eae565b6102f26104863660046141c7565b611169565b6102d26104993660046146b3565b6111a7565b6102f26104ac3660046141c7565b6115e9565b6102d26104bf36600461458a565b6115f6565b6102d261168b565b6102d2611690565b61036a6104e2366004614152565b6116b4565b6104346104f536600461448d565b611824565b6102d26105083660046140da565b611b5b565b6102d2611b86565b6102d2611b8e565b6102d261052b3660046146b3565b611bb2565b6102d2611cc6565b7f000000000000000000000000000000000000000000000000000000000000000081565b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156105e85780601f106105bd576101008083540402835291602001916105e8565b820191906000526020600020905b8154815290600101906020018083116105cb57829003601f168201915b5050505050905090565b620f424081565b6000610606338484611ce2565b5060015b92915050565b60025490565b6060815167ffffffffffffffff8111801561063057600080fd5b5060405190808252806020026020018201604052801561065a578160200160208202803683370190505b5090506000610667611d44565b905060005b83518110156107335773066BC4F458507E70235ec54cEC3EB0c3eFC79bE06379eaef82600786848151811061069d57fe5b6020026020010151856040518463ffffffff1660e01b81526004016106c4939291906148b2565b60206040518083038186803b1580156106dc57600080fd5b505af41580156106f0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071491906145a4565b83828151811061072057fe5b602090810291909101015260010161066c565b5050919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008061076b8533611b5b565b905061078f336001600160a01b03871614806107875750838210155b61019e611d4e565b61079a858585611d60565b336001600160a01b038616148015906107b557506000198114155b156107c7576107c78533858403611ce2565b60019150505b9392505050565b60055460ff1690565b6107f781831080156107f0575060148211155b6064611d4e565b600061080c6001600080600080600080611e48565b9050825b8281101561084e5760008181526007602052604090205461083090611ea8565b6108465760008181526007602052604090208290555b600101610810565b50505050565b600061085e611eb4565b905090565b7f000000000000000000000000000000000000000000000000000000000000000090565b3360008181526001602090815260408083206001600160a01b038716845290915281205490916106069185906108bd9086611f72565b611ce2565b60007f000000000000000000000000000000000000000000000000000000000000000042106108f3575060006109ee565b6109eb670de0b6b3a76400006109e56109326301e13380427f000000000000000000000000000000000000000000000000000000000000000003611f84565b6109df6109d07f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663226778496040518163ffffffff1660e01b815260040160206040518083038186803b15801561099157600080fd5b505afa1580156109a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c991906145a4565b8890611fd5565b670de0b6b3a764000090611f84565b9061200b565b90611ccc565b90505b919050565b7f000000000000000000000000000000000000000000000000000000000000000090600182900390565b6000806000806000806000610a376014891061013b611d4e565b6000610a428961205a565b9050610a4d8161206c565b959f949e50929c50909a509850965090945092505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6060815167ffffffffffffffff81118015610aa357600080fd5b50604051908082528060200260200182016040528015610acd578160200160208202803683370190505b5090506000610ada611d44565b9050610ae4613f87565b60005b8451811015610b3857848181518110610afc57fe5b60200260200101519150610b1982600001518484602001516120cf565b848281518110610b2557fe5b6020908102919091010152600101610ae7565b505050919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6001600160a01b031660009081526020819052604090205490565b60608088610ba9610b8e610e29565b6001600160a01b0316336001600160a01b0316146064612181565b610bbd610bb4610863565b82146067612181565b610bc68761218f565b610c3a86887f000000000000000000000000000000000000000000000000000000000000000081518110610bf657fe5b6020026020010151897f000000000000000000000000000000000000000000000000000000000000000060010381518110610c2d57fe5b602002602001015161228f565b8415610c7357610c737f0000000000000000000000000000000000000000000000000000000000000000610c6e89886123e9565b6125b2565b600084806020019051810190610c8991906145a4565b90506000610c9f610c98610610565b83906125bc565b604080516002808252606080830184529394509091602083019080368337019050509050610cea828b600081518110610cd457fe5b602002602001015161260a90919063ffffffff16565b81600081518110610cf757fe5b602002602001018181525050610d14828b600181518110610cd457fe5b81600181518110610d2157fe5b602002602001018181525050610d3681612646565b610d408c8461273c565b610d7b81600081518110610d5057fe5b60200260200101518b600081518110610d6557fe5b6020026020010151611ccc90919063ffffffff16565b8a600081518110610d8857fe5b602002602001018181525050610db981600181518110610da457fe5b60200260200101518b600181518110610d6557fe5b8a600181518110610dc657fe5b602002602001018181525050610ddb8a612746565b604080516002808252606082018352839260208301908036833701905050955095505050505b5097509795505050505050565b6001600160a01b031660009081526006602052604090205490565b7f000000000000000000000000000000000000000000000000000000000000000090565b60048054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156105e85780601f106105bd576101008083540402835291602001916105e8565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031685602001516001600160a01b031614610f17577f0000000000000000000000000000000000000000000000000000000000000000600114610f3a565b7f0000000000000000000000000000000000000000000000000000000000000000155b90506000610f4782612908565b90506000610f558315612908565b9050610f61868361295c565b9550610f6d858261295c565b9450610f968760a0015184610f825786610f84565b875b85610f8f5788610f91565b875b61228f565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f51e181a6040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610ff357600080fd5b505af1158015611007573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061102b91906145a4565b905083156110635761104561103e610610565b8890611f72565b965061105c60085487611fd590919063ffffffff16565b9550611088565b600854611071908890611fd5565b965061108561107e610610565b8790611f72565b95505b60008851600181111561109757fe5b1415611109576110ab88606001518461295c565b6060890152836110ca5760608801516110c49082611fd5565b60608901525b60006110de8560018b606001518b8b612968565b905084156110f3576110f08183611f84565b90505b6110fd8184612b49565b955050505050506107cd565b61111788606001518361295c565b606089015283156111375760608801516111319082611fd5565b60608901525b600061114b8560008b606001518b8b612968565b90508461115f5761115c8183611f84565b90505b6110fd8185612b5c565b6000806111763385611b5b565b90508083106111905761118b33856000611ce2565b61119d565b61119d3385858403611ce2565b5060019392505050565b60408051600180825281830190925260009160609190816020015b6111ca613f9e565b8152602001906001900390816111c25790505060408051606081019091529091508060008152602001848152602001610e108152508160008151811061120c57fe5b60209081029190910101526040517f1dccd8300000000000000000000000000000000000000000000000000000000081526060903090631dccd830906112569085906004016147ac565b60006040518083038186803b15801561126e57600080fd5b505afa158015611282573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526112aa919081019061445a565b905060007f000000000000000000000000000000000000000000000000000000000000000060011461130a57611305826000815181106112e657fe5b6020026020010151670de0b6b3a7640000611f8490919063ffffffff16565b611320565b8160008151811061131757fe5b60200260200101515b9050600061132d826108c2565b905060607f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f94d46687f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b815260040161139d9190614831565b60006040518083038186803b1580156113b557600080fd5b505afa1580156113c9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526113f191908101906141f2565b509150506000427f000000000000000000000000000000000000000000000000000000000000000011611425576000611453565b670de0b6b3a7640000427f000000000000000000000000000000000000000000000000000000000000000003025b905060006114896114847f000000000000000000000000000000000000000000000000000000000000000084611fd5565b612b68565b905060006115366114df836109df600854887f0000000000000000000000000000000000000000000000000000000000000000600103815181106114c957fe5b6020026020010151611fd590919063ffffffff16565b611530846109df6114ee610610565b897f00000000000000000000000000000000000000000000000000000000000000008151811061151a57fe5b6020026020010151611f7290919063ffffffff16565b90611f72565b9050600061157461154f670de0b6b3a764000085611f84565b6109df61156d670de0b6b3a76400006115306109d08985848f611f72565b8590611f84565b905060006115a0611599611590670de0b6b3a76400008a611f72565b60085490611fd5565b8390611f84565b90506115d96115ad610610565b6115d36115cc8b6115c66115bf610610565b8890611ccc565b90611fd5565b8490611f72565b90611f84565b9c9b505050505050505050505050565b6000610606338484611d60565b600073066BC4F458507E70235ec54cEC3EB0c3eFC79bE0630397bee060078461161d611d44565b6040518463ffffffff1660e01b815260040161163b9392919061486a565b60206040518083038186803b15801561165357600080fd5b505af4158015611667573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109eb91906145a4565b601490565b7f000000000000000000000000000000000000000000000000000000000000000081565b6116c28442111560d1611d4e565b6001600160a01b0380881660008181526006602090815260408083205481517f00000000000000000000000000000000000000000000000000000000000000008185015280830195909552948b166060850152608084018a905260a0840185905260c08085018a90528151808603909101815260e0909401905282519201919091209061174e82612b8e565b9050600060018288888860405160008152602001604052604051808581526020018460ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa1580156117ac573d6000803e3d6000fd5b5050604051601f19015191506117ee90506001600160a01b038216158015906117e657508b6001600160a01b0316826001600160a01b0316145b6101f8611d4e565b6001600160a01b038b1660009081526006602052604090206001850190556118178b8b8b611ce2565b5050505050505050505050565b60608088611833610b8e610e29565b61183e610bb4610863565b61186c427f000000000000000000000000000000000000000000000000000000000000000010156069612181565b606084806020019051810190611882919061445a565b905061188d8861218f565b6118968161218f565b61189e610610565b611a205760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f51e181a6040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156118ff57600080fd5b505af1158015611913573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061193791906145a4565b9050600061196e82847f0000000000000000000000000000000000000000000000000000000000000000600103815181106114c957fe5b905061197e6000620f42406125b2565b61198f8b610c6e83620f4240611ccc565b61199883612bf5565b81600881905550827f0000000000000000000000000000000000000000000000000000000000000000815181106119cb57fe5b6020026020010160008152508299506119e38a612746565b82600260005b50604051908082528060200260200182016040528015611a13578160200160208202803683370190505b5095509550505050610e01565b611a8787897f000000000000000000000000000000000000000000000000000000000000000081518110611a5057fe5b60200260200101518a7f000000000000000000000000000000000000000000000000000000000000000060010381518110610c2d57fe5b8515611abb57611abb7f0000000000000000000000000000000000000000000000000000000000000000610c6e8a896123e9565b60006060611ac9838b612cb7565b91509150611ad681612bf5565b611ae08b836125b2565b80600081518110611aed57fe5b60200260200101518a600081518110611b0257fe5b60200260200101818151019150818152505080600181518110611b2157fe5b60200260200101518a600181518110611b3657fe5b602002602001018181510191508181525050611b518a612746565b80600260006119e9565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6301e1338081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60007f00000000000000000000000000000000000000000000000000000000000000004210611bea5750670de0b6b3a76400006109ee565b6109eb7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663226778496040518163ffffffff1660e01b815260040160206040518083038186803b158015611c4657600080fd5b505afa158015611c5a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c7e91906145a4565b6115d36109d0611cb4427f0000000000000000000000000000000000000000000000000000000000000000036301e13380611f84565b6109df87670de0b6b3a7640000611f72565b615da890565b6000611cdc838311156001611d4e565b50900390565b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b600b5461ffff1690565b81611d5c57611d5c81612ffe565b5050565b611d776001600160a01b0384161515610198611d4e565b611d8e6001600160a01b0383161515610199611d4e565b611d998383836123e4565b6001600160a01b038316600090815260208190526040902054611dbf90826101a0613051565b6001600160a01b038085166000908152602081905260408082209390935590841681522054611dee9082611f72565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b6000611e548282613067565b611e5f84601f61306b565b611e6a86605461307c565b611e7588606a61306b565b611e808a609f61307c565b611e8b8c60b561306b565b611e968e60ea61307c565b17171717171798975050505050505050565b60006109eb8282613089565b60007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611f21613093565b3060405160200180868152602001858152602001848152602001838152602001826001600160a01b031681526020019550505050505060405160208183030381529060405280519060200120905090565b60008282016107cd8482101583611d4e565b6000611f938215156004611d4e565b82611fa05750600061060a565b670de0b6b3a764000083810290611fc390858381611fba57fe5b04146005611d4e565b828181611fcc57fe5b0491505061060a565b6000828202611ff9841580611ff2575083858381611fef57fe5b04145b6003611d4e565b670de0b6b3a764000090049392505050565b6000806120188484613097565b9050600061203261202b8361271061260a565b6001611f72565b9050808210156120475760009250505061060a565b6120518282611ccc565b9250505061060a565b60009081526007602052604090205490565b6000806000806000806000612080886131be565b965061208b886131cb565b9550612096886131d8565b94506120a1886131e5565b93506120ac886131f2565b92506120b7886131ff565b91506120c288611ea8565b9050919395979092949650565b6040517f34171a8500000000000000000000000000000000000000000000000000000000815260009073066BC4F458507E70235ec54cEC3EB0c3eFC79bE0906334171a85906121299060079088908890889060040161488c565b60206040518083038186803b15801561214157600080fd5b505af4158015612155573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061217991906145a4565b949350505050565b81611d5c57611d5c8161320c565b6121d5817f0000000000000000000000000000000000000000000000000000000000000000815181106121be57fe5b60200260200101516121d06001612908565b613260565b817f00000000000000000000000000000000000000000000000000000000000000008151811061220157fe5b602002602001018181525050612251817f00000000000000000000000000000000000000000000000000000000000000006001038151811061223f57fe5b60200260200101516121d06000612908565b817f00000000000000000000000000000000000000000000000000000000000000006001038151811061228057fe5b60200260200101818152505050565b600b546601000000000000900460ff1680156122aa57508243115b80156122bd5750662386f26fc100008110155b156123e45760006122f3670de0b6b3a76400006109e56122e860085486611fd590919063ffffffff16565b6115d361103e610610565b9050600061230082611bb2565b905060007f0000000000000000000000000000000000000000000000000000000000000000156123305781612342565b612342670de0b6b3a764000083611f84565b600b549091506000906123a79063ffffffff620100008204169061ffff166123698561327a565b620f424088106123815761237c8861327a565b61238d565b61238d620f424061327a565b600b546701000000000000009004601890810b900b6132ba565b600b5490915061ffff1681146123df57600b805465ffffffff00001916620100004263ffffffff16021761ffff191661ffff83161790555b505050505b505050565b600080427f00000000000000000000000000000000000000000000000000000000000000001161241a576000612448565b670de0b6b3a7640000427f000000000000000000000000000000000000000000000000000000000000000003025b905060006124796114847f000000000000000000000000000000000000000000000000000000000000000084611fd5565b905060006124a261249583600a5461200b90919063ffffffff16565b600954611530908561200b565b905060006124e1836109df6124b5610610565b8a7f00000000000000000000000000000000000000000000000000000000000000008151811061151a57fe5b9050600061251e846109df6008548b7f0000000000000000000000000000000000000000000000000000000000000000600103815181106114c957fe5b9050600061252c8383611f72565b9050838111612544576000965050505050505061060a565b600061256561255b670de0b6b3a764000088611f84565b6109df8488611f84565b90506000612589826115d361258282670de0b6b3a7640000611ccc565b8d90611fd5565b90506125a361259782612b68565b6115d3836115c6610610565b9b9a5050505050505050505050565b611d5c8282613312565b60006125cb8215156004611d4e565b826125d85750600061060a565b670de0b6b3a7640000838102906125f290858381611fba57fe5b8260018203816125fe57fe5b0460010191505061060a565b6000828202612624841580611ff2575083858381611fef57fe5b8061263357600091505061060a565b670de0b6b3a764000060001982016125fe565b6126506001612908565b817f00000000000000000000000000000000000000000000000000000000000000008151811061267c57fe5b60200260200101518161268b57fe5b04817f0000000000000000000000000000000000000000000000000000000000000000815181106126b857fe5b6020026020010181815250506126ce6000612908565b817f0000000000000000000000000000000000000000000000000000000000000000600103815181106126fd57fe5b60200260200101518161270c57fe5b04817f00000000000000000000000000000000000000000000000000000000000000006001038151811061228057fe5b611d5c82826133a7565b600061277f612753610610565b837f00000000000000000000000000000000000000000000000000000000000000008151811061151a57fe5b905060006127b8600854847f0000000000000000000000000000000000000000000000000000000000000000600103815181106114c957fe5b90506000807f00000000000000000000000000000000000000000000000000000000000000006127ec5750829050816127f2565b50819050825b600b546601000000000000900460ff16156128fa576000427f000000000000000000000000000000000000000000000000000000000000000011612837576000612865565b670de0b6b3a7640000427f000000000000000000000000000000000000000000000000000000000000000003025b905060006128966114847f000000000000000000000000000000000000000000000000000000000000000084611fd5565b90506128b76128b26128a8858461200b565b611530878561200b565b61327a565b600b805460189290920b78ffffffffffffffffffffffffffffffffffffffffffffffffff166701000000000000000266ffffffffffffff90921691909117905550505b600991909155600a55505050565b600081612935577f00000000000000000000000000000000000000000000000000000000000000006109eb565b507f0000000000000000000000000000000000000000000000000000000000000000919050565b60006107cd8383613260565b600080427f0000000000000000000000000000000000000000000000000000000000000000116129995760006129c7565b670de0b6b3a7640000427f000000000000000000000000000000000000000000000000000000000000000003025b905060006129f57f000000000000000000000000000000000000000000000000000000000000000083611fd5565b90506000612a53611484838b612a2b577f0000000000000000000000000000000000000000000000000000000000000000612a4d565b7f00000000000000000000000000000000000000000000000000000000000000005b9061260a565b90506000612a61878361345e565b90506000612a6f878461345e565b905060008a612a8757612a82888b611ccc565b612a8b565b8989015b90506000612a99828661200b565b90506000612ac6612ab2670de0b6b3a764000088611f84565b612ac0846109e58989611f72565b9061345e565b9050612ade8d1580612ad75750818b115b606a612181565b8c15612b1a57612b018e612af55781841115612afa565b818410155b606b612181565b612b0b8a82611ccc565b98505050505050505050612b40565b612b368e612b2b5783821115612afa565b83821015606b612181565b612b0b818c611ccc565b95945050505050565b6000818381612b5457fe5b049392505050565b60006107cd838361348a565b6000670de0b6b3a76400008210612b805760006109eb565b50670de0b6b3a76400000390565b6000612b98611eb4565b8260405160200180807f190100000000000000000000000000000000000000000000000000000000000081525060020183815260200182815260200192505050604051602081830303815290604052805190602001209050919050565b612c3b817f000000000000000000000000000000000000000000000000000000000000000081518110612c2457fe5b6020026020010151612c366001612908565b61348a565b817f000000000000000000000000000000000000000000000000000000000000000081518110612c6757fe5b602002602001018181525050612251817f000000000000000000000000000000000000000000000000000000000000000060010381518110612ca557fe5b6020026020010151612c366000612908565b60006060600080847f000000000000000000000000000000000000000000000000000000000000000081518110612cea57fe5b6020026020010151857f000000000000000000000000000000000000000000000000000000000000000060010381518110612d2157fe5b6020026020010151915091506060600267ffffffffffffffff81118015612d4757600080fd5b50604051908082528060200260200182016040528015612d71578160200160208202803683370190505b50905082612e1b576000877f000000000000000000000000000000000000000000000000000000000000000060010381518110612daa57fe5b60200260200101519050600083612dc8612dc2610610565b84613260565b81612dcf57fe5b04905081837f000000000000000000000000000000000000000000000000000000000000000060010381518110612e0257fe5b60209081029190910101529550909350612ff792505050565b600080887f000000000000000000000000000000000000000000000000000000000000000081518110612e4a57fe5b6020026020010151897f000000000000000000000000000000000000000000000000000000000000000060010381518110612e8157fe5b602002602001015191509150600084612e9b612dc2610610565b81612ea257fe5b049050600086612eb9612eb3610610565b86613260565b81612ec057fe5b04905080821015612f615785612ed68885613260565b81612edd57fe5b04857f000000000000000000000000000000000000000000000000000000000000000081518110612f0a57fe5b60200260200101818152505082857f000000000000000000000000000000000000000000000000000000000000000060010381518110612f4657fe5b6020908102919091010152509650919450612ff79350505050565b83857f000000000000000000000000000000000000000000000000000000000000000081518110612f8e57fe5b60200260200101818152505086612fa58786613260565b81612fac57fe5b04857f000000000000000000000000000000000000000000000000000000000000000060010381518110612fdc57fe5b60209081029190910101529750929550612ff7945050505050565b9250929050565b62461bcd60e51b6000908152602060045260076024526642414c23000030600a808404818106603090810160081b95839006959095019082900491820690940160101b939093010160c81b604452606490fd5b60006130608484111583611d4e565b5050900390565b1b90565b661fffffffffffff91909116901b90565b623fffff91909116901b90565b1c637fffffff1690565b4690565b6000816130ad5750670de0b6b3a764000061060a565b826130ba5750600061060a565b6130e77f800000000000000000000000000000000000000000000000000000000000000084106006611d4e565b8261310d770bce5086492111aea88f4bb1ca6bcf584181ea8059f7653284106007611d4e565b826000670c7d713b49da00008313801561312e5750670f43fc2c04ee000083125b1561316557600061313e846134bd565b9050670de0b6b3a764000080820784020583670de0b6b3a764000083050201915050613173565b8161316f846135f4565b0290505b670de0b6b3a764000090056131ab680238fd42c5cf03ffff1982128015906131a4575068070c1cc73b00c800008213155b6008611d4e565b6131b481613994565b9695505050505050565b60006109eb8260ea613e4e565b60006109eb8260b5613e75565b60006109eb82609f613e4e565b60006109eb82606a613e75565b60006109eb826054613e4e565b60006109eb82601f613e75565b62461bcd60e51b600090815260206004526007602452673f534e5323000030600a808404818106603090810160081b95839006959095019082900491820690940160101b939093010160c81b604452606490fd5b60008282026107cd841580611ff2575083858381611fef57fe5b60008061328683613ea8565b9050600080821361329f57652d79883d200082036132a9565b652d79883d200082015b655af3107a40009005949350505050565b6000806132d6858585426132cd8b61205a565b93929190613f04565b90506104b0428890031015806132ec57866132f5565b6132f587613f64565b600081815260076020526040902092909255509695505050505050565b61331e600083836123e4565b60025461332b9082611f72565b6002556001600160a01b0382166000908152602081905260409020546133519082611f72565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6133be6001600160a01b038316151561019b611d4e565b6133ca826000836123e4565b6001600160a01b0382166000908152602081905260409020546133f090826101a1613051565b6001600160a01b0383166000908152602081905260409020556002546134169082613f71565b6002556040805182815290516000916001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b60008061346b8484613097565b9050600061347e61202b8361271061260a565b9050612b408282611f72565b60006134998215156004611d4e565b826134a65750600061060a565b8160018403816134b257fe5b04600101905061060a565b670de0b6b3a7640000026000806ec097ce7bc90715b34b9f1000000000808401907fffffffffffffffffffffffffffffffffff3f68318436f8ea4cb460f0000000008501028161350957fe5b05905060006ec097ce7bc90715b34b9f100000000082800205905081806ec097ce7bc90715b34b9f100000000081840205915060038205016ec097ce7bc90715b34b9f100000000082840205915060058205016ec097ce7bc90715b34b9f100000000082840205915060078205016ec097ce7bc90715b34b9f100000000082840205915060098205016ec097ce7bc90715b34b9f1000000000828402059150600b8205016ec097ce7bc90715b34b9f1000000000828402059150600d8205016ec097ce7bc90715b34b9f1000000000828402059150600f826002919005919091010295945050505050565b6000670de0b6b3a764000082121561363157613627826ec097ce7bc90715b34b9f10000000008161362157fe5b056135f4565b60000390506109ee565b60007e1600ef3172e58d2e933ec884fde10064c63b5372d805e203c0000000000000831261368257770195e54c5dd42177f53a27172fa9ec630262827000000000830592506806f05b59d3b2000000015b73011798004d755d3c8bc8e03204cf44619e00000083126136ba576b1425982cf597cd205cef7380830592506803782dace9d9000000015b606492830292026e01855144814a7ff805980ff00840008312613702576e01855144814a7ff805980ff008400068056bc75e2d63100000840205925068ad78ebc5ac62000000015b6b02df0ab5a80a22c61ab5a700831261373d576b02df0ab5a80a22c61ab5a70068056bc75e2d6310000084020592506856bc75e2d631000000015b693f1fce3da636ea5cf850831261377457693f1fce3da636ea5cf85068056bc75e2d631000008402059250682b5e3af16b18800000015b690127fa27722cc06cc5e283126137ab57690127fa27722cc06cc5e268056bc75e2d6310000084020592506815af1d78b58c400000015b68280e60114edb805d0383126137e05768280e60114edb805d0368056bc75e2d631000008402059250680ad78ebc5ac6200000015b680ebc5fb41746121110831261380b57680ebc5fb4174612111068056bc75e2d631000009384020592015b6808f00f760a4b2db55d8312613840576808f00f760a4b2db55d68056bc75e2d6310000084020592506802b5e3af16b1880000015b6806f5f17757889379378312613875576806f5f177578893793768056bc75e2d63100000840205925068015af1d78b58c40000015b6806248f33704b28660383126138a9576806248f33704b28660368056bc75e2d63100000840205925067ad78ebc5ac620000015b6805c548670b9510e7ac83126138dd576805c548670b9510e7ac68056bc75e2d6310000084020592506756bc75e2d6310000015b600068056bc75e2d63100000840168056bc75e2d63100000808603028161390057fe5b059050600068056bc75e2d63100000828002059050818068056bc75e2d63100000818402059150600382050168056bc75e2d63100000828402059150600582050168056bc75e2d63100000828402059150600782050168056bc75e2d63100000828402059150600982050168056bc75e2d63100000828402059150600b820501600202606485820105979650505050505050565b60006139c3680238fd42c5cf03ffff1983121580156139bc575068070c1cc73b00c800008313155b6009611d4e565b60008212156139f7576139d882600003613994565b6ec097ce7bc90715b34b9f1000000000816139ef57fe5b0590506109ee565b60006806f05b59d3b20000008312613a4d57507ffffffffffffffffffffffffffffffffffffffffffffffff90fa4a62c4e00000090910190770195e54c5dd42177f53a27172fa9ec630262827000000000613a99565b6803782dace9d90000008312613a9557507ffffffffffffffffffffffffffffffffffffffffffffffffc87d2531627000000909101906b1425982cf597cd205cef7380613a99565b5060015b6064929092029168056bc75e2d6310000068ad78ebc5ac620000008412613aff577fffffffffffffffffffffffffffffffffffffffffffffff5287143a539e0000009093019268056bc75e2d631000006e01855144814a7ff805980ff008400082020590505b6856bc75e2d6310000008412613b51577fffffffffffffffffffffffffffffffffffffffffffffffa9438a1d29cf0000009093019268056bc75e2d631000006b02df0ab5a80a22c61ab5a70082020590505b682b5e3af16b188000008412613ba1577fffffffffffffffffffffffffffffffffffffffffffffffd4a1c50e94e78000009093019268056bc75e2d63100000693f1fce3da636ea5cf85082020590505b6815af1d78b58c4000008412613bf1577fffffffffffffffffffffffffffffffffffffffffffffffea50e2874a73c000009093019268056bc75e2d63100000690127fa27722cc06cc5e282020590505b680ad78ebc5ac62000008412613c40577ffffffffffffffffffffffffffffffffffffffffffffffff5287143a539e000009093019268056bc75e2d6310000068280e60114edb805d0382020590505b68056bc75e2d631000008412613c8f577ffffffffffffffffffffffffffffffffffffffffffffffffa9438a1d29cf000009093019268056bc75e2d63100000680ebc5fb4174612111082020590505b6802b5e3af16b18800008412613cde577ffffffffffffffffffffffffffffffffffffffffffffffffd4a1c50e94e7800009093019268056bc75e2d631000006808f00f760a4b2db55d82020590505b68015af1d78b58c400008412613d2d577ffffffffffffffffffffffffffffffffffffffffffffffffea50e2874a73c00009093019268056bc75e2d631000006806f5f177578893793782020590505b68056bc75e2d631000008481019085906002908280020505918201919050600368056bc75e2d631000008783020505918201919050600468056bc75e2d631000008783020505918201919050600568056bc75e2d631000008783020505918201919050600668056bc75e2d631000008783020505918201919050600768056bc75e2d631000008783020505918201919050600868056bc75e2d631000008783020505918201919050600968056bc75e2d631000008783020505918201919050600a68056bc75e2d631000008783020505918201919050600b68056bc75e2d631000008783020505918201919050600c68056bc75e2d631000008783020505918201919050606468056bc75e2d63100000848402058502059695505050505050565b600082821c623fffff16621fffff8113613e685780612179565b623fffff19179392505050565b600082821c661fffffffffffff16660fffffffffffff8113613e975780612179565b661fffffffffffff19179392505050565b6000613eb8600083136064611d4e565b670c7d713b49da000082138015613ed65750670f43fc2c04ee000082125b15613ef457670de0b6b3a7640000613eed836134bd565b816139ef57fe5b613efd826135f4565b90506109ee565b600080613f1087611ea8565b830390506000818702613f22896131cb565b0190506000828702613f338a6131e5565b0190506000838702613f448b6131ff565b019050613f5689848a858b868c611e48565b9a9950505050505050505050565b60006109eb826001613f7f565b60006107cd83836001613051565b601491010690565b604080518082019091526000808252602082015290565b6040805160608101909152806000815260200160008152602001600081525090565b80356109ee81614985565b600082601f830112613fdb578081fd5b8151613fee613fe982614967565b614943565b81815291506020808301908481018184028601820187101561400f57600080fd5b60005b8481101561402e57815184529282019290820190600101614012565b505050505092915050565b600082601f830112614049578081fd5b813567ffffffffffffffff81111561405d57fe5b614070601f8201601f1916602001614943565b915080825283602082850101111561408757600080fd5b8060208401602084013760009082016020015292915050565b8035600281106109ee57600080fd5b8035600381106109ee57600080fd5b6000602082840312156140cf578081fd5b81356107cd81614985565b600080604083850312156140ec578081fd5b82356140f781614985565b9150602083013561410781614985565b809150509250929050565b600080600060608486031215614126578081fd5b833561413181614985565b9250602084013561414181614985565b929592945050506040919091013590565b600080600080600080600060e0888a03121561416c578485fd5b873561417781614985565b9650602088013561418781614985565b95506040880135945060608801359350608088013560ff811681146141aa578384fd5b9699959850939692959460a0840135945060c09093013592915050565b600080604083850312156141d9578182fd5b82356141e481614985565b946020939093013593505050565b600080600060608486031215614206578081fd5b835167ffffffffffffffff8082111561421d578283fd5b818601915086601f830112614230578283fd5b815161423e613fe982614967565b80828252602080830192508086018b82838702890101111561425e578788fd5b8796505b8487101561428957805161427581614985565b845260019690960195928101928101614262565b5089015190975093505050808211156142a0578283fd5b506142ad86828701613fcb565b925050604084015190509250925092565b600060208083850312156142d0578182fd5b823567ffffffffffffffff808211156142e7578384fd5b818501915085601f8301126142fa578384fd5b8135614308613fe982614967565b818152848101908486016040808502870188018b1015614326578889fd5b8896505b8487101561437e5780828c031215614340578889fd5b8051818101818110888211171561435357fe5b825261435e836140af565b81528289013589820152845260019690960195928701929081019061432a565b50909998505050505050505050565b6000602080838503121561439f578182fd5b823567ffffffffffffffff808211156143b6578384fd5b818501915085601f8301126143c9578384fd5b81356143d7613fe982614967565b818152848101908486016060808502870188018b10156143f5578889fd5b8896505b8487101561437e5780828c03121561440f578889fd5b60408051828101818110898211171561442457fe5b825261442f846140af565b8152838a01358a820152818401359181019190915284526001969096019592870192908101906143f9565b60006020828403121561446b578081fd5b815167ffffffffffffffff811115614481578182fd5b61217984828501613fcb565b600080600080600080600060e0888a0312156144a7578081fd5b873596506020808901356144ba81614985565b965060408901356144ca81614985565b9550606089013567ffffffffffffffff808211156144e6578384fd5b818b0191508b601f8301126144f9578384fd5b8135614507613fe982614967565b8082825285820191508585018f878886028801011115614525578788fd5b8795505b83861015614547578035835260019590950194918601918601614529565b509850505060808b0135955060a08b0135945060c08b013592508083111561456d578384fd5b505061457b8a828b01614039565b91505092959891949750929550565b60006020828403121561459b578081fd5b6107cd826140af565b6000602082840312156145b5578081fd5b5051919050565b6000806000606084860312156145d0578081fd5b833567ffffffffffffffff808211156145e7578283fd5b81860191506101208083890312156145fd578384fd5b61460681614943565b9050614611836140a0565b815261461f60208401613fc0565b602082015261463060408401613fc0565b6040820152606083013560608201526080830135608082015260a083013560a082015261465f60c08401613fc0565b60c082015261467060e08401613fc0565b60e08201526101008084013583811115614688578586fd5b6146948a828701614039565b9183019190915250976020870135975060409096013595945050505050565b6000602082840312156146c4578081fd5b5035919050565b600080604083850312156146dd578182fd5b50508035926020909101359150565b6000815180845260208085019450808401835b8381101561471b578151875295820195908201906001016146ff565b509495945050505050565b6003811061473057fe5b9052565b61473f828251614726565b60208181015190830152604090810151910152565b6001600160a01b0391909116815260200190565b6020808252825182820181905260009190848201906040850190845b818110156147a057835183529284019291840191600101614784565b50909695505050505050565b6020808252825182820181905260009190848201906040850190845b818110156147a0576147db838551614734565b92840192606092909201916001016147c8565b6000602082526107cd60208301846146ec565b60006040825261481460408301856146ec565b8281036020840152612b4081856146ec565b901515815260200190565b90815260200190565b968752602087019590955260408601939093526060850191909152608084015260a083015260c082015260e00190565b8381526060810161487e6020830185614726565b826040830152949350505050565b848152608081016148a06020830186614726565b60408201939093526060015292915050565b83815260a081016148c66020830185614734565b826080830152949350505050565b6000602080835283518082850152825b81811015614900578581018301518582016040015282016148e4565b818111156149115783604083870101525b50601f01601f1916929092016040019392505050565b918252602082015260400190565b60ff91909116815260200190565b60405181810167ffffffffffffffff8111828210171561495f57fe5b604052919050565b600067ffffffffffffffff82111561497b57fe5b5060209081020190565b6001600160a01b038116811461499a57600080fd5b5056fea264697066735822122070eb1f054fc29928e710e889a830a2536ec2cb605a4f57304a834db3a5e4b03664736f6c63430007050033a26469706673582212201587ca391d55ef219969b303034a356bb22d9c6ccfc8d79f26b9a4f3f58ab92464736f6c63430007050033",
  "deployedBytecode": "$ca06ebe0e37df84d33a229baa7963d6fc2$__6379eaef82600786848151811061069d57fe5b6020026020010151856040518463ffffffff1660e01b81526004016106c4939291906148b2565b60206040518083038186803b1580156106dc57600080fd5b505af41580156106f0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071491906145a4565b83828151811061072057fe5b602090810291909101015260010161066c565b5050919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008061076b8533611b5b565b905061078f336001600160a01b03871614806107875750838210155b61019e611d4e565b61079a858585611d60565b336001600160a01b038616148015906107b557506000198114155b156107c7576107c78533858403611ce2565b60019150505b9392505050565b60055460ff1690565b6107f781831080156107f0575060148211155b6064611d4e565b600061080c6001600080600080600080611e48565b9050825b8281101561084e5760008181526007602052604090205461083090611ea8565b6108465760008181526007602052604090208290555b600101610810565b50505050565b600061085e611eb4565b905090565b7f000000000000000000000000000000000000000000000000000000000000000090565b3360008181526001602090815260408083206001600160a01b038716845290915281205490916106069185906108bd9086611f72565b611ce2565b60007f000000000000000000000000000000000000000000000000000000000000000042106108f3575060006109ee565b6109eb670de0b6b3a76400006109e56109326301e13380427f000000000000000000000000000000000000000000000000000000000000000003611f84565b6109df6109d07f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663226778496040518163ffffffff1660e01b815260040160206040518083038186803b15801561099157600080fd5b505afa1580156109a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c991906145a4565b8890611fd5565b670de0b6b3a764000090611f84565b9061200b565b90611ccc565b90505b919050565b7f000000000000000000000000000000000000000000000000000000000000000090600182900390565b6000806000806000806000610a376014891061013b611d4e565b6000610a428961205a565b9050610a4d8161206c565b959f949e50929c50909a509850965090945092505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6060815167ffffffffffffffff81118015610aa357600080fd5b50604051908082528060200260200182016040528015610acd578160200160208202803683370190505b5090506000610ada611d44565b9050610ae4613f87565b60005b8451811015610b3857848181518110610afc57fe5b60200260200101519150610b1982600001518484602001516120cf565b848281518110610b2557fe5b6020908102919091010152600101610ae7565b505050919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6001600160a01b031660009081526020819052604090205490565b60608088610ba9610b8e610e29565b6001600160a01b0316336001600160a01b0316146064612181565b610bbd610bb4610863565b82146067612181565b610bc68761218f565b610c3a86887f000000000000000000000000000000000000000000000000000000000000000081518110610bf657fe5b6020026020010151897f000000000000000000000000000000000000000000000000000000000000000060010381518110610c2d57fe5b602002602001015161228f565b8415610c7357610c737f0000000000000000000000000000000000000000000000000000000000000000610c6e89886123e9565b6125b2565b600084806020019051810190610c8991906145a4565b90506000610c9f610c98610610565b83906125bc565b604080516002808252606080830184529394509091602083019080368337019050509050610cea828b600081518110610cd457fe5b602002602001015161260a90919063ffffffff16565b81600081518110610cf757fe5b602002602001018181525050610d14828b600181518110610cd457fe5b81600181518110610d2157fe5b602002602001018181525050610d3681612646565b610d408c8461273c565b610d7b81600081518110610d5057fe5b60200260200101518b600081518110610d6557fe5b6020026020010151611ccc90919063ffffffff16565b8a600081518110610d8857fe5b602002602001018181525050610db981600181518110610da457fe5b60200260200101518b600181518110610d6557fe5b8a600181518110610dc657fe5b602002602001018181525050610ddb8a612746565b604080516002808252606082018352839260208301908036833701905050955095505050505b5097509795505050505050565b6001600160a01b031660009081526006602052604090205490565b7f000000000000000000000000000000000000000000000000000000000000000090565b60048054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156105e85780601f106105bd576101008083540402835291602001916105e8565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031685602001516001600160a01b031614610f17577f0000000000000000000000000000000000000000000000000000000000000000600114610f3a565b7f0000000000000000000000000000000000000000000000000000000000000000155b90506000610f4782612908565b90506000610f558315612908565b9050610f61868361295c565b9550610f6d858261295c565b9450610f968760a0015184610f825786610f84565b875b85610f8f5788610f91565b875b61228f565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f51e181a6040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610ff357600080fd5b505af1158015611007573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061102b91906145a4565b905083156110635761104561103e610610565b8890611f72565b965061105c60085487611fd590919063ffffffff16565b9550611088565b600854611071908890611fd5565b965061108561107e610610565b8790611f72565b95505b60008851600181111561109757fe5b1415611109576110ab88606001518461295c565b6060890152836110ca5760608801516110c49082611fd5565b60608901525b60006110de8560018b606001518b8b612968565b905084156110f3576110f08183611f84565b90505b6110fd8184612b49565b955050505050506107cd565b61111788606001518361295c565b606089015283156111375760608801516111319082611fd5565b60608901525b600061114b8560008b606001518b8b612968565b90508461115f5761115c8183611f84565b90505b6110fd8185612b5c565b6000806111763385611b5b565b90508083106111905761118b33856000611ce2565b61119d565b61119d3385858403611ce2565b5060019392505050565b60408051600180825281830190925260009160609190816020015b6111ca613f9e565b8152602001906001900390816111c25790505060408051606081019091529091508060008152602001848152602001610e108152508160008151811061120c57fe5b60209081029190910101526040517f1dccd8300000000000000000000000000000000000000000000000000000000081526060903090631dccd830906112569085906004016147ac565b60006040518083038186803b15801561126e57600080fd5b505afa158015611282573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526112aa919081019061445a565b905060007f000000000000000000000000000000000000000000000000000000000000000060011461130a57611305826000815181106112e657fe5b6020026020010151670de0b6b3a7640000611f8490919063ffffffff16565b611320565b8160008151811061131757fe5b60200260200101515b9050600061132d826108c2565b905060607f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f94d46687f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b815260040161139d9190614831565b60006040518083038186803b1580156113b557600080fd5b505afa1580156113c9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526113f191908101906141f2565b509150506000427f000000000000000000000000000000000000000000000000000000000000000011611425576000611453565b670de0b6b3a7640000427f000000000000000000000000000000000000000000000000000000000000000003025b905060006114896114847f000000000000000000000000000000000000000000000000000000000000000084611fd5565b612b68565b905060006115366114df836109df600854887f0000000000000000000000000000000000000000000000000000000000000000600103815181106114c957fe5b6020026020010151611fd590919063ffffffff16565b611530846109df6114ee610610565b897f00000000000000000000000000000000000000000000000000000000000000008151811061151a57fe5b6020026020010151611f7290919063ffffffff16565b90611f72565b9050600061157461154f670de0b6b3a764000085611f84565b6109df61156d670de0b6b3a76400006115306109d08985848f611f72565b8590611f84565b905060006115a0611599611590670de0b6b3a76400008a611f72565b60085490611fd5565b8390611f84565b90506115d96115ad610610565b6115d36115cc8b6115c66115bf610610565b8890611ccc565b90611fd5565b8490611f72565b90611f84565b9c9b505050505050505050505050565b6000610606338484611d60565b600073__$ca06ebe0e37df84d33a229baa7963d6fc2$__630397bee060078461161d611d44565b6040518463ffffffff1660e01b815260040161163b9392919061486a565b60206040518083038186803b15801561165357600080fd5b505af4158015611667573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109eb91906145a4565b601490565b7f000000000000000000000000000000000000000000000000000000000000000081565b6116c28442111560d1611d4e565b6001600160a01b0380881660008181526006602090815260408083205481517f00000000000000000000000000000000000000000000000000000000000000008185015280830195909552948b166060850152608084018a905260a0840185905260c08085018a90528151808603909101815260e0909401905282519201919091209061174e82612b8e565b9050600060018288888860405160008152602001604052604051808581526020018460ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa1580156117ac573d6000803e3d6000fd5b5050604051601f19015191506117ee90506001600160a01b038216158015906117e657508b6001600160a01b0316826001600160a01b0316145b6101f8611d4e565b6001600160a01b038b1660009081526006602052604090206001850190556118178b8b8b611ce2565b5050505050505050505050565b60608088611833610b8e610e29565b61183e610bb4610863565b61186c427f000000000000000000000000000000000000000000000000000000000000000010156069612181565b606084806020019051810190611882919061445a565b905061188d8861218f565b6118968161218f565b61189e610610565b611a205760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f51e181a6040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156118ff57600080fd5b505af1158015611913573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061193791906145a4565b9050600061196e82847f0000000000000000000000000000000000000000000000000000000000000000600103815181106114c957fe5b905061197e6000620f42406125b2565b61198f8b610c6e83620f4240611ccc565b61199883612bf5565b81600881905550827f0000000000000000000000000000000000000000000000000000000000000000815181106119cb57fe5b6020026020010160008152508299506119e38a612746565b82600260005b50604051908082528060200260200182016040528015611a13578160200160208202803683370190505b5095509550505050610e01565b611a8787897f000000000000000000000000000000000000000000000000000000000000000081518110611a5057fe5b60200260200101518a7f000000000000000000000000000000000000000000000000000000000000000060010381518110610c2d57fe5b8515611abb57611abb7f0000000000000000000000000000000000000000000000000000000000000000610c6e8a896123e9565b60006060611ac9838b612cb7565b91509150611ad681612bf5565b611ae08b836125b2565b80600081518110611aed57fe5b60200260200101518a600081518110611b0257fe5b60200260200101818151019150818152505080600181518110611b2157fe5b60200260200101518a600181518110611b3657fe5b602002602001018181510191508181525050611b518a612746565b80600260006119e9565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6301e1338081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60007f00000000000000000000000000000000000000000000000000000000000000004210611bea5750670de0b6b3a76400006109ee565b6109eb7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663226778496040518163ffffffff1660e01b815260040160206040518083038186803b158015611c4657600080fd5b505afa158015611c5a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c7e91906145a4565b6115d36109d0611cb4427f0000000000000000000000000000000000000000000000000000000000000000036301e13380611f84565b6109df87670de0b6b3a7640000611f72565b615da890565b6000611cdc838311156001611d4e565b50900390565b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b600b5461ffff1690565b81611d5c57611d5c81612ffe565b5050565b611d776001600160a01b0384161515610198611d4e565b611d8e6001600160a01b0383161515610199611d4e565b611d998383836123e4565b6001600160a01b038316600090815260208190526040902054611dbf90826101a0613051565b6001600160a01b038085166000908152602081905260408082209390935590841681522054611dee9082611f72565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b6000611e548282613067565b611e5f84601f61306b565b611e6a86605461307c565b611e7588606a61306b565b611e808a609f61307c565b611e8b8c60b561306b565b611e968e60ea61307c565b17171717171798975050505050505050565b60006109eb8282613089565b60007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611f21613093565b3060405160200180868152602001858152602001848152602001838152602001826001600160a01b031681526020019550505050505060405160208183030381529060405280519060200120905090565b60008282016107cd8482101583611d4e565b6000611f938215156004611d4e565b82611fa05750600061060a565b670de0b6b3a764000083810290611fc390858381611fba57fe5b04146005611d4e565b828181611fcc57fe5b0491505061060a565b6000828202611ff9841580611ff2575083858381611fef57fe5b04145b6003611d4e565b670de0b6b3a764000090049392505050565b6000806120188484613097565b9050600061203261202b8361271061260a565b6001611f72565b9050808210156120475760009250505061060a565b6120518282611ccc565b9250505061060a565b60009081526007602052604090205490565b6000806000806000806000612080886131be565b965061208b886131cb565b9550612096886131d8565b94506120a1886131e5565b93506120ac886131f2565b92506120b7886131ff565b91506120c288611ea8565b9050919395979092949650565b6040517f34171a8500000000000000000000000000000000000000000000000000000000815260009073__$ca06ebe0e37df84d33a229baa7963d6fc2$__906334171a85906121299060079088908890889060040161488c565b60206040518083038186803b15801561214157600080fd5b505af4158015612155573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061217991906145a4565b949350505050565b81611d5c57611d5c8161320c565b6121d5817f0000000000000000000000000000000000000000000000000000000000000000815181106121be57fe5b60200260200101516121d06001612908565b613260565b817f00000000000000000000000000000000000000000000000000000000000000008151811061220157fe5b602002602001018181525050612251817f00000000000000000000000000000000000000000000000000000000000000006001038151811061223f57fe5b60200260200101516121d06000612908565b817f00000000000000000000000000000000000000000000000000000000000000006001038151811061228057fe5b60200260200101818152505050565b600b546601000000000000900460ff1680156122aa57508243115b80156122bd5750662386f26fc100008110155b156123e45760006122f3670de0b6b3a76400006109e56122e860085486611fd590919063ffffffff16565b6115d361103e610610565b9050600061230082611bb2565b905060007f0000000000000000000000000000000000000000000000000000000000000000156123305781612342565b612342670de0b6b3a764000083611f84565b600b549091506000906123a79063ffffffff620100008204169061ffff166123698561327a565b620f424088106123815761237c8861327a565b61238d565b61238d620f424061327a565b600b546701000000000000009004601890810b900b6132ba565b600b5490915061ffff1681146123df57600b805465ffffffff00001916620100004263ffffffff16021761ffff191661ffff83161790555b505050505b505050565b600080427f00000000000000000000000000000000000000000000000000000000000000001161241a576000612448565b670de0b6b3a7640000427f000000000000000000000000000000000000000000000000000000000000000003025b905060006124796114847f000000000000000000000000000000000000000000000000000000000000000084611fd5565b905060006124a261249583600a5461200b90919063ffffffff16565b600954611530908561200b565b905060006124e1836109df6124b5610610565b8a7f00000000000000000000000000000000000000000000000000000000000000008151811061151a57fe5b9050600061251e846109df6008548b7f0000000000000000000000000000000000000000000000000000000000000000600103815181106114c957fe5b9050600061252c8383611f72565b9050838111612544576000965050505050505061060a565b600061256561255b670de0b6b3a764000088611f84565b6109df8488611f84565b90506000612589826115d361258282670de0b6b3a7640000611ccc565b8d90611fd5565b90506125a361259782612b68565b6115d3836115c6610610565b9b9a5050505050505050505050565b611d5c8282613312565b60006125cb8215156004611d4e565b826125d85750600061060a565b670de0b6b3a7640000838102906125f290858381611fba57fe5b8260018203816125fe57fe5b0460010191505061060a565b6000828202612624841580611ff2575083858381611fef57fe5b8061263357600091505061060a565b670de0b6b3a764000060001982016125fe565b6126506001612908565b817f00000000000000000000000000000000000000000000000000000000000000008151811061267c57fe5b60200260200101518161268b57fe5b04817f0000000000000000000000000000000000000000000000000000000000000000815181106126b857fe5b6020026020010181815250506126ce6000612908565b817f0000000000000000000000000000000000000000000000000000000000000000600103815181106126fd57fe5b60200260200101518161270c57fe5b04817f00000000000000000000000000000000000000000000000000000000000000006001038151811061228057fe5b611d5c82826133a7565b600061277f612753610610565b837f00000000000000000000000000000000000000000000000000000000000000008151811061151a57fe5b905060006127b8600854847f0000000000000000000000000000000000000000000000000000000000000000600103815181106114c957fe5b90506000807f00000000000000000000000000000000000000000000000000000000000000006127ec5750829050816127f2565b50819050825b600b546601000000000000900460ff16156128fa576000427f000000000000000000000000000000000000000000000000000000000000000011612837576000612865565b670de0b6b3a7640000427f000000000000000000000000000000000000000000000000000000000000000003025b905060006128966114847f000000000000000000000000000000000000000000000000000000000000000084611fd5565b90506128b76128b26128a8858461200b565b611530878561200b565b61327a565b600b805460189290920b78ffffffffffffffffffffffffffffffffffffffffffffffffff166701000000000000000266ffffffffffffff90921691909117905550505b600991909155600a55505050565b600081612935577f00000000000000000000000000000000000000000000000000000000000000006109eb565b507f0000000000000000000000000000000000000000000000000000000000000000919050565b60006107cd8383613260565b600080427f0000000000000000000000000000000000000000000000000000000000000000116129995760006129c7565b670de0b6b3a7640000427f000000000000000000000000000000000000000000000000000000000000000003025b905060006129f57f000000000000000000000000000000000000000000000000000000000000000083611fd5565b90506000612a53611484838b612a2b577f0000000000000000000000000000000000000000000000000000000000000000612a4d565b7f00000000000000000000000000000000000000000000000000000000000000005b9061260a565b90506000612a61878361345e565b90506000612a6f878461345e565b905060008a612a8757612a82888b611ccc565b612a8b565b8989015b90506000612a99828661200b565b90506000612ac6612ab2670de0b6b3a764000088611f84565b612ac0846109e58989611f72565b9061345e565b9050612ade8d1580612ad75750818b115b606a612181565b8c15612b1a57612b018e612af55781841115612afa565b818410155b606b612181565b612b0b8a82611ccc565b98505050505050505050612b40565b612b368e612b2b5783821115612afa565b83821015606b612181565b612b0b818c611ccc565b95945050505050565b6000818381612b5457fe5b049392505050565b60006107cd838361348a565b6000670de0b6b3a76400008210612b805760006109eb565b50670de0b6b3a76400000390565b6000612b98611eb4565b8260405160200180807f190100000000000000000000000000000000000000000000000000000000000081525060020183815260200182815260200192505050604051602081830303815290604052805190602001209050919050565b612c3b817f000000000000000000000000000000000000000000000000000000000000000081518110612c2457fe5b6020026020010151612c366001612908565b61348a565b817f000000000000000000000000000000000000000000000000000000000000000081518110612c6757fe5b602002602001018181525050612251817f000000000000000000000000000000000000000000000000000000000000000060010381518110612ca557fe5b6020026020010151612c366000612908565b60006060600080847f000000000000000000000000000000000000000000000000000000000000000081518110612cea57fe5b6020026020010151857f000000000000000000000000000000000000000000000000000000000000000060010381518110612d2157fe5b6020026020010151915091506060600267ffffffffffffffff81118015612d4757600080fd5b50604051908082528060200260200182016040528015612d71578160200160208202803683370190505b50905082612e1b576000877f000000000000000000000000000000000000000000000000000000000000000060010381518110612daa57fe5b60200260200101519050600083612dc8612dc2610610565b84613260565b81612dcf57fe5b04905081837f000000000000000000000000000000000000000000000000000000000000000060010381518110612e0257fe5b60209081029190910101529550909350612ff792505050565b600080887f000000000000000000000000000000000000000000000000000000000000000081518110612e4a57fe5b6020026020010151897f000000000000000000000000000000000000000000000000000000000000000060010381518110612e8157fe5b602002602001015191509150600084612e9b612dc2610610565b81612ea257fe5b049050600086612eb9612eb3610610565b86613260565b81612ec057fe5b04905080821015612f615785612ed68885613260565b81612edd57fe5b04857f000000000000000000000000000000000000000000000000000000000000000081518110612f0a57fe5b60200260200101818152505082857f000000000000000000000000000000000000000000000000000000000000000060010381518110612f4657fe5b6020908102919091010152509650919450612ff79350505050565b83857f000000000000000000000000000000000000000000000000000000000000000081518110612f8e57fe5b60200260200101818152505086612fa58786613260565b81612fac57fe5b04857f000000000000000000000000000000000000000000000000000000000000000060010381518110612fdc57fe5b60209081029190910101529750929550612ff7945050505050565b9250929050565b62461bcd60e51b6000908152602060045260076024526642414c23000030600a808404818106603090810160081b95839006959095019082900491820690940160101b939093010160c81b604452606490fd5b60006130608484111583611d4e565b5050900390565b1b90565b661fffffffffffff91909116901b90565b623fffff91909116901b90565b1c637fffffff1690565b4690565b6000816130ad5750670de0b6b3a764000061060a565b826130ba5750600061060a565b6130e77f800000000000000000000000000000000000000000000000000000000000000084106006611d4e565b8261310d770bce5086492111aea88f4bb1ca6bcf584181ea8059f7653284106007611d4e565b826000670c7d713b49da00008313801561312e5750670f43fc2c04ee000083125b1561316557600061313e846134bd565b9050670de0b6b3a764000080820784020583670de0b6b3a764000083050201915050613173565b8161316f846135f4565b0290505b670de0b6b3a764000090056131ab680238fd42c5cf03ffff1982128015906131a4575068070c1cc73b00c800008213155b6008611d4e565b6131b481613994565b9695505050505050565b60006109eb8260ea613e4e565b60006109eb8260b5613e75565b60006109eb82609f613e4e565b60006109eb82606a613e75565b60006109eb826054613e4e565b60006109eb82601f613e75565b62461bcd60e51b600090815260206004526007602452673f534e5323000030600a808404818106603090810160081b95839006959095019082900491820690940160101b939093010160c81b604452606490fd5b60008282026107cd841580611ff2575083858381611fef57fe5b60008061328683613ea8565b9050600080821361329f57652d79883d200082036132a9565b652d79883d200082015b655af3107a40009005949350505050565b6000806132d6858585426132cd8b61205a565b93929190613f04565b90506104b0428890031015806132ec57866132f5565b6132f587613f64565b600081815260076020526040902092909255509695505050505050565b61331e600083836123e4565b60025461332b9082611f72565b6002556001600160a01b0382166000908152602081905260409020546133519082611f72565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6133be6001600160a01b038316151561019b611d4e565b6133ca826000836123e4565b6001600160a01b0382166000908152602081905260409020546133f090826101a1613051565b6001600160a01b0383166000908152602081905260409020556002546134169082613f71565b6002556040805182815290516000916001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b60008061346b8484613097565b9050600061347e61202b8361271061260a565b9050612b408282611f72565b60006134998215156004611d4e565b826134a65750600061060a565b8160018403816134b257fe5b04600101905061060a565b670de0b6b3a7640000026000806ec097ce7bc90715b34b9f1000000000808401907fffffffffffffffffffffffffffffffffff3f68318436f8ea4cb460f0000000008501028161350957fe5b05905060006ec097ce7bc90715b34b9f100000000082800205905081806ec097ce7bc90715b34b9f100000000081840205915060038205016ec097ce7bc90715b34b9f100000000082840205915060058205016ec097ce7bc90715b34b9f100000000082840205915060078205016ec097ce7bc90715b34b9f100000000082840205915060098205016ec097ce7bc90715b34b9f1000000000828402059150600b8205016ec097ce7bc90715b34b9f1000000000828402059150600d8205016ec097ce7bc90715b34b9f1000000000828402059150600f826002919005919091010295945050505050565b6000670de0b6b3a764000082121561363157613627826ec097ce7bc90715b34b9f10000000008161362157fe5b056135f4565b60000390506109ee565b60007e1600ef3172e58d2e933ec884fde10064c63b5372d805e203c0000000000000831261368257770195e54c5dd42177f53a27172fa9ec630262827000000000830592506806f05b59d3b2000000015b73011798004d755d3c8bc8e03204cf44619e00000083126136ba576b1425982cf597cd205cef7380830592506803782dace9d9000000015b606492830292026e01855144814a7ff805980ff00840008312613702576e01855144814a7ff805980ff008400068056bc75e2d63100000840205925068ad78ebc5ac62000000015b6b02df0ab5a80a22c61ab5a700831261373d576b02df0ab5a80a22c61ab5a70068056bc75e2d6310000084020592506856bc75e2d631000000015b693f1fce3da636ea5cf850831261377457693f1fce3da636ea5cf85068056bc75e2d631000008402059250682b5e3af16b18800000015b690127fa27722cc06cc5e283126137ab57690127fa27722cc06cc5e268056bc75e2d6310000084020592506815af1d78b58c400000015b68280e60114edb805d0383126137e05768280e60114edb805d0368056bc75e2d631000008402059250680ad78ebc5ac6200000015b680ebc5fb41746121110831261380b57680ebc5fb4174612111068056bc75e2d631000009384020592015b6808f00f760a4b2db55d8312613840576808f00f760a4b2db55d68056bc75e2d6310000084020592506802b5e3af16b1880000015b6806f5f17757889379378312613875576806f5f177578893793768056bc75e2d63100000840205925068015af1d78b58c40000015b6806248f33704b28660383126138a9576806248f33704b28660368056bc75e2d63100000840205925067ad78ebc5ac620000015b6805c548670b9510e7ac83126138dd576805c548670b9510e7ac68056bc75e2d6310000084020592506756bc75e2d6310000015b600068056bc75e2d63100000840168056bc75e2d63100000808603028161390057fe5b059050600068056bc75e2d63100000828002059050818068056bc75e2d63100000818402059150600382050168056bc75e2d63100000828402059150600582050168056bc75e2d63100000828402059150600782050168056bc75e2d63100000828402059150600982050168056bc75e2d63100000828402059150600b820501600202606485820105979650505050505050565b60006139c3680238fd42c5cf03ffff1983121580156139bc575068070c1cc73b00c800008313155b6009611d4e565b60008212156139f7576139d882600003613994565b6ec097ce7bc90715b34b9f1000000000816139ef57fe5b0590506109ee565b60006806f05b59d3b20000008312613a4d57507ffffffffffffffffffffffffffffffffffffffffffffffff90fa4a62c4e00000090910190770195e54c5dd42177f53a27172fa9ec630262827000000000613a99565b6803782dace9d90000008312613a9557507ffffffffffffffffffffffffffffffffffffffffffffffffc87d2531627000000909101906b1425982cf597cd205cef7380613a99565b5060015b6064929092029168056bc75e2d6310000068ad78ebc5ac620000008412613aff577fffffffffffffffffffffffffffffffffffffffffffffff5287143a539e0000009093019268056bc75e2d631000006e01855144814a7ff805980ff008400082020590505b6856bc75e2d6310000008412613b51577fffffffffffffffffffffffffffffffffffffffffffffffa9438a1d29cf0000009093019268056bc75e2d631000006b02df0ab5a80a22c61ab5a70082020590505b682b5e3af16b188000008412613ba1577fffffffffffffffffffffffffffffffffffffffffffffffd4a1c50e94e78000009093019268056bc75e2d63100000693f1fce3da636ea5cf85082020590505b6815af1d78b58c4000008412613bf1577fffffffffffffffffffffffffffffffffffffffffffffffea50e2874a73c000009093019268056bc75e2d63100000690127fa27722cc06cc5e282020590505b680ad78ebc5ac62000008412613c40577ffffffffffffffffffffffffffffffffffffffffffffffff5287143a539e000009093019268056bc75e2d6310000068280e60114edb805d0382020590505b68056bc75e2d631000008412613c8f577ffffffffffffffffffffffffffffffffffffffffffffffffa9438a1d29cf000009093019268056bc75e2d63100000680ebc5fb4174612111082020590505b6802b5e3af16b18800008412613cde577ffffffffffffffffffffffffffffffffffffffffffffffffd4a1c50e94e7800009093019268056bc75e2d631000006808f00f760a4b2db55d82020590505b68015af1d78b58c400008412613d2d577ffffffffffffffffffffffffffffffffffffffffffffffffea50e2874a73c00009093019268056bc75e2d631000006806f5f177578893793782020590505b68056bc75e2d631000008481019085906002908280020505918201919050600368056bc75e2d631000008783020505918201919050600468056bc75e2d631000008783020505918201919050600568056bc75e2d631000008783020505918201919050600668056bc75e2d631000008783020505918201919050600768056bc75e2d631000008783020505918201919050600868056bc75e2d631000008783020505918201919050600968056bc75e2d631000008783020505918201919050600a68056bc75e2d631000008783020505918201919050600b68056bc75e2d631000008783020505918201919050600c68056bc75e2d631000008783020505918201919050606468056bc75e2d63100000848402058502059695505050505050565b600082821c623fffff16621fffff8113613e685780612179565b623fffff19179392505050565b600082821c661fffffffffffff16660fffffffffffff8113613e975780612179565b661fffffffffffff19179392505050565b6000613eb8600083136064611d4e565b670c7d713b49da000082138015613ed65750670f43fc2c04ee000082125b15613ef457670de0b6b3a7640000613eed836134bd565b816139ef57fe5b613efd826135f4565b90506109ee565b600080613f1087611ea8565b830390506000818702613f22896131cb565b0190506000828702613f338a6131e5565b0190506000838702613f448b6131ff565b019050613f5689848a858b868c611e48565b9a9950505050505050505050565b60006109eb826001613f7f565b60006107cd83836001613051565b601491010690565b604080518082019091526000808252602082015290565b6040805160608101909152806000815260200160008152602001600081525090565b80356109ee81614985565b600082601f830112613fdb578081fd5b8151613fee613fe982614967565b614943565b81815291506020808301908481018184028601820187101561400f57600080fd5b60005b8481101561402e57815184529282019290820190600101614012565b505050505092915050565b600082601f830112614049578081fd5b813567ffffffffffffffff81111561405d57fe5b614070601f8201601f1916602001614943565b915080825283602082850101111561408757600080fd5b8060208401602084013760009082016020015292915050565b8035600281106109ee57600080fd5b8035600381106109ee57600080fd5b6000602082840312156140cf578081fd5b81356107cd81614985565b600080604083850312156140ec578081fd5b82356140f781614985565b9150602083013561410781614985565b809150509250929050565b600080600060608486031215614126578081fd5b833561413181614985565b9250602084013561414181614985565b929592945050506040919091013590565b600080600080600080600060e0888a03121561416c578485fd5b873561417781614985565b9650602088013561418781614985565b95506040880135945060608801359350608088013560ff811681146141aa578384fd5b9699959850939692959460a0840135945060c09093013592915050565b600080604083850312156141d9578182fd5b82356141e481614985565b946020939093013593505050565b600080600060608486031215614206578081fd5b835167ffffffffffffffff8082111561421d578283fd5b818601915086601f830112614230578283fd5b815161423e613fe982614967565b80828252602080830192508086018b82838702890101111561425e578788fd5b8796505b8487101561428957805161427581614985565b845260019690960195928101928101614262565b5089015190975093505050808211156142a0578283fd5b506142ad86828701613fcb565b925050604084015190509250925092565b600060208083850312156142d0578182fd5b823567ffffffffffffffff808211156142e7578384fd5b818501915085601f8301126142fa578384fd5b8135614308613fe982614967565b818152848101908486016040808502870188018b1015614326578889fd5b8896505b8487101561437e5780828c031215614340578889fd5b8051818101818110888211171561435357fe5b825261435e836140af565b81528289013589820152845260019690960195928701929081019061432a565b50909998505050505050505050565b6000602080838503121561439f578182fd5b823567ffffffffffffffff808211156143b6578384fd5b818501915085601f8301126143c9578384fd5b81356143d7613fe982614967565b818152848101908486016060808502870188018b10156143f5578889fd5b8896505b8487101561437e5780828c03121561440f578889fd5b60408051828101818110898211171561442457fe5b825261442f846140af565b8152838a01358a820152818401359181019190915284526001969096019592870192908101906143f9565b60006020828403121561446b578081fd5b815167ffffffffffffffff811115614481578182fd5b61217984828501613fcb565b600080600080600080600060e0888a0312156144a7578081fd5b873596506020808901356144ba81614985565b965060408901356144ca81614985565b9550606089013567ffffffffffffffff808211156144e6578384fd5b818b0191508b601f8301126144f9578384fd5b8135614507613fe982614967565b8082825285820191508585018f878886028801011115614525578788fd5b8795505b83861015614547578035835260019590950194918601918601614529565b509850505060808b0135955060a08b0135945060c08b013592508083111561456d578384fd5b505061457b8a828b01614039565b91505092959891949750929550565b60006020828403121561459b578081fd5b6107cd826140af565b6000602082840312156145b5578081fd5b5051919050565b6000806000606084860312156145d0578081fd5b833567ffffffffffffffff808211156145e7578283fd5b81860191506101208083890312156145fd578384fd5b61460681614943565b9050614611836140a0565b815261461f60208401613fc0565b602082015261463060408401613fc0565b6040820152606083013560608201526080830135608082015260a083013560a082015261465f60c08401613fc0565b60c082015261467060e08401613fc0565b60e08201526101008084013583811115614688578586fd5b6146948a828701614039565b9183019190915250976020870135975060409096013595945050505050565b6000602082840312156146c4578081fd5b5035919050565b600080604083850312156146dd578182fd5b50508035926020909101359150565b6000815180845260208085019450808401835b8381101561471b578151875295820195908201906001016146ff565b509495945050505050565b6003811061473057fe5b9052565b61473f828251614726565b60208181015190830152604090810151910152565b6001600160a01b0391909116815260200190565b6020808252825182820181905260009190848201906040850190845b818110156147a057835183529284019291840191600101614784565b50909695505050505050565b6020808252825182820181905260009190848201906040850190845b818110156147a0576147db838551614734565b92840192606092909201916001016147c8565b6000602082526107cd60208301846146ec565b60006040825261481460408301856146ec565b8281036020840152612b4081856146ec565b901515815260200190565b90815260200190565b968752602087019590955260408601939093526060850191909152608084015260a083015260c082015260e00190565b8381526060810161487e6020830185614726565b826040830152949350505050565b848152608081016148a06020830186614726565b60408201939093526060015292915050565b83815260a081016148c66020830185614734565b826080830152949350505050565b6000602080835283518082850152825b81811015614900578581018301518582016040015282016148e4565b818111156149115783604083870101525b50601f01601f1916929092016040019392505050565b918252602082015260400190565b60ff91909116815260200190565b60405181810167ffffffffffffffff8111828210171561495f57fe5b604052919050565b600067ffffffffffffffff82111561497b57fe5b5060209081020190565b6001600160a01b038116811461499a57600080fd5b5056fea264697066735822122070eb1f054fc29928e710e889a830a2536ec2cb605a4f57304a834db3a5e4b03664736f6c63430007050033a26469706673582212201587ca391d55ef219969b303034a356bb22d9c6ccfc8d79f26b9a4f3f58ab92464736f6c63430007050033",
  "libraries": {
    "QueryProcessor": "0x066BC4F458507E70235ec54cEC3EB0c3eFC79bE0"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "create(address,uint256)": {
        "notice": "Deploys a new `Space` contract"
      },
      "divider()": {
        "notice": "Sense Divider"
      },
      "oracleEnabled()": {
        "notice": "Oracle flag"
      },
      "pools(address,uint256)": {
        "notice": "Pool registry (adapter -> maturity -> pool address)"
      },
      "ts()": {
        "notice": "Yieldspace config"
      },
      "vault()": {
        "notice": "Balancer Vault"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 16247,
        "contract": "lib/v1-space/src/SpaceFactory.sol:SpaceFactory",
        "label": "isTrusted",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 18552,
        "contract": "lib/v1-space/src/SpaceFactory.sol:SpaceFactory",
        "label": "pools",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))"
      },
      {
        "astId": 18555,
        "contract": "lib/v1-space/src/SpaceFactory.sol:SpaceFactory",
        "label": "ts",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 18557,
        "contract": "lib/v1-space/src/SpaceFactory.sol:SpaceFactory",
        "label": "g1",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 18559,
        "contract": "lib/v1-space/src/SpaceFactory.sol:SpaceFactory",
        "label": "g2",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 18562,
        "contract": "lib/v1-space/src/SpaceFactory.sol:SpaceFactory",
        "label": "oracleEnabled",
        "offset": 0,
        "slot": "5",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_address)"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}