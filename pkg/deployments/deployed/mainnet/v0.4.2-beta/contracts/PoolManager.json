{
  "address": "0x7a1d595690aaF08d9157988820c14348F6930de9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fuseDirectory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_comptrollerImpl",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_cERC20Impl",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_divider",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_oracleImpl",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "DuplicateSeries",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedAddLpMarket",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedAddTargetMarket",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedBecomeAdmin",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedToAddPTMarket",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidParam",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OracleNotReady",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PTParamsNotSet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PoolNotDeployed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PoolParamsNotSet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SeriesDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SeriesNotQueued",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TargetNotInFuse",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TargetParamsNotSet",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "what",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "irModel",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "reserveFactor",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateralFactor",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct PoolManager.AssetParams",
          "name": "data",
          "type": "tuple"
        }
      ],
      "name": "ParamsSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "comptroller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "closeFactor",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liqIncentive",
          "type": "uint256"
        }
      ],
      "name": "PoolDeployed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pt",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "lpToken",
          "type": "address"
        }
      ],
      "name": "SeriesAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "adapter",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "SeriesQueued",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "cTarget",
          "type": "address"
        }
      ],
      "name": "TargetAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "trusted",
          "type": "bool"
        }
      ],
      "name": "UserTrustUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "adapter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        }
      ],
      "name": "addSeries",
      "outputs": [
        {
          "internalType": "address",
          "name": "cPT",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "cLPToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "adapter",
          "type": "address"
        }
      ],
      "name": "addTarget",
      "outputs": [
        {
          "internalType": "address",
          "name": "cTarget",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cERC20Impl",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "comptroller",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "comptrollerImpl",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "closeFactor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liqIncentive",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "fallbackOracle",
          "type": "address"
        }
      ],
      "name": "deployPool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_poolIndex",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_comptroller",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "divider",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "txGas",
          "type": "uint256"
        }
      ],
      "name": "execute",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fuseDirectory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isTrusted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpOracle",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpTokenParams",
      "outputs": [
        {
          "internalType": "address",
          "name": "irModel",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "reserveFactor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "collateralFactor",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "masterOracle",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracleImpl",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ptOracle",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ptParams",
      "outputs": [
        {
          "internalType": "address",
          "name": "irModel",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "reserveFactor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "collateralFactor",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "adapter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "queueSeries",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "sSeries",
      "outputs": [
        {
          "internalType": "enum PoolManager.SeriesStatus",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "trusted",
          "type": "bool"
        }
      ],
      "name": "setIsTrusted",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "what",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "irModel",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "reserveFactor",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateralFactor",
              "type": "uint256"
            }
          ],
          "internalType": "struct PoolManager.AssetParams",
          "name": "data",
          "type": "tuple"
        }
      ],
      "name": "setParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "targetOracle",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "targetParams",
      "outputs": [
        {
          "internalType": "address",
          "name": "irModel",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "reserveFactor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "collateralFactor",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "underlyingOracle",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x972aa2a1b9050b341dbac97cd16d7f4bb27c2475c3a95eca5f97e1c8b8510ff1",
  "receipt": {
    "to": null,
    "from": "0x59A181710F926Eae6FddfbF27a14259E8DD00cA2",
    "contractAddress": "0x7a1d595690aaF08d9157988820c14348F6930de9",
    "transactionIndex": 10,
    "gasUsed": "4212668",
    "logsBloom": "0x
    "blockHash": "0xe27ca5cfcef6cb56086313525e5249499edf3aa293e775daee235d60c2ce5aa0",
    "transactionHash": "0x972aa2a1b9050b341dbac97cd16d7f4bb27c2475c3a95eca5f97e1c8b8510ff1",
    "logs": [
      {
        "transactionIndex": 10,
        "blockNumber": 14427180,
        "transactionHash": "0x972aa2a1b9050b341dbac97cd16d7f4bb27c2475c3a95eca5f97e1c8b8510ff1",
        "address": "0x7a1d595690aaF08d9157988820c14348F6930de9",
        "topics": [
          "0xe95aec380cae16330d146d5499ef7db6f3657e477104a733e771bc09e500d986",
          "0x00000000000000000000000059a181710f926eae6fddfbf27a14259e8dd00ca2"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 7,
        "blockHash": "0xe27ca5cfcef6cb56086313525e5249499edf3aa293e775daee235d60c2ce5aa0"
      },
      {
        "transactionIndex": 10,
        "blockNumber": 14427180,
        "transactionHash": "0x972aa2a1b9050b341dbac97cd16d7f4bb27c2475c3a95eca5f97e1c8b8510ff1",
        "address": "0x4e450a2D2174E79d594ed7648BDd34F28739a0Ca",
        "topics": [
          "0xe95aec380cae16330d146d5499ef7db6f3657e477104a733e771bc09e500d986",
          "0x0000000000000000000000007a1d595690aaf08d9157988820c14348f6930de9"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 8,
        "blockHash": "0xe27ca5cfcef6cb56086313525e5249499edf3aa293e775daee235d60c2ce5aa0"
      },
      {
        "transactionIndex": 10,
        "blockNumber": 14427180,
        "transactionHash": "0x972aa2a1b9050b341dbac97cd16d7f4bb27c2475c3a95eca5f97e1c8b8510ff1",
        "address": "0x33da4442E89EfACeaC6123dceAd17c34C65E8070",
        "topics": [
          "0xe95aec380cae16330d146d5499ef7db6f3657e477104a733e771bc09e500d986",
          "0x0000000000000000000000007a1d595690aaf08d9157988820c14348f6930de9"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 9,
        "blockHash": "0xe27ca5cfcef6cb56086313525e5249499edf3aa293e775daee235d60c2ce5aa0"
      },
      {
        "transactionIndex": 10,
        "blockNumber": 14427180,
        "transactionHash": "0x972aa2a1b9050b341dbac97cd16d7f4bb27c2475c3a95eca5f97e1c8b8510ff1",
        "address": "0xBDF7458Ab42ACFE577100e9A2EcAd8374F20453f",
        "topics": [
          "0xe95aec380cae16330d146d5499ef7db6f3657e477104a733e771bc09e500d986",
          "0x0000000000000000000000007a1d595690aaf08d9157988820c14348f6930de9"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 10,
        "blockHash": "0xe27ca5cfcef6cb56086313525e5249499edf3aa293e775daee235d60c2ce5aa0"
      },
      {
        "transactionIndex": 10,
        "blockNumber": 14427180,
        "transactionHash": "0x972aa2a1b9050b341dbac97cd16d7f4bb27c2475c3a95eca5f97e1c8b8510ff1",
        "address": "0x3a589E21A32ba952724FCe5f8f5FDE53AEa434E8",
        "topics": [
          "0xe95aec380cae16330d146d5499ef7db6f3657e477104a733e771bc09e500d986",
          "0x0000000000000000000000007a1d595690aaf08d9157988820c14348f6930de9"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 11,
        "blockHash": "0xe27ca5cfcef6cb56086313525e5249499edf3aa293e775daee235d60c2ce5aa0"
      }
    ],
    "blockNumber": 14427180,
    "cumulativeGasUsed": "4714673",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x835482FE0532f169024d5E9410199369aAD5C77E",
    "0xE16DB319d9dA7Ce40b666DD2E365a4b8B3C18217",
    "0x67db14e73c2dce786b5bbbfa4d010deab4bbfcf9",
    "0x86bA3E96Be68563E41c2f5769F1AF9fAf758e6E0",
    "0xb3c8ee7309be658c186f986388c2377da436d8fb"
  ],
  "numDeployments": 1,
  "solcInputHash": "a8857417c8d904a9d5fa33595a9f4cf2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fuseDirectory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_comptrollerImpl\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cERC20Impl\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_divider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracleImpl\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DuplicateSeries\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedAddLpMarket\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedAddTargetMarket\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedBecomeAdmin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedToAddPTMarket\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidParam\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OracleNotReady\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PTParamsNotSet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolNotDeployed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolParamsNotSet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SeriesDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SeriesNotQueued\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TargetNotInFuse\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TargetParamsNotSet\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"irModel\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reserveFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralFactor\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct PoolManager.AssetParams\",\"name\":\"data\",\"type\":\"tuple\"}],\"name\":\"ParamsSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"comptroller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"closeFactor\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liqIncentive\",\"type\":\"uint256\"}],\"name\":\"PoolDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pt\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"}],\"name\":\"SeriesAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"SeriesQueued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"cTarget\",\"type\":\"address\"}],\"name\":\"TargetAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"trusted\",\"type\":\"bool\"}],\"name\":\"UserTrustUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"}],\"name\":\"addSeries\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"cPT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cLPToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"}],\"name\":\"addTarget\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"cTarget\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cERC20Impl\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"comptroller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"comptrollerImpl\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"closeFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liqIncentive\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"fallbackOracle\",\"type\":\"address\"}],\"name\":\"deployPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_comptroller\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"divider\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"txGas\",\"type\":\"uint256\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fuseDirectory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isTrusted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpTokenParams\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"irModel\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reserveFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralFactor\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleImpl\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ptOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ptParams\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"irModel\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reserveFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralFactor\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"queueSeries\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sSeries\",\"outputs\":[{\"internalType\":\"enum PoolManager.SeriesStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"trusted\",\"type\":\"bool\"}],\"name\":\"setIsTrusted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"irModel\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reserveFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralFactor\",\"type\":\"uint256\"}],\"internalType\":\"struct PoolManager.AssetParams\",\"name\":\"data\",\"type\":\"tuple\"}],\"name\":\"setParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetParams\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"irModel\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reserveFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralFactor\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlyingOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addSeries(address,uint256)\":{\"details\":\"this can only be done once the yield space pool has filled its buffer and has a TWAP\"},\"queueSeries(address,uint256,address)\":{\"details\":\"called by the Periphery, which will know which pool address to set for this Series\"}},\"title\":\"Fuse Pool Manager\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addSeries(address,uint256)\":{\"notice\":\"open method to add queued Principal Tokens and LPShares to Fuse pool\"},\"cERC20Impl()\":{\"notice\":\"Implementation of Fuse's cERC20\"},\"comptroller()\":{\"notice\":\"Fuse comptroller for the Sense pool\"},\"comptrollerImpl()\":{\"notice\":\"Implementation of Fuse's comptroller\"},\"divider()\":{\"notice\":\"Sense core Divider address\"},\"fuseDirectory()\":{\"notice\":\"Fuse's pool directory\"},\"lpOracle()\":{\"notice\":\"Sense oracle for Space LP Shares\"},\"masterOracle()\":{\"notice\":\"Master oracle for Sense's assets deployed on Fuse\"},\"oracleImpl()\":{\"notice\":\"Implementation of Fuse's master oracle that routes to individual asset oracles\"},\"ptOracle()\":{\"notice\":\"Sense oracle for Sense Principal Tokens\"},\"queueSeries(address,uint256,address)\":{\"notice\":\"queues a set of (Principal Tokens, LPShare) for a Fuse pool to be deployed once the TWAP is ready\"},\"sSeries(address,uint256)\":{\"notice\":\"Series Pools: adapter -> maturity -> (series status (pt/lp shares), AMM pool)\"},\"targetOracle()\":{\"notice\":\"Sense oracle for SEnse Targets\"},\"targetParams()\":{\"notice\":\"Fuse param config\"},\"underlyingOracle()\":{\"notice\":\"Sense oracle for Underlying assets\"}},\"notice\":\"Consolidated Fuse interactions\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@sense-finance/v1-fuse/src/PoolManager.sol\":\"PoolManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1500},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xa3bbab77849522b73d8c6cd3d2ac54bef7580e4354484f35f4cabf55d3d2b3f9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xa35b1f2a670cd2a701a52c398032c9fed72df1909fe394d77ceacbf074e8937b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@rari-capital/solmate/src/tokens/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC20.sol)\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\\nabstract contract ERC20 {\\n    /*///////////////////////////////////////////////////////////////\\n                                  EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                             METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    uint8 public immutable decimals;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              ERC20 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                             EIP-2612 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    bytes32 public constant PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n    uint256 internal immutable INITIAL_CHAIN_ID;\\n\\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n\\n        INITIAL_CHAIN_ID = block.chainid;\\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              ERC20 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\\n        balanceOf[msg.sender] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(msg.sender, to, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\\n\\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\\n\\n        balanceOf[from] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              EIP-2612 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n        // Unchecked because the only math done is incrementing\\n        // the owner's nonce which cannot realistically overflow.\\n        unchecked {\\n            bytes32 digest = keccak256(\\n                abi.encodePacked(\\n                    \\\"\\\\x19\\\\x01\\\",\\n                    DOMAIN_SEPARATOR(),\\n                    keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\\n                )\\n            );\\n\\n            address recoveredAddress = ecrecover(digest, v, r, s);\\n\\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"INVALID_SIGNER\\\");\\n\\n            allowance[recoveredAddress][spender] = value;\\n        }\\n\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\\n    }\\n\\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                    keccak256(bytes(name)),\\n                    keccak256(\\\"1\\\"),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                       INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 amount) internal virtual {\\n        totalSupply += amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal virtual {\\n        balanceOf[from] -= amount;\\n\\n        // Cannot underflow because a user's balance\\n        // will never be larger than the total supply.\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n}\\n\",\"keccak256\":\"0x698cdbf614109fafc2bf00057b60715fa3aba9dad447c42f4f8b749ae16ce84f\",\"license\":\"AGPL-3.0-only\"},\"@rari-capital/solmate/src/utils/Bytes32AddressLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Library for converting between addresses and bytes32 values.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/Bytes32AddressLib.sol)\\nlibrary Bytes32AddressLib {\\n    function fromLast20Bytes(bytes32 bytesValue) internal pure returns (address) {\\n        return address(uint160(uint256(bytesValue)));\\n    }\\n\\n    function fillLast12Bytes(address addressValue) internal pure returns (bytes32) {\\n        return bytes32(bytes20(addressValue));\\n    }\\n}\\n\",\"keccak256\":\"0x2afc1acba8a77555e061420cab585a5bd4f030c3ad0ac3e0066dbb55e3a8adff\",\"license\":\"AGPL-3.0-only\"},\"@rari-capital/solmate/src/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Gas optimized reentrancy protection for smart contracts.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/ReentrancyGuard.sol)\\n/// @author Modified from OpenZeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/security/ReentrancyGuard.sol)\\nabstract contract ReentrancyGuard {\\n    uint256 private reentrancyStatus = 1;\\n\\n    modifier nonReentrant() {\\n        require(reentrancyStatus == 1, \\\"REENTRANCY\\\");\\n\\n        reentrancyStatus = 2;\\n\\n        _;\\n\\n        reentrancyStatus = 1;\\n    }\\n}\\n\",\"keccak256\":\"0x37da48458a348878d8db5b58367d734e340b9172ef947df430027638fc45a015\",\"license\":\"AGPL-3.0-only\"},\"@rari-capital/solmate/src/utils/SafeTransferLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport {ERC20} from \\\"../tokens/ERC20.sol\\\";\\n\\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/SafeTransferLib.sol)\\n/// @author Modified from Gnosis (https://github.com/gnosis/gp-v2-contracts/blob/main/src/contracts/libraries/GPv2SafeERC20.sol)\\n/// @dev Use with caution! Some functions in this library knowingly create dirty bits at the destination of the free memory pointer.\\nlibrary SafeTransferLib {\\n    /*///////////////////////////////////////////////////////////////\\n                            ETH OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        bool callStatus;\\n\\n        assembly {\\n            // Transfer the ETH and store if it succeeded or not.\\n            callStatus := call(gas(), to, amount, 0, 0, 0, 0)\\n        }\\n\\n        require(callStatus, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                           ERC20 OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferFrom(\\n        ERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool callStatus;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata to memory piece by piece:\\n            mstore(freeMemoryPointer, 0x23b872dd00000000000000000000000000000000000000000000000000000000) // Begin with the function selector.\\n            mstore(add(freeMemoryPointer, 4), and(from, 0xffffffffffffffffffffffffffffffffffffffff)) // Mask and append the \\\"from\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Mask and append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 68), amount) // Finally append the \\\"amount\\\" argument. No mask as it's a full 32 byte value.\\n\\n            // Call the token and store if it succeeded or not.\\n            // We use 100 because the calldata length is 4 + 32 * 3.\\n            callStatus := call(gas(), token, 0, freeMemoryPointer, 100, 0, 0)\\n        }\\n\\n        require(didLastOptionalReturnCallSucceed(callStatus), \\\"TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool callStatus;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata to memory piece by piece:\\n            mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000) // Begin with the function selector.\\n            mstore(add(freeMemoryPointer, 4), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Mask and append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Finally append the \\\"amount\\\" argument. No mask as it's a full 32 byte value.\\n\\n            // Call the token and store if it succeeded or not.\\n            // We use 68 because the calldata length is 4 + 32 * 2.\\n            callStatus := call(gas(), token, 0, freeMemoryPointer, 68, 0, 0)\\n        }\\n\\n        require(didLastOptionalReturnCallSucceed(callStatus), \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeApprove(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool callStatus;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata to memory piece by piece:\\n            mstore(freeMemoryPointer, 0x095ea7b300000000000000000000000000000000000000000000000000000000) // Begin with the function selector.\\n            mstore(add(freeMemoryPointer, 4), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Mask and append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Finally append the \\\"amount\\\" argument. No mask as it's a full 32 byte value.\\n\\n            // Call the token and store if it succeeded or not.\\n            // We use 68 because the calldata length is 4 + 32 * 2.\\n            callStatus := call(gas(), token, 0, freeMemoryPointer, 68, 0, 0)\\n        }\\n\\n        require(didLastOptionalReturnCallSucceed(callStatus), \\\"APPROVE_FAILED\\\");\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                         INTERNAL HELPER LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function didLastOptionalReturnCallSucceed(bool callStatus) private pure returns (bool success) {\\n        assembly {\\n            // Get how many bytes the call returned.\\n            let returnDataSize := returndatasize()\\n\\n            // If the call reverted:\\n            if iszero(callStatus) {\\n                // Copy the revert message into memory.\\n                returndatacopy(0, 0, returnDataSize)\\n\\n                // Revert with the same message.\\n                revert(0, returnDataSize)\\n            }\\n\\n            switch returnDataSize\\n            case 32 {\\n                // Copy the return data into memory.\\n                returndatacopy(0, 0, returnDataSize)\\n\\n                // Set success to whether it returned true.\\n                success := iszero(iszero(mload(0)))\\n            }\\n            case 0 {\\n                // There was no return data.\\n                success := 1\\n            }\\n            default {\\n                // It returned some malformed input.\\n                success := 0\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcc39d0f5693925ea1e8c517f7cc24211a9899c83a57e62d806180cdb056b6b75\",\"license\":\"AGPL-3.0-only\"},\"@sense-finance/v1-core/src/Divider.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.11;\\n\\n// External references\\nimport { Pausable } from \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport { ERC20 } from \\\"@rari-capital/solmate/src/tokens/ERC20.sol\\\";\\nimport { SafeTransferLib } from \\\"@rari-capital/solmate/src/utils/SafeTransferLib.sol\\\";\\nimport { ReentrancyGuard } from \\\"@rari-capital/solmate/src/utils/ReentrancyGuard.sol\\\";\\nimport { DateTime } from \\\"./external/DateTime.sol\\\";\\nimport { FixedMath } from \\\"./external/FixedMath.sol\\\";\\n\\n// Internal references\\nimport { Errors } from \\\"@sense-finance/v1-utils/src/libs/Errors.sol\\\";\\n\\nimport { Levels } from \\\"@sense-finance/v1-utils/src/libs/Levels.sol\\\";\\nimport { Trust } from \\\"@sense-finance/v1-utils/src/Trust.sol\\\";\\nimport { YT } from \\\"./tokens/YT.sol\\\";\\nimport { Token } from \\\"./tokens/Token.sol\\\";\\nimport { BaseAdapter as Adapter } from \\\"./adapters/BaseAdapter.sol\\\";\\n\\n/// @title Sense Divider: Divide Assets in Two\\n/// @author fedealconada + jparklev\\n/// @notice You can use this contract to issue, combine, and redeem Sense ERC20 Principal and Yield Tokens\\ncontract Divider is Trust, ReentrancyGuard, Pausable {\\n    using SafeTransferLib for ERC20;\\n    using FixedMath for uint256;\\n    using Levels for uint256;\\n\\n    /* ========== PUBLIC CONSTANTS ========== */\\n\\n    /// @notice Buffer before and after the actual maturity in which only the sponsor can settle the Series\\n    uint256 public constant SPONSOR_WINDOW = 3 hours;\\n\\n    /// @notice Buffer after the sponsor window in which anyone can settle the Series\\n    uint256 public constant SETTLEMENT_WINDOW = 3 hours;\\n\\n    /// @notice 5% issuance fee cap\\n    uint256 public constant ISSUANCE_FEE_CAP = 0.05e18;\\n\\n    /* ========== PUBLIC MUTABLE STORAGE ========== */\\n\\n    address public periphery;\\n\\n    /// @notice Sense community multisig\\n    address public immutable cup;\\n\\n    /// @notice Principal/Yield tokens deployer\\n    address public immutable tokenHandler;\\n\\n    /// @notice Permissionless flag\\n    bool public permissionless;\\n\\n    /// @notice Guarded launch flag\\n    bool public guarded = true;\\n\\n    /// @notice Number of adapters (including turned off)\\n    uint248 public adapterCounter;\\n\\n    /// @notice adapter ID -> adapter address\\n    mapping(uint256 => address) public adapterAddresses;\\n\\n    /// @notice adapter data\\n    mapping(address => AdapterMeta) public adapterMeta;\\n\\n    /// @notice adapter -> maturity -> Series\\n    mapping(address => mapping(uint256 => Series)) public series;\\n\\n    /// @notice adapter -> maturity -> user -> lscale (last scale)\\n    mapping(address => mapping(uint256 => mapping(address => uint256))) public lscales;\\n\\n    /* ========== DATA STRUCTURES ========== */\\n\\n    struct Series {\\n        // Principal ERC20 token\\n        address pt;\\n        // Timestamp of series initialization\\n        uint48 issuance;\\n        // Yield ERC20 token\\n        address yt;\\n        // % of underlying principal initially reserved for Yield\\n        uint96 tilt;\\n        // Actor who initialized the Series\\n        address sponsor;\\n        // Tracks fees due to the series' settler\\n        uint256 reward;\\n        // Scale at issuance\\n        uint256 iscale;\\n        // Scale at maturity\\n        uint256 mscale;\\n        // Max scale value from this series' lifetime\\n        uint256 maxscale;\\n    }\\n\\n    struct AdapterMeta {\\n        // Adapter ID\\n        uint248 id;\\n        // Adapter enabled/disabled\\n        bool enabled;\\n        // Max amount of Target allowed to be issued\\n        uint256 guard;\\n        // Adapter level\\n        uint248 level;\\n    }\\n\\n    constructor(address _cup, address _tokenHandler) Trust(msg.sender) {\\n        cup = _cup;\\n        tokenHandler = _tokenHandler;\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n    /// @notice Enable an adapter\\n    /// @dev when permissionless is disabled, only the Periphery can onboard adapters\\n    /// @dev after permissionless is enabled, anyone can onboard adapters\\n    /// @param adapter Adapter's address\\n    function addAdapter(address adapter) external whenNotPaused {\\n        if (!permissionless && msg.sender != periphery) revert Errors.OnlyPermissionless();\\n        if (adapterMeta[adapter].id > 0 && !adapterMeta[adapter].enabled) revert Errors.InvalidAdapter();\\n        _setAdapter(adapter, true);\\n    }\\n\\n    /// @notice Initializes a new Series\\n    /// @dev Deploys two ERC20 contracts, one for PTs and the other one for YTs\\n    /// @dev Transfers some fixed amount of stake asset to this contract\\n    /// @param adapter Adapter to associate with the Series\\n    /// @param maturity Maturity date for the new Series, in units of unix time\\n    /// @param sponsor Sponsor of the Series that puts up a token stake and receives the issuance fees\\n    function initSeries(\\n        address adapter,\\n        uint256 maturity,\\n        address sponsor\\n    ) external nonReentrant whenNotPaused returns (address pt, address yt) {\\n        if (periphery != msg.sender) revert Errors.OnlyPeriphery();\\n        if (!adapterMeta[adapter].enabled) revert Errors.InvalidAdapter();\\n        if (_exists(adapter, maturity)) revert Errors.DuplicateSeries();\\n        if (!_isValid(adapter, maturity)) revert Errors.InvalidMaturity();\\n\\n        // Transfer stake asset stake from caller to adapter\\n        (address target, address stake, uint256 stakeSize) = Adapter(adapter).getStakeAndTarget();\\n\\n        // Deploy Principal & Yield Tokens for this new Series\\n        (pt, yt) = TokenHandler(tokenHandler).deploy(adapter, adapterMeta[adapter].id, maturity);\\n\\n        // Initialize the new Series struct\\n        uint256 scale = Adapter(adapter).scale();\\n\\n        series[adapter][maturity].pt = pt;\\n        series[adapter][maturity].issuance = uint48(block.timestamp);\\n        series[adapter][maturity].yt = yt;\\n        series[adapter][maturity].tilt = uint96(Adapter(adapter).tilt());\\n        series[adapter][maturity].sponsor = sponsor;\\n        series[adapter][maturity].iscale = scale;\\n        series[adapter][maturity].maxscale = scale;\\n\\n        ERC20(stake).safeTransferFrom(msg.sender, adapter, stakeSize);\\n\\n        emit SeriesInitialized(adapter, maturity, pt, yt, sponsor, target);\\n    }\\n\\n    /// @notice Settles a Series and transfers the settlement reward to the caller\\n    /// @dev The Series' sponsor has a grace period where only they can settle the Series\\n    /// @dev After that, the reward becomes MEV\\n    /// @param adapter Adapter to associate with the Series\\n    /// @param maturity Maturity date for the new Series\\n    function settleSeries(address adapter, uint256 maturity) external nonReentrant whenNotPaused {\\n        if (!adapterMeta[adapter].enabled) revert Errors.InvalidAdapter();\\n        if (!_exists(adapter, maturity)) revert Errors.SeriesDoesNotExist();\\n        if (_settled(adapter, maturity)) revert Errors.AlreadySettled();\\n        if (!_canBeSettled(adapter, maturity)) revert Errors.OutOfWindowBoundaries();\\n\\n        // The maturity scale value is all a Series needs for us to consider it \\\"settled\\\"\\n        uint256 mscale = Adapter(adapter).scale();\\n        series[adapter][maturity].mscale = mscale;\\n\\n        if (mscale > series[adapter][maturity].maxscale) {\\n            series[adapter][maturity].maxscale = mscale;\\n        }\\n\\n        // Reward the caller for doing the work of settling the Series at around the correct time\\n        (address target, address stake, uint256 stakeSize) = Adapter(adapter).getStakeAndTarget();\\n        ERC20(target).safeTransferFrom(adapter, msg.sender, series[adapter][maturity].reward);\\n        ERC20(stake).safeTransferFrom(adapter, msg.sender, stakeSize);\\n\\n        emit SeriesSettled(adapter, maturity, msg.sender);\\n    }\\n\\n    /// @notice Mint Principal & Yield Tokens of a specific Series\\n    /// @param adapter Adapter address for the Series\\n    /// @param maturity Maturity date for the Series [unix time]\\n    /// @param tBal Balance of Target to deposit\\n    /// @dev The balance of PTs and YTs minted will be the same value in units of underlying (less fees)\\n    function issue(\\n        address adapter,\\n        uint256 maturity,\\n        uint256 tBal\\n    ) external nonReentrant whenNotPaused returns (uint256 uBal) {\\n        if (!adapterMeta[adapter].enabled) revert Errors.InvalidAdapter();\\n        if (!_exists(adapter, maturity)) revert Errors.SeriesDoesNotExist();\\n        if (_settled(adapter, maturity)) revert Errors.IssueOnSettle();\\n\\n        uint256 level = adapterMeta[adapter].level;\\n        if (level.issueRestricted() && msg.sender != adapter) revert Errors.IssuanceRestricted();\\n\\n        ERC20 target = ERC20(Adapter(adapter).target());\\n\\n        // Take the issuance fee out of the deposited Target, and put it towards the settlement reward\\n        uint256 issuanceFee = Adapter(adapter).ifee();\\n        if (issuanceFee > ISSUANCE_FEE_CAP) revert Errors.IssuanceFeeCapExceeded();\\n        uint256 fee = tBal.fmul(issuanceFee);\\n\\n        unchecked {\\n            // Safety: bounded by the Target's total token supply\\n            series[adapter][maturity].reward += fee;\\n        }\\n        uint256 tBalSubFee = tBal - fee;\\n\\n        // Ensure the caller won't hit the issuance cap with this action\\n        unchecked {\\n            // Safety: bounded by the Target's total token supply\\n            if (guarded && target.balanceOf(adapter) + tBal > adapterMeta[address(adapter)].guard)\\n                revert Errors.GuardCapReached();\\n        }\\n\\n        // Update values on adapter\\n        Adapter(adapter).notify(msg.sender, tBalSubFee, true);\\n\\n        uint256 scale = level.collectDisabled() ? series[adapter][maturity].iscale : Adapter(adapter).scale();\\n\\n        // Determine the amount of Underlying equal to the Target being sent in (the principal)\\n        uBal = tBalSubFee.fmul(scale);\\n\\n        // If the caller has not collected on YT before, use the current scale, otherwise\\n        // use the harmonic mean of the last and the current scale value\\n        lscales[adapter][maturity][msg.sender] = lscales[adapter][maturity][msg.sender] == 0\\n            ? scale\\n            : _reweightLScale(\\n                adapter,\\n                maturity,\\n                YT(series[adapter][maturity].yt).balanceOf(msg.sender),\\n                uBal,\\n                msg.sender,\\n                scale\\n            );\\n\\n        // Mint equal amounts of PT and YT\\n        Token(series[adapter][maturity].pt).mint(msg.sender, uBal);\\n        YT(series[adapter][maturity].yt).mint(msg.sender, uBal);\\n\\n        target.safeTransferFrom(msg.sender, adapter, tBal);\\n\\n        emit Issued(adapter, maturity, uBal, msg.sender);\\n    }\\n\\n    /// @notice Reconstitute Target by burning PT and YT\\n    /// @dev Explicitly burns YTs before maturity, and implicitly does it at/after maturity through `_collect()`\\n    /// @param adapter Adapter address for the Series\\n    /// @param maturity Maturity date for the Series\\n    /// @param uBal Balance of PT and YT to burn\\n    function combine(\\n        address adapter,\\n        uint256 maturity,\\n        uint256 uBal\\n    ) external nonReentrant whenNotPaused returns (uint256 tBal) {\\n        if (!adapterMeta[adapter].enabled) revert Errors.InvalidAdapter();\\n        if (!_exists(adapter, maturity)) revert Errors.SeriesDoesNotExist();\\n\\n        uint256 level = adapterMeta[adapter].level;\\n        if (level.combineRestricted() && msg.sender != adapter) revert Errors.CombineRestricted();\\n\\n        // Burn the PT\\n        Token(series[adapter][maturity].pt).burn(msg.sender, uBal);\\n\\n        // Collect whatever excess is due\\n        uint256 collected = _collect(msg.sender, adapter, maturity, uBal, uBal, address(0));\\n\\n        uint256 cscale = series[adapter][maturity].mscale;\\n        bool settled = _settled(adapter, maturity);\\n        if (!settled) {\\n            // If it's not settled, then YT won't be burned automatically in `_collect()`\\n            YT(series[adapter][maturity].yt).burn(msg.sender, uBal);\\n            // If collect has been restricted, use the initial scale, otherwise use the current scale\\n            cscale = level.collectDisabled()\\n                ? series[adapter][maturity].iscale\\n                : lscales[adapter][maturity][msg.sender];\\n        }\\n\\n        // Convert from units of Underlying to units of Target\\n        tBal = uBal.fdiv(cscale);\\n        ERC20(Adapter(adapter).target()).safeTransferFrom(adapter, msg.sender, tBal);\\n\\n        // Notify only when Series is not settled as when it is, the _collect() call above would trigger a _redeemYT which will call notify\\n        if (!settled) Adapter(adapter).notify(msg.sender, tBal, false);\\n        unchecked {\\n            // Safety: bounded by the Target's total token supply\\n            tBal += collected;\\n        }\\n        emit Combined(adapter, maturity, tBal, msg.sender);\\n    }\\n\\n    /// @notice Burn PT of a Series once it's been settled\\n    /// @dev The balance of redeemable Target is a function of the change in Scale\\n    /// @param adapter Adapter address for the Series\\n    /// @param maturity Maturity date for the Series\\n    /// @param uBal Amount of PT to burn, which should be equivalent to the amount of Underlying owed to the caller\\n    function redeem(\\n        address adapter,\\n        uint256 maturity,\\n        uint256 uBal\\n    ) external nonReentrant whenNotPaused returns (uint256 tBal) {\\n        // If a Series is settled, we know that it must have existed as well, so that check is unnecessary\\n        if (!_settled(adapter, maturity)) revert Errors.NotSettled();\\n\\n        uint256 level = adapterMeta[adapter].level;\\n        if (level.redeemRestricted() && msg.sender == adapter) revert Errors.RedeemRestricted();\\n\\n        // Burn the caller's PT\\n        Token(series[adapter][maturity].pt).burn(msg.sender, uBal);\\n\\n        // Principal Token holder's share of the principal = (1 - part of the principal that belongs to Yield)\\n        uint256 zShare = FixedMath.WAD - series[adapter][maturity].tilt;\\n\\n        // If Principal Token are at a loss and Yield have some principal to help cover the shortfall,\\n        // take what we can from Yield Token's principal\\n        if (series[adapter][maturity].mscale.fdiv(series[adapter][maturity].maxscale) >= zShare) {\\n            tBal = (uBal * zShare) / series[adapter][maturity].mscale;\\n        } else {\\n            tBal = uBal.fdiv(series[adapter][maturity].maxscale);\\n        }\\n\\n        if (!level.redeemHookDisabled()) {\\n            Adapter(adapter).onRedeem(uBal, series[adapter][maturity].mscale, series[adapter][maturity].maxscale, tBal);\\n        }\\n\\n        ERC20(Adapter(adapter).target()).safeTransferFrom(adapter, msg.sender, tBal);\\n        emit PTRedeemed(adapter, maturity, tBal);\\n    }\\n\\n    function collect(\\n        address usr,\\n        address adapter,\\n        uint256 maturity,\\n        uint256 uBalTransfer,\\n        address to\\n    ) external nonReentrant onlyYT(adapter, maturity) whenNotPaused returns (uint256 collected) {\\n        uint256 uBal = YT(msg.sender).balanceOf(usr);\\n        return _collect(usr, adapter, maturity, uBal, uBalTransfer > 0 ? uBalTransfer : uBal, to);\\n    }\\n\\n    /// @notice Collect YT excess before, at, or after maturity\\n    /// @dev If `to` is set, we copy the lscale value from usr to this address\\n    /// @param usr User who's collecting for their YTs\\n    /// @param adapter Adapter address for the Series\\n    /// @param maturity Maturity date for the Series\\n    /// @param uBal yield Token balance\\n    /// @param uBalTransfer original transfer value\\n    /// @param to address to set the lscale value from usr\\n    function _collect(\\n        address usr,\\n        address adapter,\\n        uint256 maturity,\\n        uint256 uBal,\\n        uint256 uBalTransfer,\\n        address to\\n    ) internal returns (uint256 collected) {\\n        if (!_exists(adapter, maturity)) revert Errors.SeriesDoesNotExist();\\n\\n        // If the adapter is disabled, its Yield Token can only collect\\n        // if associated Series has been settled, which implies that an admin\\n        // has backfilled it\\n        if (!adapterMeta[adapter].enabled && !_settled(adapter, maturity)) revert Errors.InvalidAdapter();\\n\\n        Series memory _series = series[adapter][maturity];\\n\\n        // Get the scale value from the last time this holder collected (default to maturity)\\n        uint256 lscale = lscales[adapter][maturity][usr];\\n\\n        uint256 level = adapterMeta[adapter].level;\\n        if (level.collectDisabled()) {\\n            // If this Series has been settled, we ensure everyone's YT will\\n            // collect yield accrued since issuance\\n            if (_settled(adapter, maturity)) {\\n                lscale = series[adapter][maturity].iscale;\\n                // If the Series is not settled, we ensure no collections can happen\\n            } else {\\n                return 0;\\n            }\\n        }\\n\\n        // If the Series has been settled, this should be their last collect, so redeem the user's Yield Tokens for them\\n        if (_settled(adapter, maturity)) {\\n            _redeemYT(usr, adapter, maturity, uBal);\\n        } else {\\n            // If we're not settled and we're past maturity + the sponsor window,\\n            // anyone can settle this Series so revert until someone does\\n            if (block.timestamp > maturity + SPONSOR_WINDOW) {\\n                revert Errors.CollectNotSettled();\\n                // Otherwise, this is a valid pre-settlement collect and we need to determine the scale value\\n            } else {\\n                uint256 cscale = Adapter(adapter).scale();\\n                // If this is larger than the largest scale we've seen for this Series, use it\\n                if (cscale > _series.maxscale) {\\n                    _series.maxscale = cscale;\\n                    lscales[adapter][maturity][usr] = cscale;\\n                    // If not, use the previously noted max scale value\\n                } else {\\n                    lscales[adapter][maturity][usr] = _series.maxscale;\\n                }\\n            }\\n        }\\n\\n        // Determine how much underlying has accrued since the last time this user collected, in units of Target.\\n        // (Or take the last time as issuance if they haven't yet)\\n        //\\n        // Reminder: `Underlying / Scale = Target`\\n        // So the following equation is saying, for some amount of Underlying `u`:\\n        // \\\"Balance of Target that equaled `u` at the last collection _minus_ Target that equals `u` now\\\"\\n        //\\n        // Because maxscale must be increasing, the Target balance needed to equal `u` decreases, and that \\\"excess\\\"\\n        // is what Yield holders are collecting\\n        uint256 tBalNow = uBal.fdivUp(_series.maxscale); // preventive round-up towards the protocol\\n        uint256 tBalPrev = uBal.fdiv(lscale);\\n        unchecked {\\n            collected = tBalPrev > tBalNow ? tBalPrev - tBalNow : 0;\\n        }\\n        ERC20(Adapter(adapter).target()).safeTransferFrom(adapter, usr, collected);\\n        Adapter(adapter).notify(usr, collected, false); // Distribute reward tokens\\n\\n        // If this collect is a part of a token transfer to another address, set the receiver's\\n        // last collection to a synthetic scale weighted based on the scale on their last collect,\\n        // the time elapsed, and the current scale\\n        if (to != address(0)) {\\n            uint256 ytBal = YT(_series.yt).balanceOf(to);\\n            // If receiver holds yields, we set lscale to a computed \\\"synthetic\\\" lscales value that,\\n            // for the updated yield balance, still assigns the correct amount of yield.\\n            lscales[adapter][maturity][to] = ytBal > 0\\n                ? _reweightLScale(adapter, maturity, ytBal, uBalTransfer, to, _series.maxscale)\\n                : _series.maxscale;\\n            uint256 tBalTransfer = uBalTransfer.fdiv(_series.maxscale);\\n            Adapter(adapter).notify(usr, tBalTransfer, false);\\n            Adapter(adapter).notify(to, tBalTransfer, true);\\n        }\\n        series[adapter][maturity] = _series;\\n\\n        emit Collected(adapter, maturity, collected);\\n    }\\n\\n    /// @notice calculate the harmonic mean of the current scale and the last scale,\\n    /// weighted by amounts associated with each\\n    function _reweightLScale(\\n        address adapter,\\n        uint256 maturity,\\n        uint256 ytBal,\\n        uint256 uBal,\\n        address receiver,\\n        uint256 scale\\n    ) internal view returns (uint256) {\\n        // Target Decimals * 18 Decimals [from fdiv] / (Target Decimals * 18 Decimals [from fdiv] / 18 Decimals)\\n        // = 18 Decimals, which is the standard for scale values\\n        return (ytBal + uBal).fdiv((ytBal.fdiv(lscales[adapter][maturity][receiver]) + uBal.fdiv(scale)));\\n    }\\n\\n    function _redeemYT(\\n        address usr,\\n        address adapter,\\n        uint256 maturity,\\n        uint256 uBal\\n    ) internal {\\n        // Burn the users's YTs\\n        YT(series[adapter][maturity].yt).burn(usr, uBal);\\n\\n        // Default principal for a YT\\n        uint256 tBal = 0;\\n\\n        // Principal Token holder's share of the principal = (1 - part of the principal that belongs to Yield Tokens)\\n        uint256 zShare = FixedMath.WAD - series[adapter][maturity].tilt;\\n\\n        // If PTs are at a loss and YTs had their principal cut to help cover the shortfall,\\n        // calculate how much YTs have left\\n        if (series[adapter][maturity].mscale.fdiv(series[adapter][maturity].maxscale) >= zShare) {\\n            tBal = uBal.fdiv(series[adapter][maturity].maxscale) - (uBal * zShare) / series[adapter][maturity].mscale;\\n            ERC20(Adapter(adapter).target()).safeTransferFrom(adapter, usr, tBal);\\n        }\\n\\n        // Always notify the Adapter of the full Target balance that will no longer\\n        // have its rewards distributed\\n        Adapter(adapter).notify(usr, uBal.fdivUp(series[adapter][maturity].maxscale), false);\\n\\n        emit YTRedeemed(adapter, maturity, tBal);\\n    }\\n\\n    /* ========== ADMIN ========== */\\n\\n    /// @notice Enable or disable a adapter\\n    /// @param adapter Adapter's address\\n    /// @param isOn Flag setting this adapter to enabled or disabled\\n    function setAdapter(address adapter, bool isOn) public requiresTrust {\\n        _setAdapter(adapter, isOn);\\n    }\\n\\n    /// @notice Set adapter's guard\\n    /// @param adapter Adapter address\\n    /// @param cap The max target that can be deposited on the Adapter\\n    function setGuard(address adapter, uint256 cap) external requiresTrust {\\n        adapterMeta[adapter].guard = cap;\\n        emit GuardChanged(adapter, cap);\\n    }\\n\\n    /// @notice Set guarded mode\\n    /// @param _guarded bool\\n    function setGuarded(bool _guarded) external requiresTrust {\\n        guarded = _guarded;\\n        emit GuardedChanged(_guarded);\\n    }\\n\\n    /// @notice Set periphery's contract\\n    /// @param _periphery Target address\\n    function setPeriphery(address _periphery) external requiresTrust {\\n        periphery = _periphery;\\n        emit PeripheryChanged(_periphery);\\n    }\\n\\n    /// @notice Set paused flag\\n    /// @param _paused boolean\\n    function setPaused(bool _paused) external requiresTrust {\\n        _paused ? _pause() : _unpause();\\n    }\\n\\n    /// @notice Set permissioless mode\\n    /// @param _permissionless bool\\n    function setPermissionless(bool _permissionless) external requiresTrust {\\n        permissionless = _permissionless;\\n        emit PermissionlessChanged(_permissionless);\\n    }\\n\\n    /// @notice Backfill a Series' Scale value at maturity if keepers failed to settle it\\n    /// @param adapter Adapter's address\\n    /// @param maturity Maturity date for the Series\\n    /// @param mscale Value to set as the Series' Scale value at maturity\\n    /// @param _usrs Values to set on lscales mapping\\n    /// @param _lscales Values to set on lscales mapping\\n    function backfillScale(\\n        address adapter,\\n        uint256 maturity,\\n        uint256 mscale,\\n        address[] calldata _usrs,\\n        uint256[] calldata _lscales\\n    ) external requiresTrust {\\n        if (!_exists(adapter, maturity)) revert Errors.SeriesDoesNotExist();\\n\\n        uint256 cutoff = maturity + SPONSOR_WINDOW + SETTLEMENT_WINDOW;\\n        // Admin can never backfill before maturity\\n        if (block.timestamp <= cutoff) revert Errors.OutOfWindowBoundaries();\\n\\n        // Set user's last scale values the Series (needed for the `collect` method)\\n        for (uint256 i = 0; i < _usrs.length; i++) {\\n            lscales[adapter][maturity][_usrs[i]] = _lscales[i];\\n        }\\n\\n        if (mscale > 0) {\\n            Series memory _series = series[adapter][maturity];\\n            // Set the maturity scale for the Series (needed for `redeem` methods)\\n            series[adapter][maturity].mscale = mscale;\\n            if (mscale > _series.maxscale) {\\n                series[adapter][maturity].maxscale = mscale;\\n            }\\n\\n            (address target, address stake, uint256 stakeSize) = Adapter(adapter).getStakeAndTarget();\\n\\n            address stakeDst = adapterMeta[adapter].enabled ? cup : _series.sponsor;\\n            ERC20(target).safeTransferFrom(adapter, cup, _series.reward);\\n            series[adapter][maturity].reward = 0;\\n            ERC20(stake).safeTransferFrom(adapter, stakeDst, stakeSize);\\n        }\\n\\n        emit Backfilled(adapter, maturity, mscale, _usrs, _lscales);\\n    }\\n\\n    /* ========== INTERNAL VIEWS ========== */\\n\\n    function _exists(address adapter, uint256 maturity) internal view returns (bool) {\\n        return series[adapter][maturity].pt != address(0);\\n    }\\n\\n    function _settled(address adapter, uint256 maturity) internal view returns (bool) {\\n        return series[adapter][maturity].mscale > 0;\\n    }\\n\\n    function _canBeSettled(address adapter, uint256 maturity) internal view returns (bool) {\\n        uint256 cutoff = maturity + SPONSOR_WINDOW + SETTLEMENT_WINDOW;\\n        // If the sender is the sponsor for the Series\\n        if (msg.sender == series[adapter][maturity].sponsor) {\\n            return maturity - SPONSOR_WINDOW <= block.timestamp && cutoff >= block.timestamp;\\n        } else {\\n            return maturity + SPONSOR_WINDOW < block.timestamp && cutoff >= block.timestamp;\\n        }\\n    }\\n\\n    function _isValid(address adapter, uint256 maturity) internal view returns (bool) {\\n        (uint256 minm, uint256 maxm) = Adapter(adapter).getMaturityBounds();\\n        if (maturity < block.timestamp + minm || maturity > block.timestamp + maxm) return false;\\n        (, , uint256 day, uint256 hour, uint256 minute, uint256 second) = DateTime.timestampToDateTime(maturity);\\n\\n        if (hour != 0 || minute != 0 || second != 0) return false;\\n        uint256 mode = Adapter(adapter).mode();\\n        if (mode == 0) {\\n            return day == 1;\\n        }\\n        if (mode == 1) {\\n            return DateTime.getDayOfWeek(maturity) == 1;\\n        }\\n        return false;\\n    }\\n\\n    /* ========== INTERNAL UTILS ========== */\\n\\n    function _setAdapter(address adapter, bool isOn) internal {\\n        AdapterMeta memory am = adapterMeta[adapter];\\n        if (am.enabled == isOn) revert Errors.ExistingValue();\\n        am.enabled = isOn;\\n\\n        // If this adapter is being added for the first time\\n        if (isOn && am.id == 0) {\\n            am.id = ++adapterCounter;\\n            adapterAddresses[am.id] = adapter;\\n        }\\n\\n        // Set level and target (can only be done once);\\n        am.level = uint248(Adapter(adapter).level());\\n        adapterMeta[adapter] = am;\\n        emit AdapterChanged(adapter, am.id, isOn);\\n    }\\n\\n    /* ========== PUBLIC GETTERS ========== */\\n\\n    /// @notice Returns address of Principal Token\\n    function pt(address adapter, uint256 maturity) public view returns (address) {\\n        return series[adapter][maturity].pt;\\n    }\\n\\n    /// @notice Returns address of Yield Token\\n    function yt(address adapter, uint256 maturity) public view returns (address) {\\n        return series[adapter][maturity].yt;\\n    }\\n\\n    function mscale(address adapter, uint256 maturity) public view returns (uint256) {\\n        return series[adapter][maturity].mscale;\\n    }\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    modifier onlyYT(address adapter, uint256 maturity) {\\n        if (series[adapter][maturity].yt != msg.sender) revert Errors.OnlyYT();\\n        _;\\n    }\\n\\n    /* ========== LOGS ========== */\\n\\n    /// @notice Admin\\n    event Backfilled(\\n        address indexed adapter,\\n        uint256 indexed maturity,\\n        uint256 mscale,\\n        address[] _usrs,\\n        uint256[] _lscales\\n    );\\n    event GuardChanged(address indexed adapter, uint256 cap);\\n    event AdapterChanged(address indexed adapter, uint256 indexed id, bool indexed isOn);\\n    event PeripheryChanged(address indexed periphery);\\n\\n    /// @notice Series lifecycle\\n    /// *---- beginning\\n    event SeriesInitialized(\\n        address adapter,\\n        uint256 indexed maturity,\\n        address pt,\\n        address yt,\\n        address indexed sponsor,\\n        address indexed target\\n    );\\n    /// -***- middle\\n    event Issued(address indexed adapter, uint256 indexed maturity, uint256 balance, address indexed sender);\\n    event Combined(address indexed adapter, uint256 indexed maturity, uint256 balance, address indexed sender);\\n    event Collected(address indexed adapter, uint256 indexed maturity, uint256 collected);\\n    /// ----* end\\n    event SeriesSettled(address indexed adapter, uint256 indexed maturity, address indexed settler);\\n    event PTRedeemed(address indexed adapter, uint256 indexed maturity, uint256 redeemed);\\n    event YTRedeemed(address indexed adapter, uint256 indexed maturity, uint256 redeemed);\\n    /// *----* misc\\n    event GuardedChanged(bool indexed guarded);\\n    event PermissionlessChanged(bool indexed permissionless);\\n}\\n\\ncontract TokenHandler is Trust {\\n    /// @notice Program state\\n    address public divider;\\n\\n    constructor() Trust(msg.sender) {}\\n\\n    function init(address _divider) external requiresTrust {\\n        if (divider != address(0)) revert Errors.AlreadyInitialized();\\n        divider = _divider;\\n    }\\n\\n    function deploy(\\n        address adapter,\\n        uint248 id,\\n        uint256 maturity\\n    ) external returns (address pt, address yt) {\\n        if (msg.sender != divider) revert Errors.OnlyDivider();\\n\\n        ERC20 target = ERC20(Adapter(adapter).target());\\n        uint8 decimals = target.decimals();\\n        string memory symbol = target.symbol();\\n        (string memory d, string memory m, string memory y) = DateTime.toDateString(maturity);\\n        string memory date = DateTime.format(maturity);\\n        string memory datestring = string(abi.encodePacked(d, \\\"-\\\", m, \\\"-\\\", y));\\n        string memory adapterId = DateTime.uintToString(id);\\n        pt = address(\\n            new Token(\\n                string(abi.encodePacked(date, \\\" \\\", symbol, \\\" Sense Principal Token, A\\\", adapterId)),\\n                string(abi.encodePacked(\\\"sP-\\\", symbol, \\\":\\\", datestring, \\\":\\\", adapterId)),\\n                decimals,\\n                divider\\n            )\\n        );\\n\\n        yt = address(\\n            new YT(\\n                adapter,\\n                maturity,\\n                string(abi.encodePacked(date, \\\" \\\", symbol, \\\" Sense Yield Token, A\\\", adapterId)),\\n                string(abi.encodePacked(\\\"sY-\\\", symbol, \\\":\\\", datestring, \\\":\\\", adapterId)),\\n                decimals,\\n                divider\\n            )\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xaf04d3cfaf810f56e6d21e940325c468b119f5ba580a601c0f52fc630a115e2d\",\"license\":\"AGPL-3.0-only\"},\"@sense-finance/v1-core/src/adapters/BaseAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.11;\\n\\n// External references\\nimport { ERC20 } from \\\"@rari-capital/solmate/src/tokens/ERC20.sol\\\";\\nimport { SafeTransferLib } from \\\"@rari-capital/solmate/src/utils/SafeTransferLib.sol\\\";\\nimport { IERC3156FlashLender } from \\\"../external/flashloan/IERC3156FlashLender.sol\\\";\\nimport { IERC3156FlashBorrower } from \\\"../external/flashloan/IERC3156FlashBorrower.sol\\\";\\n\\n// Internal references\\nimport { Divider } from \\\"../Divider.sol\\\";\\nimport { Errors } from \\\"@sense-finance/v1-utils/src/libs/Errors.sol\\\";\\n\\n/// @title Assign value to Target tokens\\nabstract contract BaseAdapter is IERC3156FlashLender {\\n    using SafeTransferLib for ERC20;\\n\\n    /* ========== CONSTANTS ========== */\\n\\n    bytes32 public constant CALLBACK_SUCCESS = keccak256(\\\"ERC3156FlashBorrower.onFlashLoan\\\");\\n\\n    /* ========== PUBLIC IMMUTABLES ========== */\\n\\n    /// @notice Sense core Divider address\\n    address public immutable divider;\\n\\n    /// @notice Target token to divide\\n    address public immutable target;\\n\\n    /// @notice Underlying for the Target\\n    address public immutable underlying;\\n\\n    /// @notice Oracle address\\n    address public immutable oracle;\\n\\n    /// @notice Token to stake at issuance\\n    address public immutable stake;\\n\\n    /// @notice Amount to stake at issuance\\n    uint256 public immutable stakeSize;\\n\\n    /// @notice Min maturity (seconds after block.timstamp)\\n    uint256 public immutable minm;\\n\\n    /// @notice Max maturity (seconds after block.timstamp)\\n    uint256 public immutable maxm;\\n\\n    /// @notice 0 for monthly, 1 for weekly\\n    uint256 public immutable mode;\\n\\n    /// @notice Issuance fee\\n    uint256 public immutable ifee;\\n\\n    /// @notice WAD number representing the percentage of the total\\n    /// principal that's set aside for Yield Tokens (e.g. 0.1e18 means that 10% of the principal is reserved).\\n    /// @notice If `0`, it means no principal is set aside for Yield Tokens\\n    uint256 public immutable tilt;\\n\\n    /// @notice The number this function returns will be used to determine its access by checking for binary\\n    /// digits using the following scheme:\\u00a0<onRedeem(y/n)><collect(y/n)><combine(y/n)><issue(y/n)>\\n    /// (e.g. 0101 enables `collect` and `issue`, but not `combine`)\\n    uint256 public immutable level;\\n\\n    /* ========== METADATA STORAGE ========== */\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    constructor(\\n        address _divider,\\n        address _target,\\n        address _underlying,\\n        address _oracle,\\n        uint256 _ifee,\\n        address _stake,\\n        uint256 _stakeSize,\\n        uint256 _minm,\\n        uint256 _maxm,\\n        uint256 _mode,\\n        uint256 _tilt,\\n        uint256 _level\\n    ) {\\n        // Sanity check\\n        if (_minm >= _maxm) revert Errors.InvalidMaturityOffsets();\\n        divider = _divider;\\n        target = _target;\\n        underlying = _underlying;\\n        oracle = _oracle;\\n        ifee = _ifee;\\n        stake = _stake;\\n        stakeSize = _stakeSize;\\n        minm = _minm;\\n        maxm = _maxm;\\n        mode = _mode;\\n        tilt = _tilt;\\n        name = string(abi.encodePacked(ERC20(_target).name(), \\\" Adapter\\\"));\\n        symbol = string(abi.encodePacked(ERC20(_target).symbol(), \\\"-adapter\\\"));\\n        level = _level;\\n\\n        ERC20(_target).approve(_divider, type(uint256).max);\\n        ERC20(_stake).approve(_divider, type(uint256).max);\\n    }\\n\\n    /// @notice Loan `amount` target to `receiver`, and takes it back after the callback.\\n    /// @param receiver The contract receiving target, needs to implement the\\n    /// `onFlashLoan(address user, address adapter, uint256 maturity, uint256 amount)` interface.\\n    /// @param amount The amount of target lent.\\n    /// @param data (encoded adapter address, maturity and YT amount the use has sent in)\\n    function flashLoan(\\n        IERC3156FlashBorrower receiver,\\n        address, /* fee */\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (bool) {\\n        if (Divider(divider).periphery() != msg.sender) revert Errors.OnlyPeriphery();\\n        ERC20(target).safeTransfer(address(receiver), amount);\\n        bytes32 keccak = IERC3156FlashBorrower(receiver).onFlashLoan(msg.sender, target, amount, 0, data);\\n        if (keccak != CALLBACK_SUCCESS) revert Errors.FlashCallbackFailed();\\n        ERC20(target).safeTransferFrom(address(receiver), address(this), amount);\\n        return true;\\n    }\\n\\n    /* ========== REQUIRED VALUE GETTERS ========== */\\n\\n    /// @notice Calculate and return this adapter's Scale value for the current timestamp. To be overriden by child contracts\\n    /// @dev For some Targets, such as cTokens, this is simply the exchange rate, or `supply cToken / supply underlying`\\n    /// @dev For other Targets, such as AMM LP shares, specialized logic will be required\\n    /// @dev This function _must_ return a WAD number representing the current exchange rate\\n    /// between the Target and the Underlying.\\n    /// @return value WAD Scale value\\n    function scale() external virtual returns (uint256);\\n\\n    /// @notice Cached scale value getter\\n    /// @dev For situations where you need scale from a view function\\n    function scaleStored() external view virtual returns (uint256);\\n\\n    /// @notice Returns the current price of the underlying in ETH terms\\n    function getUnderlyingPrice() external view virtual returns (uint256);\\n\\n    /* ========== REQUIRED UTILITIES ========== */\\n\\n    /// @notice Deposits underlying `amount`in return for target. Must be overriden by child contracts\\n    /// @param amount Underlying amount\\n    /// @return amount of target returned\\n    function wrapUnderlying(uint256 amount) external virtual returns (uint256);\\n\\n    /// @notice Deposits target `amount`in return for underlying. Must be overriden by child contracts\\n    /// @param amount Target amount\\n    /// @return amount of underlying returned\\n    function unwrapTarget(uint256 amount) external virtual returns (uint256);\\n\\n    function flashFee(address token, uint256) external view returns (uint256) {\\n        if (token != target) revert Errors.TokenNotSupported();\\n        return 0;\\n    }\\n\\n    function maxFlashLoan(address token) external view override returns (uint256) {\\n        return ERC20(token).balanceOf(address(this));\\n    }\\n\\n    /* ========== OPTIONAL HOOKS ========== */\\n\\n    /// @notice Notification whenever the Divider adds or removes Target\\n    function notify(\\n        address, /* usr */\\n        uint256, /* amt */\\n        bool /* join */\\n    ) public virtual {\\n        return;\\n    }\\n\\n    /// @notice Hook called whenever a user redeems PT\\n    function onRedeem(\\n        uint256, /* uBal */\\n        uint256, /* mscale */\\n        uint256, /* maxscale */\\n        uint256 /* tBal */\\n    ) public virtual {\\n        return;\\n    }\\n\\n    /* ========== PUBLIC STORAGE ACCESSORS ========== */\\n\\n    function getMaturityBounds() external view returns (uint256, uint256) {\\n        return (minm, maxm);\\n    }\\n\\n    function getStakeAndTarget()\\n        external\\n        view\\n        returns (\\n            address,\\n            address,\\n            uint256\\n        )\\n    {\\n        return (target, stake, stakeSize);\\n    }\\n}\\n\",\"keccak256\":\"0x34a3995a5be6ea5a462c612db9b9aab742674ed9e653e96f7631063cd4734b25\",\"license\":\"AGPL-3.0-only\"},\"@sense-finance/v1-core/src/external/DateTime.sol\":{\"content\":\"pragma solidity 0.8.11;\\n\\n/// @author Taken from: https://github.com/bokkypoobah/BokkyPooBahsDateTimeLibrary\\nlibrary DateTime {\\n    uint256 constant SECONDS_PER_DAY = 24 * 60 * 60;\\n    uint256 constant SECONDS_PER_HOUR = 60 * 60;\\n    uint256 constant SECONDS_PER_MINUTE = 60;\\n    int256 constant OFFSET19700101 = 2440588;\\n\\n    function timestampToDate(uint256 timestamp)\\n        internal\\n        pure\\n        returns (\\n            uint256 year,\\n            uint256 month,\\n            uint256 day\\n        )\\n    {\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n\\n    function timestampToDateTime(uint256 timestamp)\\n        internal\\n        pure\\n        returns (\\n            uint256 year,\\n            uint256 month,\\n            uint256 day,\\n            uint256 hour,\\n            uint256 minute,\\n            uint256 second\\n        )\\n    {\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        uint256 secs = timestamp % SECONDS_PER_DAY;\\n        hour = secs / SECONDS_PER_HOUR;\\n        secs = secs % SECONDS_PER_HOUR;\\n        minute = secs / SECONDS_PER_MINUTE;\\n        second = secs % SECONDS_PER_MINUTE;\\n    }\\n\\n    function toDateString(uint256 _timestamp)\\n        internal\\n        pure\\n        returns (\\n            string memory d,\\n            string memory m,\\n            string memory y\\n        )\\n    {\\n        (uint256 year, uint256 month, uint256 day) = timestampToDate(_timestamp);\\n        d = uintToString(day);\\n        m = uintToString(month);\\n        y = uintToString(year);\\n        // append a 0 to numbers < 10 so we should, e.g, 01 instead of just 1\\n        if (day < 10) d = string(abi.encodePacked(\\\"0\\\", d));\\n        if (month < 10) m = string(abi.encodePacked(\\\"0\\\", m));\\n    }\\n\\n    function format(uint256 _timestamp) internal pure returns (string memory datestring) {\\n        string[12] memory months = [\\n            \\\"Jan\\\",\\n            \\\"Feb\\\",\\n            \\\"Mar\\\",\\n            \\\"Apr\\\",\\n            \\\"May\\\",\\n            \\\"June\\\",\\n            \\\"July\\\",\\n            \\\"Aug\\\",\\n            \\\"Sept\\\",\\n            \\\"Oct\\\",\\n            \\\"Nov\\\",\\n            \\\"Dec\\\"\\n        ];\\n        (uint256 year, uint256 month, uint256 day) = timestampToDate(_timestamp);\\n        uint256 last = day % 10;\\n        string memory suffix = \\\"th\\\";\\n        if (day < 11 || day > 20) {\\n            if (last == 1) suffix = \\\"st\\\";\\n            if (last == 2) suffix = \\\"nd\\\";\\n            if (last == 3) suffix = \\\"rd\\\";\\n        }\\n        return string(abi.encodePacked(uintToString(day), suffix, \\\" \\\", months[month - 1], \\\" \\\", uintToString(year)));\\n    }\\n\\n    function getDayOfWeek(uint256 timestamp) internal pure returns (uint256 dayOfWeek) {\\n        uint256 _days = timestamp / SECONDS_PER_DAY;\\n        dayOfWeek = ((_days + 3) % 7) + 1;\\n    }\\n\\n    /// Taken from https://stackoverflow.com/questions/47129173/how-to-convert-uint-to-string-in-solidity\\n    function uintToString(uint256 _i) internal pure returns (string memory _uintAsString) {\\n        if (_i == 0) return \\\"0\\\";\\n        uint256 j = _i;\\n        uint256 len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint256 k = len;\\n        while (_i != 0) {\\n            k = k - 1;\\n            uint8 temp = (48 + uint8(_i - (_i / 10) * 10));\\n            bytes1 b1 = bytes1(temp);\\n            bstr[k] = b1;\\n            _i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate the number of days from 1970/01/01 to year/month/day using\\n    // the date conversion algorithm from\\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\n    // and subtracting the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // days = day\\n    //      - 32075\\n    //      + 1461 * (year + 4800 + (month - 14) / 12) / 4\\n    //      + 367 * (month - 2 - (month - 14) / 12 * 12) / 12\\n    //      - 3 * ((year + 4900 + (month - 14) / 12) / 100) / 4\\n    //      - offset\\n    // ------------------------------------------------------------------------\\n    function _daysFromDate(\\n        uint256 year,\\n        uint256 month,\\n        uint256 day\\n    ) internal pure returns (uint256 _days) {\\n        require(year >= 1970);\\n        int256 _year = int256(year);\\n        int256 _month = int256(month);\\n        int256 _day = int256(day);\\n\\n        int256 __days = _day -\\n            32075 +\\n            (1461 * (_year + 4800 + (_month - 14) / 12)) /\\n            4 +\\n            (367 * (_month - 2 - ((_month - 14) / 12) * 12)) /\\n            12 -\\n            (3 * ((_year + 4900 + (_month - 14) / 12) / 100)) /\\n            4 -\\n            OFFSET19700101;\\n\\n        _days = uint256(__days);\\n    }\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate year/month/day from the number of days since 1970/01/01 using\\n    // the date conversion algorithm from\\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\n    // and adding the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // int L = days + 68569 + offset\\n    // int N = 4 * L / 146097\\n    // L = L - (146097 * N + 3) / 4\\n    // year = 4000 * (L + 1) / 1461001\\n    // L = L - 1461 * year / 4 + 31\\n    // month = 80 * L / 2447\\n    // dd = L - 2447 * month / 80\\n    // L = month / 11\\n    // month = month + 2 - 12 * L\\n    // year = 100 * (N - 49) + year + L\\n    // ------------------------------------------------------------------------\\n    function _daysToDate(uint256 _days)\\n        internal\\n        pure\\n        returns (\\n            uint256 year,\\n            uint256 month,\\n            uint256 day\\n        )\\n    {\\n        int256 __days = int256(_days);\\n\\n        int256 L = __days + 68569 + OFFSET19700101;\\n        int256 N = (4 * L) / 146097;\\n        L = L - (146097 * N + 3) / 4;\\n        int256 _year = (4000 * (L + 1)) / 1461001;\\n        L = L - (1461 * _year) / 4 + 31;\\n        int256 _month = (80 * L) / 2447;\\n        int256 _day = L - (2447 * _month) / 80;\\n        L = _month / 11;\\n        _month = _month + 2 - 12 * L;\\n        _year = 100 * (N - 49) + _year + L;\\n\\n        year = uint256(_year);\\n        month = uint256(_month);\\n        day = uint256(_day);\\n    }\\n}\\n\",\"keccak256\":\"0x143e0eccde997bb161f42af789c33f794f7ddf4574f7e3f0151a2c0f199ada0e\"},\"@sense-finance/v1-core/src/external/FixedMath.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.11;\\n\\n/// @title Fixed point arithmetic library\\n/// @author Taken from https://github.com/Rari-Capital/solmate/blob/main/src/utils/FixedPointMathLib.sol\\nlibrary FixedMath {\\n    uint256 internal constant WAD = 1e18;\\n    uint256 internal constant RAY = 1e27;\\n\\n    function fmul(\\n        uint256 x,\\n        uint256 y,\\n        uint256 baseUnit\\n    ) internal pure returns (uint256) {\\n        return mulDivDown(x, y, baseUnit); // Equivalent to (x * y) / baseUnit rounded down.\\n    }\\n\\n    function fmul(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, y, WAD); // Equivalent to (x * y) / WAD rounded down.\\n    }\\n\\n    function fmulUp(\\n        uint256 x,\\n        uint256 y,\\n        uint256 baseUnit\\n    ) internal pure returns (uint256) {\\n        return mulDivUp(x, y, baseUnit); // Equivalent to (x * y) / baseUnit rounded up.\\n    }\\n\\n    function fmulUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, y, WAD); // Equivalent to (x * y) / WAD rounded up.\\n    }\\n\\n    function fdiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 baseUnit\\n    ) internal pure returns (uint256) {\\n        return mulDivDown(x, baseUnit, y); // Equivalent to (x * baseUnit) / y rounded down.\\n    }\\n\\n    function fdiv(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, WAD, y); // Equivalent to (x * WAD) / y rounded down.\\n    }\\n\\n    function fdivUp(\\n        uint256 x,\\n        uint256 y,\\n        uint256 baseUnit\\n    ) internal pure returns (uint256) {\\n        return mulDivUp(x, baseUnit, y); // Equivalent to (x * baseUnit) / y rounded up.\\n    }\\n\\n    function fdivUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, WAD, y); // Equivalent to (x * WAD) / y rounded up.\\n    }\\n\\n    function mulDivDown(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            // Store x * y in z for now.\\n            z := mul(x, y)\\n\\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\\n                revert(0, 0)\\n            }\\n\\n            // Divide z by the denominator.\\n            z := div(z, denominator)\\n        }\\n    }\\n\\n    function mulDivUp(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            // Store x * y in z for now.\\n            z := mul(x, y)\\n\\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\\n                revert(0, 0)\\n            }\\n\\n            // First, divide z - 1 by the denominator and add 1.\\n            // We allow z - 1 to underflow if z is 0, because we multiply the\\n            // end result by 0 if z is zero, ensuring we return 0 if z is zero.\\n            z := mul(iszero(iszero(z)), add(div(sub(z, 1), denominator), 1))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x96ef1181edb23765121db5f55554d3e44f3fa37352da83bad5ebf65140e80fe7\",\"license\":\"AGPL-3.0-only\"},\"@sense-finance/v1-core/src/external/balancer/Pool.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.11;\\n\\nimport { ERC20 } from \\\"@rari-capital/solmate/src/tokens/ERC20.sol\\\";\\nimport { BalancerVault } from \\\"./Vault.sol\\\";\\n\\ninterface BalancerPool {\\n    function getTimeWeightedAverage(OracleAverageQuery[] memory queries)\\n        external\\n        view\\n        returns (uint256[] memory results);\\n\\n    enum Variable {\\n        PAIR_PRICE,\\n        BPT_PRICE,\\n        INVARIANT\\n    }\\n    struct OracleAverageQuery {\\n        Variable variable;\\n        uint256 secs;\\n        uint256 ago;\\n    }\\n\\n    function getSample(uint256 index)\\n        external\\n        view\\n        returns (\\n            int256 logPairPrice,\\n            int256 accLogPairPrice,\\n            int256 logBptPrice,\\n            int256 accLogBptPrice,\\n            int256 logInvariant,\\n            int256 accLogInvariant,\\n            uint256 timestamp\\n        );\\n\\n    function getPoolId() external view returns (bytes32);\\n\\n    function getVault() external view returns (address);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    struct SwapRequest {\\n        BalancerVault.SwapKind kind;\\n        ERC20 tokenIn;\\n        ERC20 tokenOut;\\n        uint256 amount;\\n        // Misc data\\n        bytes32 poolId;\\n        uint256 lastChangeBlock;\\n        address from;\\n        address to;\\n        bytes userData;\\n    }\\n\\n    function onSwap(\\n        SwapRequest memory swapRequest,\\n        uint256 currentBalanceTokenIn,\\n        uint256 currentBalanceTokenOut\\n    ) external returns (uint256 amount);\\n\\n    function getIndices() external view returns (uint256 pti, uint256 targeti);\\n}\\n\",\"keccak256\":\"0x1a7c4586b990d136d4c54efe01427b5a8daeec863ebfe6a7ae1a078b516f05bd\",\"license\":\"AGPL-3.0-only\"},\"@sense-finance/v1-core/src/external/balancer/Vault.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.11;\\n\\nimport { ERC20 } from \\\"@rari-capital/solmate/src/tokens/ERC20.sol\\\";\\n\\ninterface IAsset {}\\n\\ninterface BalancerVault {\\n    struct JoinPoolRequest {\\n        IAsset[] assets;\\n        uint256[] maxAmountsIn;\\n        bytes userData;\\n        bool fromInternalBalance;\\n    }\\n    struct ExitPoolRequest {\\n        IAsset[] assets;\\n        uint256[] minAmountsOut;\\n        bytes userData;\\n        bool toInternalBalance;\\n    }\\n    enum PoolSpecialization {\\n        GENERAL,\\n        MINIMAL_SWAP_INFO,\\n        TWO_TOKEN\\n    }\\n    enum SwapKind {\\n        GIVEN_IN,\\n        GIVEN_OUT\\n    }\\n    struct SingleSwap {\\n        bytes32 poolId;\\n        SwapKind kind;\\n        IAsset assetIn;\\n        IAsset assetOut;\\n        uint256 amount;\\n        bytes userData;\\n    }\\n    struct FundManagement {\\n        address sender;\\n        bool fromInternalBalance;\\n        address payable recipient;\\n        bool toInternalBalance;\\n    }\\n\\n    function getPoolTokens(bytes32 poolId)\\n        external\\n        view\\n        returns (\\n            ERC20[] memory tokens,\\n            uint256[] memory balances,\\n            uint256 maxBlockNumber\\n        );\\n\\n    function getPool(bytes32 poolId) external view returns (address, PoolSpecialization);\\n\\n    function swap(\\n        SingleSwap memory singleSwap,\\n        FundManagement memory funds,\\n        uint256 limit,\\n        uint256 deadline\\n    ) external payable returns (uint256);\\n\\n    function joinPool(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        JoinPoolRequest memory request\\n    ) external payable;\\n\\n    function exitPool(\\n        bytes32 poolId,\\n        address sender,\\n        address payable recipient,\\n        ExitPoolRequest memory request\\n    ) external;\\n}\\n\",\"keccak256\":\"0xaecf54091698ddb53ce667a17de80fbc17a212f0ebbdf28a6185add523c57c8a\",\"license\":\"AGPL-3.0-only\"},\"@sense-finance/v1-core/src/external/flashloan/IERC3156FlashBorrower.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\ninterface IERC3156FlashBorrower {\\n    /// @dev Receive a flash loan.\\n    /// @param initiator The initiator of the loan.\\n    /// @param token The loan currency.\\n    /// @param amount The amount of tokens lent.\\n    /// @param fee The additional amount of tokens to repay.\\n    /// @param data Arbitrary data structure, intended to contain user-defined parameters.\\n    /// @return The keccak256 hash of \\\"ERC3156FlashBorrower.onFlashLoan\\\"\\n    function onFlashLoan(\\n        address initiator,\\n        address token,\\n        uint256 amount,\\n        uint256 fee,\\n        bytes calldata data\\n    ) external returns (bytes32);\\n}\\n\",\"keccak256\":\"0xa2007326dfc89668d1864d688373d7e1ee07fee48f605d4f6726224004bdc8e5\"},\"@sense-finance/v1-core/src/external/flashloan/IERC3156FlashLender.sol\":{\"content\":\"pragma solidity ^0.8.0;\\nimport \\\"./IERC3156FlashBorrower.sol\\\";\\n\\ninterface IERC3156FlashLender {\\n    /// @dev The amount of currency available to be lent.\\n    /// @param token The loan currency.\\n    /// @return The amount of `token` that can be borrowed.\\n    function maxFlashLoan(address token) external view returns (uint256);\\n\\n    /// @dev The fee to be charged for a given loan.\\n    /// @param token The loan currency.\\n    /// @param amount The amount of tokens lent.\\n    /// @return The amount of `token` to be charged for the loan, on top of the returned principal.\\n    function flashFee(address token, uint256 amount) external view returns (uint256);\\n\\n    /// @dev Initiate a flash loan.\\n    /// @param receiver The receiver of the tokens in the loan, and the receiver of the callback.\\n    /// @param token The loan currency.\\n    /// @param amount The amount of tokens lent.\\n    /// @param data Arbitrary data structure, intended to contain user-defined parameters.\\n    function flashLoan(\\n        IERC3156FlashBorrower receiver,\\n        address token,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc91333a7ff49db20853c817de2c277a0559a1ee75eb1deeb7d2096a5d1022d61\"},\"@sense-finance/v1-core/src/tokens/Token.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.11;\\n\\n// External references\\nimport { ERC20 } from \\\"@rari-capital/solmate/src/tokens/ERC20.sol\\\";\\n\\n// Internal references\\nimport { Trust } from \\\"@sense-finance/v1-utils/src/Trust.sol\\\";\\n\\n/// @title Base Token\\ncontract Token is ERC20, Trust {\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals,\\n        address _trusted\\n    ) ERC20(_name, _symbol, _decimals) Trust(_trusted) {}\\n\\n    /// @param usr The address to send the minted tokens\\n    /// @param amount The amount to be minted\\n    function mint(address usr, uint256 amount) public requiresTrust {\\n        _mint(usr, amount);\\n    }\\n\\n    /// @param usr The address from where to burn tokens from\\n    /// @param amount The amount to be burned\\n    function burn(address usr, uint256 amount) public requiresTrust {\\n        _burn(usr, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xcb8e50d0f9ded712e0db2aa3c5dd889c64b525a0b44b4b2fc6fddcebf092ff10\",\"license\":\"AGPL-3.0-only\"},\"@sense-finance/v1-core/src/tokens/YT.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.11;\\n\\n// Internal references\\nimport { Divider } from \\\"../Divider.sol\\\";\\nimport { Token } from \\\"./Token.sol\\\";\\n\\n/// @title Yield Token\\n/// @notice Strips off excess before every transfer\\ncontract YT is Token {\\n    address public immutable adapter;\\n    address public immutable divider;\\n    uint256 public immutable maturity;\\n\\n    constructor(\\n        address _adapter,\\n        uint256 _maturity,\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals,\\n        address _divider\\n    ) Token(_name, _symbol, _decimals, _divider) {\\n        adapter = _adapter;\\n        maturity = _maturity;\\n        divider = _divider;\\n    }\\n\\n    function collect() external returns (uint256 _collected) {\\n        return Divider(divider).collect(msg.sender, adapter, maturity, 0, address(0));\\n    }\\n\\n    function transfer(address to, uint256 value) public override returns (bool) {\\n        Divider(divider).collect(msg.sender, adapter, maturity, value, to);\\n        return super.transfer(to, value);\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) public override returns (bool) {\\n        if (value > 0) Divider(divider).collect(from, adapter, maturity, value, to);\\n        return super.transferFrom(from, to, value);\\n    }\\n}\\n\",\"keccak256\":\"0x3685a54f6852f9c31e893b96277fbdac81f7dece5bb4b98d69c7ca2cd2fd3a0d\",\"license\":\"AGPL-3.0-only\"},\"@sense-finance/v1-fuse/src/PoolManager.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.11;\\n\\n// External reference\\nimport { Clones } from \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport { ERC20 } from \\\"@rari-capital/solmate/src/tokens/ERC20.sol\\\";\\nimport { Bytes32AddressLib } from \\\"@rari-capital/solmate/src/utils/Bytes32AddressLib.sol\\\";\\nimport { PriceOracle } from \\\"./external/PriceOracle.sol\\\";\\nimport { BalancerOracle } from \\\"./external/BalancerOracle.sol\\\";\\n\\n// Internal references\\nimport { UnderlyingOracle } from \\\"./oracles/Underlying.sol\\\";\\nimport { TargetOracle } from \\\"./oracles/Target.sol\\\";\\nimport { PTOracle } from \\\"./oracles/PT.sol\\\";\\nimport { LPOracle } from \\\"./oracles/LP.sol\\\";\\n\\nimport { Trust } from \\\"@sense-finance/v1-utils/src/Trust.sol\\\";\\nimport { Errors } from \\\"@sense-finance/v1-utils/src/libs/Errors.sol\\\";\\nimport { Divider } from \\\"@sense-finance/v1-core/src/Divider.sol\\\";\\nimport { BaseAdapter as Adapter } from \\\"@sense-finance/v1-core/src/adapters/BaseAdapter.sol\\\";\\n\\ninterface FuseDirectoryLike {\\n    function deployPool(\\n        string memory name,\\n        address implementation,\\n        bool enforceWhitelist,\\n        uint256 closeFactor,\\n        uint256 liquidationIncentive,\\n        address priceOracle\\n    ) external returns (uint256, address);\\n}\\n\\ninterface ComptrollerLike {\\n    /// Deploy cToken, add the market to the markets mapping, and set it as listed and set the collateral factor\\n    /// Admin function to deploy cToken, set isListed, and add support for the market and set the collateral factor\\n    function _deployMarket(\\n        bool isCEther,\\n        bytes calldata constructorData,\\n        uint256 collateralFactorMantissa\\n    ) external returns (uint256);\\n\\n    /// Accepts transfer of admin rights. msg.sender must be pendingAdmin\\n    function _acceptAdmin() external returns (uint256);\\n\\n    /// All cTokens addresses mapped by their underlying token addresses\\n    function cTokensByUnderlying(address underlying) external view returns (address);\\n\\n    /// A list of all markets\\n    function markets(address cToken) external view returns (bool, uint256);\\n\\n    /// Pause borrowing for a specific market\\n    function _setBorrowPaused(address cToken, bool state) external returns (bool);\\n}\\n\\ninterface MasterOracleLike {\\n    function initialize(\\n        address[] memory underlyings,\\n        PriceOracle[] memory _oracles,\\n        PriceOracle _defaultOracle,\\n        address _admin,\\n        bool _canAdminOverwrite\\n    ) external;\\n\\n    function add(address[] calldata underlyings, PriceOracle[] calldata _oracles) external;\\n\\n    function getUnderlyingPrice(address cToken) external view returns (uint256);\\n}\\n\\n/// @title Fuse Pool Manager\\n/// @notice Consolidated Fuse interactions\\ncontract PoolManager is Trust {\\n    /* ========== PUBLIC IMMUTABLES ========== */\\n\\n    /// @notice Implementation of Fuse's comptroller\\n    address public immutable comptrollerImpl;\\n\\n    /// @notice Implementation of Fuse's cERC20\\n    address public immutable cERC20Impl;\\n\\n    /// @notice Fuse's pool directory\\n    address public immutable fuseDirectory;\\n\\n    /// @notice Sense core Divider address\\n    address public immutable divider;\\n\\n    /// @notice Implementation of Fuse's master oracle that routes to individual asset oracles\\n    address public immutable oracleImpl;\\n\\n    /// @notice Sense oracle for SEnse Targets\\n    address public immutable targetOracle;\\n\\n    /// @notice Sense oracle for Sense Principal Tokens\\n    address public immutable ptOracle;\\n\\n    /// @notice Sense oracle for Space LP Shares\\n    address public immutable lpOracle;\\n\\n    /// @notice Sense oracle for Underlying assets\\n    address public immutable underlyingOracle;\\n\\n    /* ========== PUBLIC MUTABLE STORAGE ========== */\\n\\n    /// @notice Fuse comptroller for the Sense pool\\n    address public comptroller;\\n\\n    /// @notice Master oracle for Sense's assets deployed on Fuse\\n    address public masterOracle;\\n\\n    /// @notice Fuse param config\\n    AssetParams public targetParams;\\n    AssetParams public ptParams;\\n    AssetParams public lpTokenParams;\\n\\n    /// @notice Series Pools: adapter -> maturity -> (series status (pt/lp shares), AMM pool)\\n    mapping(address => mapping(uint256 => Series)) public sSeries;\\n\\n    /* ========== ENUMS ========== */\\n\\n    enum SeriesStatus {\\n        NONE,\\n        QUEUED,\\n        ADDED\\n    }\\n\\n    /* ========== DATA STRUCTURES ========== */\\n\\n    struct AssetParams {\\n        address irModel;\\n        uint256 reserveFactor;\\n        uint256 collateralFactor;\\n    }\\n\\n    struct Series {\\n        // Series addition status\\n        SeriesStatus status;\\n        // Space pool for this Series\\n        address pool;\\n    }\\n\\n    constructor(\\n        address _fuseDirectory,\\n        address _comptrollerImpl,\\n        address _cERC20Impl,\\n        address _divider,\\n        address _oracleImpl\\n    ) Trust(msg.sender) {\\n        fuseDirectory = _fuseDirectory;\\n        comptrollerImpl = _comptrollerImpl;\\n        cERC20Impl = _cERC20Impl;\\n        divider = _divider;\\n        oracleImpl = _oracleImpl;\\n\\n        targetOracle = address(new TargetOracle());\\n        ptOracle = address(new PTOracle());\\n        lpOracle = address(new LPOracle());\\n        underlyingOracle = address(new UnderlyingOracle());\\n    }\\n\\n    function deployPool(\\n        string calldata name,\\n        uint256 closeFactor,\\n        uint256 liqIncentive,\\n        address fallbackOracle\\n    ) external requiresTrust returns (uint256 _poolIndex, address _comptroller) {\\n        masterOracle = Clones.cloneDeterministic(oracleImpl, Bytes32AddressLib.fillLast12Bytes(address(this)));\\n        MasterOracleLike(masterOracle).initialize(\\n            new address[](0),\\n            new PriceOracle[](0),\\n            PriceOracle(fallbackOracle), // default oracle used if asset prices can't be found otherwise\\n            address(this), // admin\\n            true // admin can override existing oracle routes\\n        );\\n\\n        (_poolIndex, _comptroller) = FuseDirectoryLike(fuseDirectory).deployPool(\\n            name,\\n            comptrollerImpl,\\n            false, // `whitelist` is always false\\n            closeFactor,\\n            liqIncentive,\\n            masterOracle\\n        );\\n\\n        uint256 err = ComptrollerLike(_comptroller)._acceptAdmin();\\n        if (err != 0) revert Errors.FailedBecomeAdmin();\\n        comptroller = _comptroller;\\n\\n        emit PoolDeployed(name, _comptroller, _poolIndex, closeFactor, liqIncentive);\\n    }\\n\\n    function addTarget(address target, address adapter) external requiresTrust returns (address cTarget) {\\n        if (comptroller == address(0)) revert Errors.PoolNotDeployed();\\n        if (targetParams.irModel == address(0)) revert Errors.TargetParamsNotSet();\\n\\n        address underlying = Adapter(adapter).underlying();\\n\\n        address[] memory underlyings = new address[](2);\\n        underlyings[0] = target;\\n        underlyings[1] = underlying;\\n\\n        PriceOracle[] memory oracles = new PriceOracle[](2);\\n        oracles[0] = PriceOracle(targetOracle);\\n        oracles[1] = PriceOracle(underlyingOracle);\\n\\n        UnderlyingOracle(underlyingOracle).setUnderlying(underlying, adapter);\\n        TargetOracle(targetOracle).setTarget(target, adapter);\\n        MasterOracleLike(masterOracle).add(underlyings, oracles);\\n\\n        bytes memory constructorData = abi.encode(\\n            target,\\n            comptroller,\\n            targetParams.irModel,\\n            ERC20(target).name(),\\n            ERC20(target).symbol(),\\n            cERC20Impl,\\n            hex\\\"\\\", // calldata sent to becomeImplementation (empty bytes b/c it's currently unused)\\n            targetParams.reserveFactor,\\n            0 // no admin fee\\n        );\\n\\n        // Trying to deploy the same market twice will fail\\n        uint256 err = ComptrollerLike(comptroller)._deployMarket(false, constructorData, targetParams.collateralFactor);\\n        if (err != 0) revert Errors.FailedAddTargetMarket();\\n\\n        cTarget = ComptrollerLike(comptroller).cTokensByUnderlying(target);\\n\\n        emit TargetAdded(target, cTarget);\\n    }\\n\\n    /// @notice queues a set of (Principal Tokens, LPShare) for a Fuse pool to be deployed once the TWAP is ready\\n    /// @dev called by the Periphery, which will know which pool address to set for this Series\\n    function queueSeries(\\n        address adapter,\\n        uint256 maturity,\\n        address pool\\n    ) external requiresTrust {\\n        if (Divider(divider).pt(adapter, maturity) == address(0)) revert Errors.SeriesDoesNotExist();\\n        if (sSeries[adapter][maturity].status != SeriesStatus.NONE) revert Errors.DuplicateSeries();\\n\\n        address cTarget = ComptrollerLike(comptroller).cTokensByUnderlying(Adapter(adapter).target());\\n        if (cTarget == address(0)) revert Errors.TargetNotInFuse();\\n\\n        (bool isListed, ) = ComptrollerLike(comptroller).markets(cTarget);\\n        if (!isListed) revert Errors.TargetNotInFuse();\\n\\n        sSeries[adapter][maturity] = Series({ status: SeriesStatus.QUEUED, pool: pool });\\n\\n        emit SeriesQueued(adapter, maturity, pool);\\n    }\\n\\n    /// @notice open method to add queued Principal Tokens and LPShares to Fuse pool\\n    /// @dev this can only be done once the yield space pool has filled its buffer and has a TWAP\\n    function addSeries(address adapter, uint256 maturity) external returns (address cPT, address cLPToken) {\\n        if (sSeries[adapter][maturity].status != SeriesStatus.QUEUED) revert Errors.SeriesNotQueued();\\n        if (ptParams.irModel == address(0)) revert Errors.PTParamsNotSet();\\n        if (lpTokenParams.irModel == address(0)) revert Errors.PoolParamsNotSet();\\n\\n        address pt = Divider(divider).pt(adapter, maturity);\\n        address pool = sSeries[adapter][maturity].pool;\\n\\n        (, , , , , , uint256 sampleTs) = BalancerOracle(pool).getSample(1023);\\n        // Prevent this market from being deployed on Fuse if we're able to read a TWAP\\n        if (sampleTs == 0) revert Errors.OracleNotReady();\\n\\n        address[] memory underlyings = new address[](2);\\n        underlyings[0] = pt;\\n        underlyings[1] = pool;\\n\\n        PriceOracle[] memory oracles = new PriceOracle[](2);\\n        oracles[0] = PriceOracle(ptOracle);\\n        oracles[1] = PriceOracle(lpOracle);\\n\\n        PTOracle(ptOracle).setPrincipal(pt, pool);\\n        MasterOracleLike(masterOracle).add(underlyings, oracles);\\n\\n        bytes memory constructorDataPrincipal = abi.encode(\\n            pt,\\n            comptroller,\\n            ptParams.irModel,\\n            ERC20(pt).name(),\\n            ERC20(pt).symbol(),\\n            cERC20Impl,\\n            hex\\\"\\\",\\n            ptParams.reserveFactor,\\n            0 // no admin fee\\n        );\\n\\n        uint256 errPrincipal = ComptrollerLike(comptroller)._deployMarket(\\n            false,\\n            constructorDataPrincipal,\\n            ptParams.collateralFactor\\n        );\\n        if (errPrincipal != 0) revert Errors.FailedToAddPTMarket();\\n\\n        // LP Share pool token\\n        bytes memory constructorDataLpToken = abi.encode(\\n            pool,\\n            comptroller,\\n            lpTokenParams.irModel,\\n            ERC20(pool).name(),\\n            ERC20(pool).symbol(),\\n            cERC20Impl,\\n            hex\\\"\\\",\\n            lpTokenParams.reserveFactor,\\n            0 // no admin fee\\n        );\\n\\n        uint256 errLpToken = ComptrollerLike(comptroller)._deployMarket(\\n            false,\\n            constructorDataLpToken,\\n            lpTokenParams.collateralFactor\\n        );\\n        if (errLpToken != 0) revert Errors.FailedAddLpMarket();\\n\\n        cPT = ComptrollerLike(comptroller).cTokensByUnderlying(pt);\\n        cLPToken = ComptrollerLike(comptroller).cTokensByUnderlying(pool);\\n\\n        ComptrollerLike(comptroller)._setBorrowPaused(cLPToken, true);\\n\\n        sSeries[adapter][maturity].status = SeriesStatus.ADDED;\\n\\n        emit SeriesAdded(pt, pool);\\n    }\\n\\n    /* ========== ADMIN ========== */\\n\\n    function setParams(bytes32 what, AssetParams calldata data) external requiresTrust {\\n        if (what == \\\"PT_PARAMS\\\") ptParams = data;\\n        else if (what == \\\"LP_TOKEN_PARAMS\\\") lpTokenParams = data;\\n        else if (what == \\\"TARGET_PARAMS\\\") targetParams = data;\\n        else revert Errors.InvalidParam();\\n        emit ParamsSet(what, data);\\n    }\\n\\n    function execute(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        uint256 txGas\\n    ) external requiresTrust returns (bool success) {\\n        assembly {\\n            success := call(txGas, to, value, add(data, 0x20), mload(data), 0, 0)\\n        }\\n    }\\n\\n    /* ========== LOGS ========== */\\n\\n    event ParamsSet(bytes32 indexed what, AssetParams data);\\n    event PoolDeployed(string name, address comptroller, uint256 poolIndex, uint256 closeFactor, uint256 liqIncentive);\\n    event TargetAdded(address indexed target, address indexed cTarget);\\n    event SeriesQueued(address indexed adapter, uint256 indexed maturity, address indexed pool);\\n    event SeriesAdded(address indexed pt, address indexed lpToken);\\n}\\n\",\"keccak256\":\"0x07cb8069afb53d3fe71a67b8fd82f8b9d4d6d94b9e32358f4447b7c89b009081\",\"license\":\"AGPL-3.0-only\"},\"@sense-finance/v1-fuse/src/external/BalancerOracle.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.11;\\n\\ninterface BalancerOracle {\\n    function getTimeWeightedAverage(OracleAverageQuery[] memory queries)\\n        external\\n        view\\n        returns (uint256[] memory results);\\n\\n    enum Variable {\\n        PAIR_PRICE,\\n        BPT_PRICE,\\n        INVARIANT\\n    }\\n    struct OracleAverageQuery {\\n        Variable variable;\\n        uint256 secs;\\n        uint256 ago;\\n    }\\n\\n    function getSample(uint256 index)\\n        external\\n        view\\n        returns (\\n            int256 logPairPrice,\\n            int256 accLogPairPrice,\\n            int256 logBptPrice,\\n            int256 accLogBptPrice,\\n            int256 logInvariant,\\n            int256 accLogInvariant,\\n            uint256 timestamp\\n        );\\n\\n    function getPoolId() external view returns (bytes32);\\n\\n    function getVault() external view returns (address);\\n\\n    function getIndices() external view returns (uint256 _pti, uint256 _targeti);\\n\\n    function totalSupply() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xaee2c07f95274f3aae1c1a699c0cf2ad861c0adef5322d9dd7cb26ba6896377b\",\"license\":\"AGPL-3.0-only\"},\"@sense-finance/v1-fuse/src/external/CToken.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.11;\\n\\n/// @title Price Oracle\\n/// @author Compound\\ninterface CToken {\\n    function underlying() external view returns (address);\\n\\n    function mint(uint256 mintAmount) external returns (uint256);\\n\\n    function redeem(uint256 redeemTokens) external returns (uint256);\\n\\n    function borrow(uint256 borrowAmount) external returns (uint256);\\n\\n    function repayBorrow(uint256 repayAmount) external returns (uint256);\\n\\n    function exchangeRateCurrent() external returns (uint256);\\n\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xa5ddb62846be71266f96c614a09b65433f43b5e6e6524963d8029486cf2be50f\",\"license\":\"AGPL-3.0-only\"},\"@sense-finance/v1-fuse/src/external/PriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.11;\\n\\nimport { CToken } from \\\"./CToken.sol\\\";\\n\\n/// @title Price Oracle\\n/// @author Compound\\n/// @notice The minimum interface a contract must implement in order to work as an oracle for Fuse with Sense\\n/// Original from: https://github.com/Rari-Capital/compound-protocol/blob/fuse-final/contracts/PriceOracle.sol\\nabstract contract PriceOracle {\\n    /// @notice Indicator that this is a PriceOracle contract (for inspection)\\n    bool public constant isPriceOracle = true;\\n\\n    /// @notice Get the underlying price of a cToken asset\\n    /// @param cToken The cToken to get the underlying price of\\n    /// @return The underlying asset price mantissa (scaled by 1e18).\\n    /// 0 means the price is unavailable.\\n    function getUnderlyingPrice(CToken cToken) external view virtual returns (uint256);\\n\\n    /// @notice Get the price of an underlying asset.\\n    /// @param underlying The underlying asset to get the price of.\\n    /// @return The underlying asset price in ETH as a mantissa (scaled by 1e18).\\n    /// 0 means the price is unavailable.\\n    function price(address underlying) external view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0x0e88f61ae7fe4951beae2fa82f6ca9cfc3709979cce21516288002add1efaa47\",\"license\":\"AGPL-3.0-only\"},\"@sense-finance/v1-fuse/src/oracles/LP.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.11;\\n\\n// External references\\nimport { ERC20 } from \\\"@rari-capital/solmate/src/tokens/ERC20.sol\\\";\\nimport { PriceOracle } from \\\"../external/PriceOracle.sol\\\";\\nimport { CToken } from \\\"../external/CToken.sol\\\";\\nimport { BalancerVault } from \\\"@sense-finance/v1-core/src/external/balancer/Vault.sol\\\";\\nimport { BalancerPool } from \\\"@sense-finance/v1-core/src/external/balancer/Pool.sol\\\";\\n\\n// Internal references\\nimport { Trust } from \\\"@sense-finance/v1-utils/src/Trust.sol\\\";\\nimport { FixedMath } from \\\"@sense-finance/v1-core/src/external/FixedMath.sol\\\";\\nimport { Errors } from \\\"@sense-finance/v1-utils/src/libs/Errors.sol\\\";\\nimport { BaseAdapter as Adapter } from \\\"@sense-finance/v1-core/src/adapters/BaseAdapter.sol\\\";\\n\\ninterface SpaceLike {\\n    function getFairBPTPriceInTarget(uint256 ptTwapDuration) external view returns (uint256);\\n\\n    function adapter() external view returns (address);\\n}\\n\\ncontract LPOracle is PriceOracle, Trust {\\n    using FixedMath for uint256;\\n\\n    /// @notice PT address -> pool address for oracle reads\\n    mapping(address => address) public pools;\\n    uint256 public twapPeriod;\\n\\n    constructor() Trust(msg.sender) {\\n        twapPeriod = 5.5 hours;\\n    }\\n\\n    function setTwapPeriod(uint256 _twapPeriod) external requiresTrust {\\n        twapPeriod = _twapPeriod;\\n    }\\n\\n    function getUnderlyingPrice(CToken cToken) external view override returns (uint256) {\\n        // The underlying here will be an LP Token\\n        return _price(cToken.underlying());\\n    }\\n\\n    function price(address pt) external view override returns (uint256) {\\n        return _price(pt);\\n    }\\n\\n    function _price(address _pool) internal view returns (uint256) {\\n        SpaceLike pool = SpaceLike(_pool);\\n        address target = Adapter(pool.adapter()).target();\\n\\n        // Price per BPT in ETH terms, where the PT side of the pool is valued using the TWAP oracle\\n        return pool.getFairBPTPriceInTarget(twapPeriod).fmul(PriceOracle(msg.sender).price(target));\\n    }\\n}\\n\",\"keccak256\":\"0xad6d6708423eae8b31f40564b8355e06c98bae5b176e46242c290a7c2c032c2c\",\"license\":\"AGPL-3.0-only\"},\"@sense-finance/v1-fuse/src/oracles/PT.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.11;\\n\\n// External references\\nimport { ERC20 } from \\\"@rari-capital/solmate/src/tokens/ERC20.sol\\\";\\nimport { PriceOracle } from \\\"../external/PriceOracle.sol\\\";\\nimport { CToken } from \\\"../external/CToken.sol\\\";\\nimport { BalancerOracle } from \\\"../external/BalancerOracle.sol\\\";\\nimport { BalancerVault } from \\\"@sense-finance/v1-core/src/external/balancer/Vault.sol\\\";\\n\\n// Internal references\\nimport { Trust } from \\\"@sense-finance/v1-utils/src/Trust.sol\\\";\\nimport { Errors } from \\\"@sense-finance/v1-utils/src/libs/Errors.sol\\\";\\nimport { Token } from \\\"@sense-finance/v1-core/src/tokens/Token.sol\\\";\\nimport { FixedMath } from \\\"@sense-finance/v1-core/src/external/FixedMath.sol\\\";\\nimport { BaseAdapter as Adapter } from \\\"@sense-finance/v1-core/src/adapters/BaseAdapter.sol\\\";\\n\\ninterface SpaceLike {\\n    function getImpliedRateFromPrice(uint256 pTPriceInTarget) external view returns (uint256);\\n\\n    function getPriceFromImpliedRate(uint256 impliedRate) external view returns (uint256);\\n\\n    function getTotalSamples() external pure returns (uint256);\\n\\n    function adapter() external view returns (address);\\n}\\n\\ncontract PTOracle is PriceOracle, Trust {\\n    using FixedMath for uint256;\\n\\n    /// @notice PT address -> pool address for oracle reads\\n    mapping(address => address) public pools;\\n    /// @notice Minimum implied rate this oracle will tolerate for PTs\\n    uint256 public floorRate;\\n    uint256 public twapPeriod;\\n\\n    constructor() Trust(msg.sender) {\\n        floorRate = 3e18; // 300%\\n        twapPeriod = 5.5 hours;\\n    }\\n\\n    function setFloorRate(uint256 _floorRate) external requiresTrust {\\n        floorRate = _floorRate;\\n    }\\n\\n    function setTwapPeriod(uint256 _twapPeriod) external requiresTrust {\\n        twapPeriod = _twapPeriod;\\n    }\\n\\n    function setPrincipal(address pt, address pool) external requiresTrust {\\n        pools[pt] = pool;\\n    }\\n\\n    function getUnderlyingPrice(CToken cToken) external view override returns (uint256) {\\n        // The underlying here will be a Principal Token\\n        return _price(cToken.underlying());\\n    }\\n\\n    function price(address pt) external view override returns (uint256) {\\n        return _price(pt);\\n    }\\n\\n    function _price(address pt) internal view returns (uint256) {\\n        BalancerOracle pool = BalancerOracle(pools[address(pt)]);\\n        if (pool == BalancerOracle(address(0))) revert Errors.PoolNotSet();\\n\\n        // if getSample(buffer_size) returns 0s, the oracle buffer is not full yet and a price can't be read\\n        // https://dev.balancer.fi/references/contracts/apis/pools/weightedpool2tokens#api\\n        (, , , , , , uint256 sampleTs) = pool.getSample(SpaceLike(address(pool)).getTotalSamples() - 1);\\n        // Revert if the pool's oracle can't be used yet, preventing this market from being deployed\\n        // on Fuse until we're able to read a TWAP\\n        if (sampleTs == 0) revert Errors.OracleNotReady();\\n\\n        BalancerOracle.OracleAverageQuery[] memory queries = new BalancerOracle.OracleAverageQuery[](1);\\n        // The BPT price slot in Space carries the implied rate TWAP\\n        queries[0] = BalancerOracle.OracleAverageQuery({\\n            variable: BalancerOracle.Variable.BPT_PRICE,\\n            secs: twapPeriod,\\n            ago: 1 hours // take the oracle from 1 hour ago plus twapPeriod ago to 1 hour ago\\n        });\\n\\n        uint256[] memory results = pool.getTimeWeightedAverage(queries);\\n        // note: impliedRate is pulled from the BPT price slot in BalancerOracle.OracleAverageQuery\\n        uint256 impliedRate = results[0];\\n\\n        if (impliedRate > floorRate) {\\n            impliedRate = floorRate;\\n        }\\n\\n        address target = Adapter(SpaceLike(address(pool)).adapter()).target();\\n\\n        // `Principal Token / target` * `target / ETH` = `Price of Principal Token in ETH`\\n        //\\n        // Assumes the caller is the master oracle, which will have its own strategy for getting the underlying price\\n        return\\n            SpaceLike(address(pool)).getPriceFromImpliedRate(impliedRate).fmul(PriceOracle(msg.sender).price(target));\\n    }\\n}\\n\",\"keccak256\":\"0x805fd3ce6280239dd7090aa7ed997fbfc59aacfd4cb401a9acf7ac6af5589df9\",\"license\":\"AGPL-3.0-only\"},\"@sense-finance/v1-fuse/src/oracles/Target.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.11;\\n\\n// External references\\nimport { PriceOracle } from \\\"../external/PriceOracle.sol\\\";\\nimport { CToken } from \\\"../external/CToken.sol\\\";\\nimport { Errors } from \\\"@sense-finance/v1-utils/src/libs/Errors.sol\\\";\\n\\n// Internal references\\nimport { Trust } from \\\"@sense-finance/v1-utils/src/Trust.sol\\\";\\nimport { Token } from \\\"@sense-finance/v1-core/src/tokens/Token.sol\\\";\\nimport { FixedMath } from \\\"@sense-finance/v1-core/src/external/FixedMath.sol\\\";\\nimport { BaseAdapter as Adapter } from \\\"@sense-finance/v1-core/src/adapters/BaseAdapter.sol\\\";\\n\\ncontract TargetOracle is PriceOracle, Trust {\\n    using FixedMath for uint256;\\n\\n    /// @notice target address -> adapter address\\n    mapping(address => address) public adapters;\\n\\n    constructor() Trust(msg.sender) {}\\n\\n    function setTarget(address target, address adapter) external requiresTrust {\\n        adapters[target] = adapter;\\n    }\\n\\n    function getUnderlyingPrice(CToken cToken) external view override returns (uint256) {\\n        // For the sense Fuse pool, the underlying will be the Target. The semantics here can be a little confusing\\n        // as we now have two layers of underlying, cToken -> Target (cToken's underlying) -> Target's underlying\\n        Token target = Token(cToken.underlying());\\n        return _price(address(target));\\n    }\\n\\n    function price(address target) external view override returns (uint256) {\\n        return _price(target);\\n    }\\n\\n    function _price(address target) internal view returns (uint256) {\\n        address adapter = adapters[address(target)];\\n        if (adapter == address(0)) revert Errors.AdapterNotSet();\\n\\n        // Use the cached scale for view function compatibility\\n        uint256 scale = Adapter(adapter).scaleStored();\\n\\n        // `Target / Target's underlying` * `Target's underlying / ETH` = `Price of Target in ETH`\\n        //\\n        // `scale` and the value returned by `getUnderlyingPrice` are expected to be WADs\\n        return scale.fmul(Adapter(adapter).getUnderlyingPrice());\\n    }\\n}\\n\",\"keccak256\":\"0x129cb73a18ad406701736f746cc0f1b7328dc18ef4a679465cce26579027bbb6\",\"license\":\"AGPL-3.0-only\"},\"@sense-finance/v1-fuse/src/oracles/Underlying.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.11;\\n\\n// External references\\nimport { PriceOracle } from \\\"../external/PriceOracle.sol\\\";\\nimport { CToken } from \\\"../external/CToken.sol\\\";\\nimport { Errors } from \\\"@sense-finance/v1-utils/src/libs/Errors.sol\\\";\\n\\n// Internal references\\nimport { Trust } from \\\"@sense-finance/v1-utils/src/Trust.sol\\\";\\nimport { FixedMath } from \\\"@sense-finance/v1-core/src/external/FixedMath.sol\\\";\\nimport { BaseAdapter as Adapter } from \\\"@sense-finance/v1-core/src/adapters/BaseAdapter.sol\\\";\\n\\ncontract UnderlyingOracle is PriceOracle, Trust {\\n    using FixedMath for uint256;\\n\\n    /// @notice underlying address -> adapter address\\n    mapping(address => address) public adapters;\\n\\n    constructor() Trust(msg.sender) {}\\n\\n    function setUnderlying(address underlying, address adapter) external requiresTrust {\\n        adapters[underlying] = adapter;\\n    }\\n\\n    function getUnderlyingPrice(CToken cToken) external view override returns (uint256) {\\n        return _price(address(cToken.underlying()));\\n    }\\n\\n    function price(address underlying) external view override returns (uint256) {\\n        return _price(underlying);\\n    }\\n\\n    function _price(address underlying) internal view returns (uint256) {\\n        address adapter = adapters[address(underlying)];\\n        if (adapter == address(0)) revert Errors.AdapterNotSet();\\n\\n        return Adapter(adapter).getUnderlyingPrice();\\n    }\\n}\\n\",\"keccak256\":\"0xe013083349c542c0411853da721af11a1f5255b483d83f17f2a87291885a9754\",\"license\":\"AGPL-3.0-only\"},\"@sense-finance/v1-utils/src/Trust.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.7.0;\\n\\n/// @notice Ultra minimal authorization logic for smart contracts.\\n/// @author From https://github.com/Rari-Capital/solmate/blob/fab107565a51674f3a3b5bfdaacc67f6179b1a9b/src/auth/Trust.sol\\nabstract contract Trust {\\n    event UserTrustUpdated(address indexed user, bool trusted);\\n\\n    mapping(address => bool) public isTrusted;\\n\\n    constructor(address initialUser) {\\n        isTrusted[initialUser] = true;\\n\\n        emit UserTrustUpdated(initialUser, true);\\n    }\\n\\n    function setIsTrusted(address user, bool trusted) public virtual requiresTrust {\\n        isTrusted[user] = trusted;\\n\\n        emit UserTrustUpdated(user, trusted);\\n    }\\n\\n    modifier requiresTrust() {\\n        require(isTrusted[msg.sender], \\\"UNTRUSTED\\\");\\n\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x2d3887076c81425d3954aea7735aebd9093e3df69c8132b1713fae4a34201d43\",\"license\":\"AGPL-3.0-only\"},\"@sense-finance/v1-utils/src/libs/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.4;\\n\\nlibrary Errors {\\n    // Auth\\n    error CombineRestricted();\\n    error IssuanceRestricted();\\n    error NotAuthorized();\\n    error OnlyYT();\\n    error OnlyDivider();\\n    error OnlyPeriphery();\\n    error OnlyPermissionless();\\n    error RedeemRestricted();\\n    error Untrusted();\\n\\n    // Adapters\\n    error TokenNotSupported();\\n    error FlashCallbackFailed();\\n    error InvalidMaturityOffsets();\\n    error SenderNotEligible();\\n    error TargetMismatch();\\n    error TargetNotSupported();\\n\\n    // Divider\\n    error AlreadySettled();\\n    error CollectNotSettled();\\n    error GuardCapReached();\\n    error IssuanceFeeCapExceeded();\\n    error IssueOnSettle();\\n    error NotSettled();\\n\\n    // Input & validations\\n    error AlreadyInitialized();\\n    error DuplicateSeries();\\n    error ExistingValue();\\n    error InvalidAdapter();\\n    error InvalidMaturity();\\n    error InvalidParam();\\n    error OutOfWindowBoundaries();\\n    error SeriesDoesNotExist();\\n    error SwapTooSmall();\\n    error TargetParamsNotSet();\\n    error PoolParamsNotSet();\\n    error PTParamsNotSet();\\n\\n    // Periphery\\n    error FactoryNotSupported();\\n    error FlashBorrowFailed();\\n    error FlashUntrustedBorrower();\\n    error FlashUntrustedLoanInitiator();\\n    error UnexpectedSwapAmount();\\n\\n    // Fuse\\n    error AdapterNotSet();\\n    error FailedBecomeAdmin();\\n    error FailedAddTargetMarket();\\n    error FailedToAddPTMarket();\\n    error FailedAddLpMarket();\\n    error OracleNotReady();\\n    error PoolAlreadyDeployed();\\n    error PoolNotDeployed();\\n    error PoolNotSet();\\n    error SeriesNotQueued();\\n    error TargetExists();\\n    error TargetNotInFuse();\\n\\n    // Tokens\\n    error MintFailed();\\n    error RedeemFailed();\\n    error TransferFailed();\\n}\\n\",\"keccak256\":\"0x9c33ee916425a004d8054e18d27c9852fcc69a38e2a1bd5afed7daf06150cfb8\",\"license\":\"AGPL-3.0-only\"},\"@sense-finance/v1-utils/src/libs/Levels.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.7.0;\\n\\nlibrary Levels {\\n    uint256 private constant _INIT_BIT = 0x1;\\n    uint256 private constant _ISSUE_BIT = 0x2;\\n    uint256 private constant _COMBINE_BIT = 0x4;\\n    uint256 private constant _COLLECT_BIT = 0x8;\\n    uint256 private constant _REDEEM_BIT = 0x10;\\n    uint256 private constant _REDEEM_HOOK_BIT = 0x20;\\n\\n    function initRestricted(uint256 level) internal pure returns (bool) {\\n        return level & _INIT_BIT != _INIT_BIT;\\n    }\\n\\n    function issueRestricted(uint256 level) internal pure returns (bool) {\\n        return level & _ISSUE_BIT != _ISSUE_BIT;\\n    }\\n\\n    function combineRestricted(uint256 level) internal pure returns (bool) {\\n        return level & _COMBINE_BIT != _COMBINE_BIT;\\n    }\\n\\n    function collectDisabled(uint256 level) internal pure returns (bool) {\\n        return level & _COLLECT_BIT != _COLLECT_BIT;\\n    }\\n\\n    function redeemRestricted(uint256 level) internal pure returns (bool) {\\n        return level & _REDEEM_BIT != _REDEEM_BIT;\\n    }\\n\\n    function redeemHookDisabled(uint256 level) internal pure returns (bool) {\\n        return level & _REDEEM_HOOK_BIT != _REDEEM_HOOK_BIT;\\n    }\\n}\\n\",\"keccak256\":\"0x6c71e17beb73fca7577fb8868086159303eaecb1b397a446e8891b42f73fd502\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061018d5760003560e01c80635fe3b567116100e3578063cd387def1161008c578063e53e268411610066578063e53e268414610498578063eaada382146104bf578063f191f72d146104d257600080fd5b8063cd387def146103f1578063d8deea6914610431578063e1b08b2f1461047d57600080fd5b806371987b15116100bd57806371987b151461037857806374420f4c146103ab57806396d64879146103ce57600080fd5b80635fe3b5671461030e57806366e671fa146103215780636f2cec031461034857600080fd5b80631e75fda81161014557806338d170d01161011f57806338d170d0146102ad5780634fe9a165146102d45780635e883823146102fb57600080fd5b80631e75fda81461024c5780631ec64fef14610273578063378efa371461028657600080fd5b806312c46e611161017657806312c46e61146101fd5780631393916a146102245780631e4134721461023957600080fd5b806305d7b9a214610192578063062b032f146101d6575b600080fd5b6101b97f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6101b97f000000000000000000000000000000000000000000000000000000000000000081565b6101b97f000000000000000000000000000000000000000000000000000000000000000081565b6102376102323660046120e5565b6104ed565b005b61023761024736600461211e565b61059b565b6101b97f000000000000000000000000000000000000000000000000000000000000000081565b6101b9610281366004612156565b6106ef565b6101b97f000000000000000000000000000000000000000000000000000000000000000081565b6101b97f000000000000000000000000000000000000000000000000000000000000000081565b6101b97f000000000000000000000000000000000000000000000000000000000000000081565b610237610309366004612184565b610da2565b6001546101b9906001600160a01b031681565b6101b97f000000000000000000000000000000000000000000000000000000000000000081565b61035b6103563660046121c6565b6111de565b604080519283526001600160a01b039091166020830152016101cd565b61038b61038636600461225d565b611520565b604080516001600160a01b039384168152929091166020830152016101cd565b6103be6103b93660046122f8565b611fa1565b60405190151581526020016101cd565b6103be6103dc36600461239c565b60006020819052908152604090205460ff1681565b600954600a54600b5461040c926001600160a01b0316919083565b604080516001600160a01b0390941684526020840192909252908201526060016101cd565b61046f61043f36600461225d565b600c60209081526000928352604080842090915290825290205460ff81169061010090046001600160a01b031682565b6040516101cd9291906123d6565b60035460045460055461040c926001600160a01b0316919083565b6101b97f000000000000000000000000000000000000000000000000000000000000000081565b6002546101b9906001600160a01b031681565b60065460075460085461040c926001600160a01b0316919083565b3360009081526020819052604090205460ff1661053d5760405162461bcd60e51b8152602060048201526009602482015268155395149554d5115160ba1b60448201526064015b60405180910390fd5b6001600160a01b03821660008181526020818152604091829020805460ff191685151590811790915591519182527fe95aec380cae16330d146d5499ef7db6f3657e477104a733e771bc09e500d98691015b60405180910390a25050565b3360009081526020819052604090205460ff166105e65760405162461bcd60e51b8152602060048201526009602482015268155395149554d5115160ba1b6044820152606401610534565b817f50545f504152414d53000000000000000000000000000000000000000000000014156106235780600661061b8282612410565b9050506106bf565b817f4c505f544f4b454e5f504152414d53000000000000000000000000000000000014156106585780600961061b8282612410565b817f5441524745545f504152414d5300000000000000000000000000000000000000141561068d5780600361061b8282612410565b6040517fd252903400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b817f19343ac82232ade4f61d24859ca30233e9760fe231cc39a90ddf5bd49acb517e8260405161058f919061245a565b3360009081526020819052604081205460ff1661073a5760405162461bcd60e51b8152602060048201526009602482015268155395149554d5115160ba1b6044820152606401610534565b6001546001600160a01b031661077c576040517f3945869100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6003546001600160a01b03166107be576040517f6bf00ef400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000826001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108229190612490565b6040805160028082526060820183529293506000929091602083019080368337019050509050848160008151811061085c5761085c6124ad565b60200260200101906001600160a01b031690816001600160a01b0316815250508181600181518110610890576108906124ad565b6001600160a01b039290921660209283029190910182015260408051600280825260608201835260009391929091830190803683370190505090507f0000000000000000000000000000000000000000000000000000000000000000816000815181106108ff576108ff6124ad565b60200260200101906001600160a01b031690816001600160a01b0316815250507f000000000000000000000000000000000000000000000000000000000000000081600181518110610953576109536124ad565b6001600160a01b0392831660209182029290920101526040517f11b04cfa000000000000000000000000000000000000000000000000000000008152848216600482015286821660248201527f0000000000000000000000000000000000000000000000000000000000000000909116906311b04cfa90604401600060405180830381600087803b1580156109e757600080fd5b505af11580156109fb573d6000803e3d6000fd5b50506040517f3ecf06bd0000000000000000000000000000000000000000000000000000000081526001600160a01b03898116600483015288811660248301527f0000000000000000000000000000000000000000000000000000000000000000169250633ecf06bd9150604401600060405180830381600087803b158015610a8357600080fd5b505af1158015610a97573d6000803e3d6000fd5b5050600254604051634e48c96360e11b81526001600160a01b039091169250639c9192c69150610acd9085908590600401612507565b600060405180830381600087803b158015610ae757600080fd5b505af1158015610afb573d6000803e3d6000fd5b5050600154600354604080516306fdde0360e01b81529051600095508b94506001600160a01b0393841693928316928516916306fdde0391600480830192899291908290030181865afa158015610b56573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b7e9190810190612565565b8a6001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015610bbc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610be49190810190612565565b600454604051610c209695949392917f0000000000000000000000000000000000000000000000000000000000000000916000906020016125ff565b60408051601f19818403018152908290526001546005546315746b7360e31b84529193506000926001600160a01b039091169163aba35b9891610c6a91859187919060040161267a565b6020604051808303816000875af1158015610c89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cad91906126a5565b90508015610ce7576040517f53c72d3d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001546040516318ffa3fd60e11b81526001600160a01b038a81166004830152909116906331ff47fa90602401602060405180830381865afa158015610d31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d559190612490565b9550856001600160a01b0316886001600160a01b03167f3ba6ba3fcb7369ef738bc90958eec7a66fb09fe03af0a3f5c4c2863c6b36d2ad60405160405180910390a3505050505092915050565b3360009081526020819052604090205460ff16610ded5760405162461bcd60e51b8152602060048201526009602482015268155395149554d5115160ba1b6044820152606401610534565b60405163d10eb4b960e01b81526001600160a01b038481166004830152602482018490526000917f00000000000000000000000000000000000000000000000000000000000000009091169063d10eb4b990604401602060405180830381865afa158015610e5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e839190612490565b6001600160a01b03161415610ec4576040517f1760174300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b0383166000908152600c6020908152604080832085845290915281205460ff166002811115610efc57610efc6123c0565b14610f33576040517fd309d88400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600160009054906101000a90046001600160a01b03166001600160a01b03166331ff47fa856001600160a01b031663d4b839926040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fbb9190612490565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015611017573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061103b9190612490565b90506001600160a01b03811661106457604051632f6924d160e01b815260040160405180910390fd5b6001546040517f8e8f294b0000000000000000000000000000000000000000000000000000000081526001600160a01b0383811660048301526000921690638e8f294b906024016040805180830381865afa1580156110c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110eb91906126be565b5090508061110c57604051632f6924d160e01b815260040160405180910390fd5b6040805180820190915280600181526001600160a01b0380861660209283015287166000908152600c825260408082208883529092522081518154829060ff19166001836002811115611161576111616123c0565b02179055506020919091015181547fffffffffffffffffffffff0000000000000000000000000000000000000000ff166101006001600160a01b039283160217909155604051848216918691908816907f02f6226cb15bc6c090b3bcd5d2443620fe13f5d3675a554b09b91cd344ac52bb90600090a45050505050565b33600090815260208190526040812054819060ff1661122b5760405162461bcd60e51b8152602060048201526009602482015268155395149554d5115160ba1b6044820152606401610534565b61127a7f00000000000000000000000000000000000000000000000000000000000000003060601b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000016612002565b6002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216918217905560408051600080825260208201908152818301928390527f278aa1460000000000000000000000000000000000000000000000000000000090925263278aa146916112f9919087306001604485016126ec565b600060405180830381600087803b15801561131357600080fd5b505af1158015611327573d6000803e3d6000fd5b50506002546040517f5710c6d80000000000000000000000000000000000000000000000000000000081526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169450635710c6d893506113c1928c928c927f0000000000000000000000000000000000000000000000000000000000000000926000928e928e921690600401612764565b60408051808303816000875af11580156113df573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061140391906127b3565b80925081935050506000816001600160a01b031663e9c714f26040518163ffffffff1660e01b81526004016020604051808303816000875af115801561144d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061147191906126a5565b905080156114ab576040517f9782db4a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0384161790556040517f200a9e26954b1b18425cdd75101b3db8dae378a7e43369b4a5acf31252409f409061150d908a908a90869088908c908c906127d8565b60405180910390a1509550959350505050565b60008060016001600160a01b0385166000908152600c6020908152604080832087845290915290205460ff16600281111561155d5761155d6123c0565b14611594576040517f662e50ac00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6006546001600160a01b03166115d6576040517f24df3c2300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6009546001600160a01b0316611618576040517f98d12d3e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60405163d10eb4b960e01b81526001600160a01b038581166004830152602482018590526000917f00000000000000000000000000000000000000000000000000000000000000009091169063d10eb4b990604401602060405180830381865afa15801561168a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ae9190612490565b6001600160a01b038681166000908152600c602090815260408083208984529091528082205490517f60d1507c0000000000000000000000000000000000000000000000000000000081526103ff600482015293945061010090049091169182906360d1507c9060240160e060405180830381865afa158015611735573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611759919061281a565b9650505050505050806000141561179c576040517f6e155fc600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60408051600280825260608201835260009260208301908036833701905050905083816000815181106117d1576117d16124ad565b60200260200101906001600160a01b031690816001600160a01b0316815250508281600181518110611805576118056124ad565b6001600160a01b039290921660209283029190910182015260408051600280825260608201835260009391929091830190803683370190505090507f000000000000000000000000000000000000000000000000000000000000000081600081518110611874576118746124ad565b60200260200101906001600160a01b031690816001600160a01b0316815250507f0000000000000000000000000000000000000000000000000000000000000000816001815181106118c8576118c86124ad565b6001600160a01b0392831660209182029290920101526040517f2b7f9ab5000000000000000000000000000000000000000000000000000000008152868216600482015285821660248201527f000000000000000000000000000000000000000000000000000000000000000090911690632b7f9ab590604401600060405180830381600087803b15801561195c57600080fd5b505af1158015611970573d6000803e3d6000fd5b5050600254604051634e48c96360e11b81526001600160a01b039091169250639c9192c691506119a69085908590600401612507565b600060405180830381600087803b1580156119c057600080fd5b505af11580156119d4573d6000803e3d6000fd5b5050600154600654604080516306fdde0360e01b81529051600095508a94506001600160a01b0393841693928316928516916306fdde0391600480830192899291908290030181865afa158015611a2f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611a579190810190612565565b896001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015611a95573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611abd9190810190612565565b600754604051611af99695949392917f0000000000000000000000000000000000000000000000000000000000000000916000906020016125ff565b60408051601f19818403018152908290526001546008546315746b7360e31b84529193506000926001600160a01b039091169163aba35b9891611b4391859187919060040161267a565b6020604051808303816000875af1158015611b62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b8691906126a5565b90508015611bc0576040517f4158dfcd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600154600954604080516306fdde0360e01b815290516000938a936001600160a01b039182169390821692918516916306fdde039160048082019289929091908290030181865afa158015611c19573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611c419190810190612565565b8a6001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015611c7f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611ca79190810190612565565b600a54604051611ce39695949392917f0000000000000000000000000000000000000000000000000000000000000000916000906020016125ff565b60408051601f1981840301815290829052600154600b546315746b7360e31b84529193506000926001600160a01b039091169163aba35b9891611d2d91859187919060040161267a565b6020604051808303816000875af1158015611d4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d7091906126a5565b90508015611daa576040517f185bfbc000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001546040516318ffa3fd60e11b81526001600160a01b038b81166004830152909116906331ff47fa90602401602060405180830381865afa158015611df4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e189190612490565b6001546040516318ffa3fd60e11b81526001600160a01b038b81166004830152929d509116906331ff47fa90602401602060405180830381865afa158015611e64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e889190612490565b600180546040517f18c882a50000000000000000000000000000000000000000000000000000000081526001600160a01b0380851660048301526024820193909352929c5016906318c882a5906044016020604051808303816000875af1158015611ef7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f1b919061286e565b506001600160a01b038d166000908152600c602090815260408083208f8452909152902080546002919060ff19166001830217905550876001600160a01b0316896001600160a01b03167f8d522d548d59788ba6bc4204397b0769e9d1f34961a0a60bdade4c473f30e91460405160405180910390a35050505050505050509250929050565b3360009081526020819052604081205460ff16611fec5760405162461bcd60e51b8152602060048201526009602482015268155395149554d5115160ba1b6044820152606401610534565b600080845160208601878987f195945050505050565b60006040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528360601b60148201527f5af43d82803e903d91602b57fd5bf300000000000000000000000000000000006028820152826037826000f59150506001600160a01b0381166120b95760405162461bcd60e51b815260206004820152601760248201527f455243313136373a2063726561746532206661696c65640000000000000000006044820152606401610534565b92915050565b6001600160a01b03811681146120d457600080fd5b50565b80151581146120d457600080fd5b600080604083850312156120f857600080fd5b8235612103816120bf565b91506020830135612113816120d7565b809150509250929050565b600080828403608081121561213257600080fd5b833592506060601f198201121561214857600080fd5b506020830190509250929050565b6000806040838503121561216957600080fd5b8235612174816120bf565b91506020830135612113816120bf565b60008060006060848603121561219957600080fd5b83356121a4816120bf565b92506020840135915060408401356121bb816120bf565b809150509250925092565b6000806000806000608086880312156121de57600080fd5b853567ffffffffffffffff808211156121f657600080fd5b818801915088601f83011261220a57600080fd5b81358181111561221957600080fd5b89602082850101111561222b57600080fd5b60209283019750955050860135925060408601359150606086013561224f816120bf565b809150509295509295909350565b6000806040838503121561227057600080fd5b823561227b816120bf565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156122c8576122c8612289565b604052919050565b600067ffffffffffffffff8211156122ea576122ea612289565b50601f01601f191660200190565b6000806000806080858703121561230e57600080fd5b8435612319816120bf565b935060208501359250604085013567ffffffffffffffff81111561233c57600080fd5b8501601f8101871361234d57600080fd5b803561236061235b826122d0565b61229f565b81815288602083850101111561237557600080fd5b81602084016020830137600091810160200191909152949793965093946060013593505050565b6000602082840312156123ae57600080fd5b81356123b9816120bf565b9392505050565b634e487b7160e01b600052602160045260246000fd5b60408101600384106123f857634e487b7160e01b600052602160045260246000fd5b9281526001600160a01b039190911660209091015290565b813561241b816120bf565b6001600160a01b03811673ffffffffffffffffffffffffffffffffffffffff198354161782555060208201356001820155604082013560028201555050565b606081018235612469816120bf565b6001600160a01b038116835250602083013560208301526040830135604083015292915050565b6000602082840312156124a257600080fd5b81516123b9816120bf565b634e487b7160e01b600052603260045260246000fd5b600081518084526020808501945080840160005b838110156124fc5781516001600160a01b0316875295820195908201906001016124d7565b509495945050505050565b60408152600061251a60408301856124c3565b828103602084015261252c81856124c3565b95945050505050565b60005b83811015612550578181015183820152602001612538565b8381111561255f576000848401525b50505050565b60006020828403121561257757600080fd5b815167ffffffffffffffff81111561258e57600080fd5b8201601f8101841361259f57600080fd5b80516125ad61235b826122d0565b8181528560208385010111156125c257600080fd5b61252c826020830160208601612535565b600081518084526125eb816020860160208601612535565b601f01601f19169290920160200192915050565b60006101206001600160a01b03808c168452808b166020850152808a1660408501528160608501526126338285018a6125d3565b9150838203608085015261264782896125d3565b961660a0840152505080840360c08201526000845260e081019290925260ff166101009091015260200195945050505050565b831515815260606020820152600061269560608301856125d3565b9050826040830152949350505050565b6000602082840312156126b757600080fd5b5051919050565b600080604083850312156126d157600080fd5b82516126dc816120d7565b6020939093015192949293505050565b60a0815260006126ff60a08301886124c3565b828103602084015261271181886124c3565b6001600160a01b039687166040850152949095166060830152509015156080909101529392505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60c08152600061277860c08301898b61273b565b90506001600160a01b038088166020840152861515604084015285606084015284608084015280841660a08401525098975050505050505050565b600080604083850312156127c657600080fd5b825191506020830151612113816120bf565b60a0815260006127ec60a08301888a61273b565b90506001600160a01b0386166020830152846040830152836060830152826080830152979650505050505050565b600080600080600080600060e0888a03121561283557600080fd5b5050855160208701516040880151606089015160808a015160a08b015160c0909b0151949c939b50919990985090965094509092509050565b60006020828403121561288057600080fd5b81516123b9816120d756fea2646970667358221220996c9e3a07521e151e83165a54ee6f9a8373eb9d8f95c86a450d8783cd98361964736f6c634300080b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addSeries(address,uint256)": {
        "details": "this can only be done once the yield space pool has filled its buffer and has a TWAP"
      },
      "queueSeries(address,uint256,address)": {
        "details": "called by the Periphery, which will know which pool address to set for this Series"
      }
    },
    "title": "Fuse Pool Manager",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addSeries(address,uint256)": {
        "notice": "open method to add queued Principal Tokens and LPShares to Fuse pool"
      },
      "cERC20Impl()": {
        "notice": "Implementation of Fuse's cERC20"
      },
      "comptroller()": {
        "notice": "Fuse comptroller for the Sense pool"
      },
      "comptrollerImpl()": {
        "notice": "Implementation of Fuse's comptroller"
      },
      "divider()": {
        "notice": "Sense core Divider address"
      },
      "fuseDirectory()": {
        "notice": "Fuse's pool directory"
      },
      "lpOracle()": {
        "notice": "Sense oracle for Space LP Shares"
      },
      "masterOracle()": {
        "notice": "Master oracle for Sense's assets deployed on Fuse"
      },
      "oracleImpl()": {
        "notice": "Implementation of Fuse's master oracle that routes to individual asset oracles"
      },
      "ptOracle()": {
        "notice": "Sense oracle for Sense Principal Tokens"
      },
      "queueSeries(address,uint256,address)": {
        "notice": "queues a set of (Principal Tokens, LPShare) for a Fuse pool to be deployed once the TWAP is ready"
      },
      "sSeries(address,uint256)": {
        "notice": "Series Pools: adapter -> maturity -> (series status (pt/lp shares), AMM pool)"
      },
      "targetOracle()": {
        "notice": "Sense oracle for SEnse Targets"
      },
      "targetParams()": {
        "notice": "Fuse param config"
      },
      "underlyingOracle()": {
        "notice": "Sense oracle for Underlying assets"
      }
    },
    "notice": "Consolidated Fuse interactions",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 14705,
        "contract": "@sense-finance/v1-fuse/src/PoolManager.sol:PoolManager",
        "label": "isTrusted",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 12890,
        "contract": "@sense-finance/v1-fuse/src/PoolManager.sol:PoolManager",
        "label": "comptroller",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 12893,
        "contract": "@sense-finance/v1-fuse/src/PoolManager.sol:PoolManager",
        "label": "masterOracle",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 12897,
        "contract": "@sense-finance/v1-fuse/src/PoolManager.sol:PoolManager",
        "label": "targetParams",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(AssetParams)12922_storage"
      },
      {
        "astId": 12900,
        "contract": "@sense-finance/v1-fuse/src/PoolManager.sol:PoolManager",
        "label": "ptParams",
        "offset": 0,
        "slot": "6",
        "type": "t_struct(AssetParams)12922_storage"
      },
      {
        "astId": 12903,
        "contract": "@sense-finance/v1-fuse/src/PoolManager.sol:PoolManager",
        "label": "lpTokenParams",
        "offset": 0,
        "slot": "9",
        "type": "t_struct(AssetParams)12922_storage"
      },
      {
        "astId": 12911,
        "contract": "@sense-finance/v1-fuse/src/PoolManager.sol:PoolManager",
        "label": "sSeries",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Series)12928_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(SeriesStatus)12915": {
        "encoding": "inplace",
        "label": "enum PoolManager.SeriesStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(Series)12928_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct PoolManager.Series))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Series)12928_storage)"
      },
      "t_mapping(t_uint256,t_struct(Series)12928_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct PoolManager.Series)",
        "numberOfBytes": "32",
        "value": "t_struct(Series)12928_storage"
      },
      "t_struct(AssetParams)12922_storage": {
        "encoding": "inplace",
        "label": "struct PoolManager.AssetParams",
        "members": [
          {
            "astId": 12917,
            "contract": "@sense-finance/v1-fuse/src/PoolManager.sol:PoolManager",
            "label": "irModel",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 12919,
            "contract": "@sense-finance/v1-fuse/src/PoolManager.sol:PoolManager",
            "label": "reserveFactor",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 12921,
            "contract": "@sense-finance/v1-fuse/src/PoolManager.sol:PoolManager",
            "label": "collateralFactor",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Series)12928_storage": {
        "encoding": "inplace",
        "label": "struct PoolManager.Series",
        "members": [
          {
            "astId": 12925,
            "contract": "@sense-finance/v1-fuse/src/PoolManager.sol:PoolManager",
            "label": "status",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(SeriesStatus)12915"
          },
          {
            "astId": 12927,
            "contract": "@sense-finance/v1-fuse/src/PoolManager.sol:PoolManager",
            "label": "pool",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}