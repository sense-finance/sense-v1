{
  "address": "0x2E2Ed0Cfd3AD2f1d34481277b3204d807Ca2F8c2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_implementation",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_divider",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_delta",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_airdropToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "delta",
          "type": "uint256"
        }
      ],
      "name": "DeltaChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "divider",
          "type": "address"
        }
      ],
      "name": "DividerChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "FeedDeployed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "ImplementationChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "protocol",
          "type": "address"
        }
      ],
      "name": "ProtocolChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "trusted",
          "type": "bool"
        }
      ],
      "name": "UserTrustUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "airdropToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "delta",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_target",
          "type": "address"
        }
      ],
      "name": "deployFeed",
      "outputs": [
        {
          "internalType": "address",
          "name": "clone",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "wtarget",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "divider",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "feeds",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "implementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isTrusted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocol",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_delta",
          "type": "uint256"
        }
      ],
      "name": "setDelta",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_divider",
          "type": "address"
        }
      ],
      "name": "setDivider",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_implementation",
          "type": "address"
        }
      ],
      "name": "setImplementation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "trusted",
          "type": "bool"
        }
      ],
      "name": "setIsTrusted",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_protocol",
          "type": "address"
        }
      ],
      "name": "setProtocol",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x776d3cab373064544b17ba82b1a9d543140381db893a6a3ec2c19b3d68f207ad",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x2E2Ed0Cfd3AD2f1d34481277b3204d807Ca2F8c2",
    "transactionIndex": 0,
    "gasUsed": "1491580",
    "logsBloom": "0x
    "blockHash": "0x65bc36be2471b97433d3713268ea0474b24ff0dd34ce21a4bd6abc668740edbf",
    "transactionHash": "0x776d3cab373064544b17ba82b1a9d543140381db893a6a3ec2c19b3d68f207ad",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 13407368,
        "transactionHash": "0x776d3cab373064544b17ba82b1a9d543140381db893a6a3ec2c19b3d68f207ad",
        "address": "0x2E2Ed0Cfd3AD2f1d34481277b3204d807Ca2F8c2",
        "topics": [
          "0xe95aec380cae16330d146d5499ef7db6f3657e477104a733e771bc09e500d986",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 0,
        "blockHash": "0x65bc36be2471b97433d3713268ea0474b24ff0dd34ce21a4bd6abc668740edbf"
      }
    ],
    "blockNumber": 13407368,
    "cumulativeGasUsed": "1491580",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x21dF544947ba3E8b3c32561399E88B52Dc8b2823",
    "0x04C89607413713Ec9775E14b954286519d836FEf",
    150,
    "0x0000000000000000000000000000000000000000"
  ],
  "solcInputHash": "7c5715d138b09e9a9a5e2707a1a686c2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_implementation\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_divider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_delta\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_airdropToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"delta\",\"type\":\"uint256\"}],\"name\":\"DeltaChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"divider\",\"type\":\"address\"}],\"name\":\"DividerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"FeedDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"ImplementationChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"protocol\",\"type\":\"address\"}],\"name\":\"ProtocolChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"trusted\",\"type\":\"bool\"}],\"name\":\"UserTrustUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"airdropToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delta\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"deployFeed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"clone\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wtarget\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"divider\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeds\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isTrusted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocol\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_delta\",\"type\":\"uint256\"}],\"name\":\"setDelta\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_divider\",\"type\":\"address\"}],\"name\":\"setDivider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_implementation\",\"type\":\"address\"}],\"name\":\"setImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"trusted\",\"type\":\"bool\"}],\"name\":\"setIsTrusted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_protocol\",\"type\":\"address\"}],\"name\":\"setProtocol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"deployFeed(address)\":{\"params\":{\"_target\":\"Address of the target token\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"deployFeed(address)\":{\"notice\":\"Deploys a feed for the given _target\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/feeds/compound/CFactory.sol\":\"CFactory\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xa3bbab77849522b73d8c6cd3d2ac54bef7580e4354484f35f4cabf55d3d2b3f9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@rari-capital/solmate/src/auth/Trust.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.7.0;\\n\\n/// @notice Ultra minimal authorization logic for smart contracts.\\n/// @author Inspired by Dappsys V2 (https://github.com/dapp-org/dappsys-v2/blob/main/src/auth.sol)\\nabstract contract Trust {\\n    /*///////////////////////////////////////////////////////////////\\n                                  EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event UserTrustUpdated(address indexed user, bool trusted);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              TRUST STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    mapping(address => bool) public isTrusted;\\n\\n    constructor(address user) {\\n        isTrusted[user] = true;\\n\\n        emit UserTrustUpdated(user, true);\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                         TRUST MODIFIER FUNCTIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function setIsTrusted(address user, bool trusted) public requiresTrust {\\n        isTrusted[user] = trusted;\\n\\n        emit UserTrustUpdated(user, trusted);\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              TRUST LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    modifier requiresTrust() {\\n        require(isTrusted[msg.sender], \\\"UNTRUSTED\\\");\\n\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x5626e9634132d73cb032ca9176cdbb79de7d8b6f58586804cfc0140da2e04134\",\"license\":\"AGPL-3.0-only\"},\"@rari-capital/solmate/src/erc20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\\nabstract contract ERC20 {\\n    /*///////////////////////////////////////////////////////////////\\n                                  EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                             METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    uint8 public immutable decimals;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              ERC20 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                         PERMIT/EIP-2612 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    bytes32 public constant PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n    bytes32 public immutable DOMAIN_SEPARATOR;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n\\n        DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(\\n                keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                keccak256(bytes(name)),\\n                keccak256(bytes(\\\"1\\\")),\\n                block.chainid,\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              ERC20 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        allowance[msg.sender][spender] = value;\\n\\n        emit Approval(msg.sender, spender, value);\\n\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        balanceOf[msg.sender] -= value;\\n\\n        // This is safe because the sum of all user\\n        // balances can't exceed type(uint256).max!\\n        unchecked {\\n            balanceOf[to] += value;\\n        }\\n\\n        emit Transfer(msg.sender, to, value);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) public virtual returns (bool) {\\n        if (allowance[from][msg.sender] != type(uint256).max) {\\n            allowance[from][msg.sender] -= value;\\n        }\\n\\n        balanceOf[from] -= value;\\n\\n        // This is safe because the sum of all user\\n        // balances can't exceed type(uint256).max!\\n        unchecked {\\n            balanceOf[to] += value;\\n        }\\n\\n        emit Transfer(from, to, value);\\n\\n        return true;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                          PERMIT/EIP-2612 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                DOMAIN_SEPARATOR,\\n                keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\\n            )\\n        );\\n\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"INVALID_PERMIT_SIGNATURE\\\");\\n\\n        allowance[recoveredAddress][spender] = value;\\n\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                          INTERNAL UTILS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 value) internal {\\n        totalSupply += value;\\n\\n        // This is safe because the sum of all user\\n        // balances can't exceed type(uint256).max!\\n        unchecked {\\n            balanceOf[to] += value;\\n        }\\n\\n        emit Transfer(address(0), to, value);\\n    }\\n\\n    function _burn(address from, uint256 value) internal {\\n        balanceOf[from] -= value;\\n\\n        // This is safe because a user won't ever\\n        // have a balance larger than totalSupply!\\n        unchecked {\\n            totalSupply -= value;\\n        }\\n\\n        emit Transfer(from, address(0), value);\\n    }\\n}\\n\",\"keccak256\":\"0x4824edadf3ed7ce4dc3f0fdb47b5a7a08de80aba2a657f7a68212ea34a9c81a4\",\"license\":\"AGPL-3.0-only\"},\"@rari-capital/solmate/src/erc20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport {ERC20} from \\\"./ERC20.sol\\\";\\n\\n/// @notice Safe ERC20 and ETH transfer library that safely handles missing return values.\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v3-periphery/blob/main/contracts/libraries/TransferHelper.sol)\\nlibrary SafeERC20 {\\n    function safeTransferFrom(\\n        ERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(ERC20.transferFrom.selector, from, to, value)\\n        );\\n\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        ERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(ERC20.transfer.selector, to, value)\\n        );\\n\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeApprove(\\n        ERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(ERC20.approve.selector, to, value)\\n        );\\n\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"APPROVE_FAILED\\\");\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n\\n        require(success, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x4f46a609a6507ae6e0c66ec31aaaf1c4f7b49452de253ecbd7b77de58c6a1729\",\"license\":\"AGPL-3.0-only\"},\"src/Divider.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.6;\\n\\n// External references\\nimport { SafeERC20, ERC20 } from \\\"@rari-capital/solmate/src/erc20/SafeERC20.sol\\\";\\nimport { Trust } from \\\"@rari-capital/solmate/src/auth/Trust.sol\\\";\\nimport { DateTime } from \\\"./external/DateTime.sol\\\";\\nimport { FixedMath } from \\\"./external/FixedMath.sol\\\";\\n\\n// Internal references\\nimport { Errors } from \\\"./libs/errors.sol\\\";\\nimport { Claim } from \\\"./tokens/Claim.sol\\\";\\nimport { BaseFeed as Feed } from \\\"./feeds/BaseFeed.sol\\\";\\nimport { Token as Zero } from \\\"./tokens/Token.sol\\\";\\nimport { wTarget } from \\\"./wrappers/wTarget.sol\\\";\\n\\n/// @title Sense Divider: Divide Assets in Two\\n/// @author fedealconada + jparklev\\n/// @notice You can use this contract to issue, combine, and redeem Sense ERC20 Zeros and Claims\\ncontract Divider is Trust {\\n    using SafeERC20 for ERC20;\\n    using FixedMath for uint256;\\n    using Errors for   string;\\n\\n    /// @notice Configuration\\n    uint256 public constant ISSUANCE_FEE = 0.01e18; // In percentage (1%) [WAD] // TODO: TBD\\n    uint256 public constant INIT_STAKE = 1e18; // Series initialisation stablecoin stake [WAD] // TODO: TBD\\n    uint256 public constant SPONSOR_WINDOW = 4 hours; // TODO: TBD\\n    uint256 public constant SETTLEMENT_WINDOW = 2 hours; // TODO: TBD\\n    uint256 public constant MIN_MATURITY = 2 weeks; // TODO: TBD\\n    uint256 public constant MAX_MATURITY = 14 weeks; // TODO: TBD\\n\\n    string private constant ZERO_SYMBOL_PREFIX = \\\"z\\\";\\n    string private constant ZERO_NAME_PREFIX = \\\"Zero\\\";\\n    string private constant CLAIM_SYMBOL_PREFIX = \\\"c\\\";\\n    string private constant CLAIM_NAME_PREFIX = \\\"Claim\\\";\\n\\n    /// @notice Mutable program state\\n    address public stable;\\n    address public    cup;\\n    mapping(address => bool   ) public feeds;  // feed -> approved\\n    mapping(address => uint256) public guards; // target -> max amount of Target allowed to be issued\\n    mapping(address => address) public wtargets;  // target -> target wrapper\\n    mapping(address => mapping(uint256 => Series)) public series; // feed -> maturity -> series\\n    mapping(address => mapping(uint256 => mapping(address => uint256))) public lscales; // feed -> maturity -> account -> lscale\\n    struct Series {\\n        address zero; // Zero address for this Series (deployed on Series initialization)\\n        address claim; // Claim address for this Series (deployed on Series initialization)\\n        address sponsor; // Series initializer/sponsor\\n        uint256 issuance; // Issuance date for this Series (needed for Zero redemption)\\n        uint256 reward; // Tracks the fees due to the settler on Settlement\\n        uint256 iscale; // Scale value at issuance\\n        uint256 mscale; // Scale value at maturity\\n    }\\n\\n    constructor(address _stable, address _cup) Trust(msg.sender) {\\n        stable = _stable;\\n        cup    = _cup;\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n    /// @notice Initializes a new Series\\n    /// @dev Deploys two ERC20 contracts, one for each Zero type\\n    /// @dev Transfers some fixed amount of stable asset to this contract\\n    /// @param feed Feed to associate with the Series\\n    /// @param maturity Maturity date for the new Series, in units of unix time\\n    function initSeries(address feed, uint256 maturity) external returns (address zero, address claim) {\\n        require(feeds[feed], Errors.InvalidFeed);\\n        require(!_exists(feed, maturity), Errors.DuplicateSeries);\\n        require(_isValid(maturity), Errors.InvalidMaturity);\\n\\n        // Transfer stable asset stake from caller to this contract\\n        ERC20(stable).safeTransferFrom(msg.sender, address(this), INIT_STAKE);\\n\\n        // Deploy Zeros and Claims for this new Series\\n        (zero, claim) = _split(feed, maturity);\\n\\n        // Initialize the new Series struct\\n        Series memory newSeries = Series({\\n            zero : zero,\\n            claim : claim,\\n            sponsor : msg.sender,\\n            issuance : block.timestamp,\\n            reward : 0,\\n            iscale : Feed(feed).scale(),\\n            mscale : 0\\n        });\\n        series[feed][maturity] = newSeries;\\n\\n        emit SeriesInitialized(feed, maturity, zero, claim, msg.sender);\\n    }\\n\\n    /// @notice Settles a Series and transfer the settlement reward to the caller\\n    /// @dev The Series' sponsor has a buffer where only they can settle the Series\\n    /// @dev After the buffer, the reward becomes MEV\\n    /// @param feed Feed to associate with the Series\\n    /// @param maturity Maturity date for the new Series\\n    function settleSeries(address feed, uint256 maturity) external {\\n        require(feeds[feed], Errors.InvalidFeed);\\n        require(_exists(feed, maturity), Errors.SeriesDoesntExists);\\n        require(_canBeSettled(feed, maturity), Errors.OutOfWindowBoundaries);\\n\\n        // The maturity scale value is all a Series needs for us to consider it \\\"settled\\\"\\n        series[feed][maturity].mscale = Feed(feed).scale();\\n\\n        // Reward the caller for doing the work of settling the Series at around the correct time\\n        ERC20 target = ERC20(Feed(feed).target());\\n        target.safeTransferFrom(wtargets[address(target)], msg.sender, series[feed][maturity].reward);\\n        ERC20(stable).safeTransfer(msg.sender, INIT_STAKE);\\n\\n        emit SeriesSettled(feed, maturity, msg.sender);\\n    }\\n\\n    /// @notice Mint Zeros and Claims of a specific Series\\n    /// @param feed Feed address for the Series\\n    /// @param maturity Maturity date for the Series\\n    /// @param tBal Balance of Target to deposit\\n    /// the amount of Zeros/Claims minted will be the equivelent value in units of underlying (less fees)\\n    function issue(address feed, uint256 maturity, uint256 tBal) external {\\n        require(feeds[feed], Errors.InvalidFeed);\\n        require(_exists(feed, maturity), Errors.SeriesDoesntExists);\\n        require(!_settled(feed, maturity), Errors.IssueOnSettled);\\n\\n        ERC20 target = ERC20(Feed(feed).target());\\n        uint256 tDecimals = target.decimals();\\n        uint256 tBase = 10 ** tDecimals;\\n        uint256 fee;\\n\\n        // Ensure the caller won't hit the issuance cap with this action\\n        require(target.balanceOf(address(this)) + tBal <= guards[address(target)], Errors.GuardCapReached);\\n        target.safeTransferFrom(msg.sender, wtargets[address(target)], tBal);\\n\\n        // Take the issuance fee out of the deposited Target, and put it towards the settlement\\n        if (tDecimals != 18) {\\n            fee = (tDecimals < 18 ? ISSUANCE_FEE / (10**(18 - tDecimals)) : ISSUANCE_FEE * 10**(tDecimals - 18)).fmul(tBal, tBase);\\n        } else {\\n            fee = ISSUANCE_FEE.fmul(tBal, tBase);\\n        }\\n\\n        series[feed][maturity].reward += fee;\\n        uint256 tBalSubFee = tBal - fee;\\n\\n        // If the caller has collected on Claims before, use the scale value from that collection to determine how many Zeros/Claims to mint\\n        // so that the Claims they mint here will have the same amount of yield stored up as their existing holdings\\n        uint256 scale = lscales[feed][maturity][msg.sender];\\n\\n        // If the caller has not collected on Claims before, use the current scale value to determine how many Zeros/Claims to mint\\n        // so that the Claims they mint here are \\\"clean,\\\" in that they have no yet-to-be-collected yield\\n        if (scale == 0) {\\n            scale = Feed(feed).scale();\\n            lscales[feed][maturity][msg.sender] = scale;\\n        }\\n\\n        // Determine the amount of Underlying equal to the Target being sent in (the principal)\\n        uint256 uBal = tBalSubFee.fmul(scale, Zero(series[feed][maturity].zero).BASE_UNIT());\\n\\n        // Mint equal amounts of Zeros and Claims\\n        Zero(series[feed][maturity].zero  ).mint(msg.sender, uBal);\\n        Claim(series[feed][maturity].claim).mint(msg.sender, uBal);\\n\\n        emit Issued(feed, maturity, uBal, msg.sender);\\n    }\\n\\n    /// @notice Reconstitute Target by burning Zeros and Claims\\n    /// @dev Explicitly burns claims before maturity, and implicitly does it at/after maturity through collect()\\n    /// @param feed Feed address for the Series\\n    /// @param maturity Maturity date for the Series\\n    /// @param uBal Balance of Zeros and Claims to burn\\n    function combine(address feed, uint256 maturity, uint256 uBal) external {\\n        require(feeds[feed], Errors.InvalidFeed);\\n        require(_exists(feed, maturity), Errors.SeriesDoesntExists);\\n\\n        Zero(series[feed][maturity].zero).burn(msg.sender, uBal);\\n        _collect(msg.sender, feed, maturity, uBal, address(0));\\n        if (block.timestamp < maturity) Claim(series[feed][maturity].claim).burn(msg.sender, uBal);\\n\\n        // We use lscale since the current scale was already stored there by the _collect() call\\n        uint256 cscale = _settled(feed, maturity) ? series[feed][maturity].mscale : lscales[feed][maturity][msg.sender];\\n\\n        // Convert from units of Underlying to units of Target\\n        uint256 tBal = uBal.fdiv(cscale, 10**ERC20(Feed(feed).target()).decimals());\\n        ERC20 target = ERC20(Feed(feed).target());\\n        target.safeTransferFrom(wtargets[address(target)], msg.sender, tBal);\\n\\n        emit Combined(feed, maturity, tBal, msg.sender);\\n    }\\n\\n    /// @notice Burn Zeros of a Series once its been settled\\n    /// @dev The balance of redeemable Target is a function of the change in Scale\\n    /// @param feed Feed address for the Series\\n    /// @param maturity Maturity date for the Series\\n    /// @param uBal Amount of Zeros to burn, which should be equivelent to the amount of Underlying owed to the caller\\n    function redeemZero(address feed, uint256 maturity, uint256 uBal) external {\\n        require(feeds[feed], Errors.InvalidFeed);\\n        // If a Series is settled, we know that it must have existed as well, so that check is unnecessary\\n        require(_settled(feed, maturity), Errors.NotSettled);\\n        // Burn the caller's Zeros\\n        Zero(series[feed][maturity].zero).burn(msg.sender, uBal);\\n\\n        // Calculate the amount of Target the caller is owed (amount of Target that's\\n        // equivelent to their principal in Underlying), then send it them\\n        uint256 tBal = uBal.fdiv(series[feed][maturity].mscale, 10**ERC20(Feed(feed).target()).decimals()); // Sensitive to precision loss\\n        ERC20 target = ERC20(Feed(feed).target());\\n        target.safeTransferFrom(wtargets[address(target)], msg.sender, tBal);\\n\\n        emit Redeemed(feed, maturity, tBal);\\n    }\\n\\n    /// @notice Collect Claim excess before, at, or after maturity\\n    /// @dev Burns the claim tokens if it's currently at or after maturity as this will be the last possible collect\\n    /// @dev If `to` is set, we copy the lscale value from usr to this address\\n    /// @param usr User who's collecting for their Claims\\n    /// @param feed Feed address for the Series\\n    /// @param maturity Maturity date for the Series\\n    /// @param to address to set the lscale value from usr\\n    function collect(\\n        address usr,\\n        address feed,\\n        uint256 maturity,\\n        address to\\n    ) external onlyClaim(feed, maturity) returns (uint256 collected) {\\n        return _collect(usr,\\n            feed,\\n            maturity,\\n            Claim(msg.sender).balanceOf(usr),\\n            to\\n        );\\n    }\\n\\n    function _collect(\\n        address usr,\\n        address feed,\\n        uint256 maturity,\\n        uint256 uBal,\\n        address to\\n    ) internal returns (uint256 collected) {\\n        require(feeds[feed], Errors.InvalidFeed);\\n        require(_exists(feed, maturity), Errors.SeriesDoesntExists);\\n\\n        // Get the scale value from the last time this holder collected\\n        uint256 cscale = series[feed][maturity].mscale;\\n        uint256 lscale = lscales[feed][maturity][usr];\\n        Claim claim = Claim(series[feed][maturity].claim);\\n        ERC20 target = ERC20(Feed(feed).target());\\n\\n        // If this is the Claim holder's first time collecting and nobody sent these Claims to them,\\n        // set the \\\"last scale\\\" value to the scale at issuance for this series\\n        if (lscale == 0) lscale = series[feed][maturity].iscale;\\n\\n        // If we're past maturity, this Series must be settled before collect can be called\\n        if (_settled(feed, maturity)) {\\n            claim.burn(usr, uBal);\\n        } else {\\n            // If we're not settled and we're past maturity + the sponsor window,\\n            // anyone can settle this Series so revert until someone does\\n            if (block.timestamp > maturity + SPONSOR_WINDOW) {\\n                revert(Errors.CollectNotSettled);\\n            } else {\\n                cscale = Feed(feed).scale();\\n                lscales[feed][maturity][usr] = cscale;\\n            }\\n        }\\n\\n        // Determine how much yield has accrued since the last time this user collected, in units of Target.\\n        // (Or take the last time as issuance if they haven't yet.)\\n        // Reminder that `Underlying / Scale` = `Target`, so this equation is saying, for some amount of Underlying `u`:\\n        // \\\"Target balance that equaled `u` at last collection _minus_ Target balance that equals `u` now\\\".\\n        // Because scale must be increasing, the Target balance needed to equal `u` decreases, and that \\\"excess\\\"\\n        // is what Claim holders are collecting\\n        collected = uBal.fdiv(lscale, claim.BASE_UNIT()) - uBal.fdiv(cscale, claim.BASE_UNIT());\\n        target.safeTransferFrom(wtargets[address(target)], usr, collected);\\n\\n        wTarget(wtargets[address(target)]).distribute(feed, maturity, usr, collected); // distribute airdrop tokens\\n\\n        // If this collect is a part of a token transfer to another address, set the receiver's\\n        // last collection to this scale (as all yield is being stripped off before the Claims are sent)\\n        if (to != address(0)) {\\n            lscales[feed][maturity][to] = cscale;\\n        }\\n\\n        emit Collected(feed, maturity, collected);\\n    }\\n\\n    /* ========== ADMIN FUNCTIONS ========== */\\n\\n    /// @notice Enable or disable a feed\\n    /// @param feed Feed's address\\n    /// @param isOn Flag setting this feed to enabled or disabled\\n    function setFeed(address feed, bool isOn) external requiresTrust {\\n        require(feeds[feed] != isOn, Errors.ExistingValue);\\n        feeds[feed] = isOn;\\n        emit FeedChanged(feed, isOn);\\n    }\\n\\n    /// @notice Set target's guard\\n    /// @param target Target address\\n    /// @param cap The max target that can be deposited on the Divider\\n    function setGuard(address target, uint256 cap) external requiresTrust {\\n        guards[target] = cap;\\n        emit GuardChanged(target, cap);\\n    }\\n\\n    /// @notice Adds wrapped target to wtargets mapping\\n    /// @param wtarget Wrapped Target address\\n    function setWrapper(address wtarget) external requiresTrust {\\n        address target = wTarget(wtarget).target();\\n        require(wtargets[target] == address(0), Errors.ExistingValue);\\n        wtargets[target] = wtarget;\\n        emit WTargetAdded(wtarget);\\n    }\\n\\n    struct Backfill {\\n        address usr;   // Address of the user who's getting their lscale backfilled\\n        uint256 lscale; // Scale value to backfill for usr's lscale\\n    }\\n\\n    /// @notice Backfill a Series' Scale value at maturity if keepers failed to settle it\\n    /// @param feed Feed's address\\n    /// @param maturity Maturity date for the Series\\n    /// @param mscale Value to set as the Series' Scale value at maturity\\n    /// @param backfills Values to set on lscales mapping\\n    function backfillScale(\\n        address feed,\\n        uint256 maturity,\\n        uint256 mscale,\\n        Backfill[] memory backfills\\n    ) external requiresTrust {\\n        require(_exists(feed, maturity), Errors.SeriesDoesntExists);\\n        require(mscale > series[feed][maturity].iscale, Errors.InvalidScaleValue);\\n\\n        uint256 cutoff = maturity + SPONSOR_WINDOW + SETTLEMENT_WINDOW;\\n        // If the feed is disabled, it will allow the admin to backfill no matter the maturity\\n        require(!feeds[feed] || block.timestamp > cutoff, Errors.OutOfWindowBoundaries);\\n\\n        // Set the maturity scale for the Series (needed for `redeem` methods)\\n        series[feed][maturity].mscale = mscale;\\n        // Set user's last scale values the Series (needed for the `collect` method)\\n        for (uint i = 0; i < backfills.length; i++) {\\n            lscales[feed][maturity][backfills[i].usr] = backfills[i].lscale;\\n        }\\n\\n        // Determine where the rewards should go depending on where we are relative to the maturity date\\n        address rewardee = block.timestamp <= maturity + SPONSOR_WINDOW ? series[feed][maturity].sponsor : cup;\\n        ERC20 target = ERC20(Feed(feed).target());\\n        target.safeTransferFrom(wtargets[address(target)], cup, series[feed][maturity].reward);\\n        ERC20(stable).safeTransfer(rewardee, INIT_STAKE);\\n\\n        emit Backfilled(feed, maturity, mscale, backfills);\\n    }\\n\\n    /* ========== INTERNAL VIEWS ========== */\\n\\n    function _exists(address feed, uint256 maturity) internal view returns (bool exists) {\\n        return address(series[feed][maturity].zero) != address(0);\\n    }\\n\\n    function _settled(address feed, uint256 maturity) internal view returns (bool settled) {\\n        return series[feed][maturity].mscale > 0;\\n    }\\n\\n    function _canBeSettled(address feed, uint256 maturity) internal view returns (bool canBeSettled) {\\n        require(!_settled(feed, maturity), Errors.AlreadySettled);\\n        uint256 cutoff = maturity + SPONSOR_WINDOW + SETTLEMENT_WINDOW;\\n        // If the sender is the sponsor for the Series\\n        if (msg.sender == series[feed][maturity].sponsor) {\\n            return maturity - SPONSOR_WINDOW <= block.timestamp && cutoff >= block.timestamp;\\n        } else {\\n            return maturity + SPONSOR_WINDOW < block.timestamp && cutoff >= block.timestamp;\\n        }\\n    }\\n\\n    function _isValid(uint256 maturity) internal view returns (bool valid) {\\n        if (maturity < block.timestamp + MIN_MATURITY || maturity > block.timestamp + MAX_MATURITY) return false;\\n\\n        (, , uint256 day, uint256 hour, uint256 minute, uint256 second) = DateTime.timestampToDateTime(maturity);\\n        if (day != 1 || hour != 0 || minute != 0 || second != 0) return false;\\n        return true;\\n    }\\n\\n    /* ========== INTERNAL HELPERS ========== */\\n\\n    function _split(address feed, uint256 maturity) internal returns (address zero, address claim) {\\n        ERC20 target = ERC20(Feed(feed).target());\\n        uint8 decimals = target.decimals();\\n        (, string memory m, string memory y) = DateTime.toDateString(maturity);\\n        string memory datestring = string(abi.encodePacked(m, \\\"-\\\", y));\\n\\n        string memory zname = string(abi.encodePacked(target.name(), \\\" \\\", datestring, \\\" \\\", ZERO_NAME_PREFIX, \\\" \\\", \\\"by Sense\\\"));\\n        string memory zsymbol = string(abi.encodePacked(ZERO_SYMBOL_PREFIX, target.symbol(), \\\":\\\", datestring));\\n        zero = address(new Zero(zname, zsymbol, decimals));\\n\\n        string memory cname = string(abi.encodePacked(target.name(), \\\" \\\", datestring, \\\" \\\", CLAIM_NAME_PREFIX, \\\" \\\", \\\"by Sense\\\"));\\n        string memory csymbol = string(abi.encodePacked(CLAIM_SYMBOL_PREFIX, target.symbol(), \\\":\\\", datestring));\\n        claim = address(new Claim(maturity, address(this), feed, cname, csymbol, decimals));\\n    }\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    modifier onlyClaim(address feed, uint256 maturity) {\\n        require(series[feed][maturity].claim == msg.sender, \\\"Can only be invoked by the Claim contract\\\");\\n        _;\\n    }\\n\\n    /* ========== EVENTS ========== */\\n\\n    event Backfilled(address indexed feed, uint256 indexed maturity, uint256 mscale, Backfill[] backfills);\\n    event Collected(address indexed feed, uint256 indexed maturity, uint256 collected);\\n    event Combined(address indexed feed, uint256 indexed maturity, uint256 balance, address indexed sender);\\n    event GuardChanged(address indexed target, uint256 indexed cap);\\n    event FeedChanged(address indexed feed, bool isOn);\\n    event Issued(address indexed feed, uint256 indexed maturity, uint256 balance, address indexed sender);\\n    event Redeemed(address indexed feed, uint256 indexed maturity, uint256 redeemed);\\n    event SeriesInitialized(address indexed feed, uint256 indexed maturity, address zero, address claim, address indexed sponsor);\\n    event SeriesSettled(address indexed feed, uint256 indexed maturity, address indexed settler);\\n    event WTargetAdded(address indexed wtarget);\\n}\\n\",\"keccak256\":\"0xd89acffcce7afeed019eb4a7ebe2aab292b156cfacaa7c4efb20673635c9b63d\",\"license\":\"UNLICENSED\"},\"src/external/DateTime.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\n// ----------------------------------------------------------------------------\\n// DateTime Library v2.0\\n//\\n// A gas-efficient Solidity date and time library\\n//\\n// https://github.com/bokkypoobah/BokkyPooBahsDateTimeLibrary\\n//\\n// Tested date range 1970/01/01 to 2345/12/31\\n//\\n// Conventions:\\n// Unit      | Range         | Notes\\n// :-------- |:-------------:|:-----\\n// timestamp | >= 0          | Unix timestamp, number of seconds since 1970/01/01 00:00:00 UTC\\n// year      | 1970 ... 2345 |\\n// month     | 1 ... 12      |\\n// day       | 1 ... 31      |\\n// hour      | 0 ... 23      |\\n// minute    | 0 ... 59      |\\n// second    | 0 ... 59      |\\n// dayOfWeek | 1 ... 7       | 1 = Monday, ..., 7 = Sunday\\n//\\n//\\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2018-2019. The MIT Licence.\\n// ----------------------------------------------------------------------------\\n\\nlibrary DateTime {\\n    uint256 constant SECONDS_PER_DAY = 24 * 60 * 60;\\n    uint256 constant SECONDS_PER_HOUR = 60 * 60;\\n    uint256 constant SECONDS_PER_MINUTE = 60;\\n    int256 constant OFFSET19700101 = 2440588;\\n\\n    function timestampToDate(uint256 timestamp) internal pure returns (uint256 year, uint256 month, uint256 day) {\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n\\n    function timestampToDateTime(uint256 timestamp) internal pure returns (uint256 year, uint256 month, uint256 day, uint256 hour, uint256 minute, uint256 second) {\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        uint256 secs = timestamp % SECONDS_PER_DAY;\\n        hour = secs / SECONDS_PER_HOUR;\\n        secs = secs % SECONDS_PER_HOUR;\\n        minute = secs / SECONDS_PER_MINUTE;\\n        second = secs % SECONDS_PER_MINUTE;\\n    }\\n\\n    function toDateString(uint256 _timestamp) internal pure returns (string memory d, string memory m, string memory y) {\\n        (uint256 year, uint256 month, uint256 day) = timestampToDate(_timestamp);\\n        d = uintToString(day);\\n        m = uintToString(month);\\n        y = uintToString(year);\\n    }\\n\\n    /// Taken from https://stackoverflow.com/questions/47129173/how-to-convert-uint-to-string-in-solidity\\n    function uintToString(uint _i) internal pure returns (string memory _uintAsString) {\\n        if (_i == 0) return \\\"0\\\";\\n        uint j = _i;\\n        uint len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint k = len;\\n        while (_i != 0) {\\n            k = k-1;\\n            uint8 temp = (48 + uint8(_i - _i / 10 * 10));\\n            bytes1 b1 = bytes1(temp);\\n            bstr[k] = b1;\\n            _i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate the number of days from 1970/01/01 to year/month/day using\\n    // the date conversion algorithm from\\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\n    // and subtracting the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // days = day\\n    //      - 32075\\n    //      + 1461 * (year + 4800 + (month - 14) / 12) / 4\\n    //      + 367 * (month - 2 - (month - 14) / 12 * 12) / 12\\n    //      - 3 * ((year + 4900 + (month - 14) / 12) / 100) / 4\\n    //      - offset\\n    // ------------------------------------------------------------------------\\n    function _daysFromDate(uint256 year, uint256 month, uint256 day) internal pure returns (uint256 _days) {\\n        require(year >= 1970);\\n        int256 _year = int256(year);\\n        int256 _month = int256(month);\\n        int256 _day = int256(day);\\n\\n        int256 __days =\\n        _day -\\n        32075 +\\n        (1461 * (_year + 4800 + (_month - 14) / 12)) /\\n        4 +\\n        (367 * (_month - 2 - ((_month - 14) / 12) * 12)) /\\n        12 -\\n        (3 * ((_year + 4900 + (_month - 14) / 12) / 100)) /\\n        4 -\\n        OFFSET19700101;\\n\\n        _days = uint256(__days);\\n    }\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate year/month/day from the number of days since 1970/01/01 using\\n    // the date conversion algorithm from\\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\n    // and adding the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // int L = days + 68569 + offset\\n    // int N = 4 * L / 146097\\n    // L = L - (146097 * N + 3) / 4\\n    // year = 4000 * (L + 1) / 1461001\\n    // L = L - 1461 * year / 4 + 31\\n    // month = 80 * L / 2447\\n    // dd = L - 2447 * month / 80\\n    // L = month / 11\\n    // month = month + 2 - 12 * L\\n    // year = 100 * (N - 49) + year + L\\n    // ------------------------------------------------------------------------\\n    function _daysToDate(uint256 _days) internal pure returns (uint256 year, uint256 month, uint256 day) {\\n        int256 __days = int256(_days);\\n\\n        int256 L = __days + 68569 + OFFSET19700101;\\n        int256 N = (4 * L) / 146097;\\n        L = L - (146097 * N + 3) / 4;\\n        int256 _year = (4000 * (L + 1)) / 1461001;\\n        L = L - (1461 * _year) / 4 + 31;\\n        int256 _month = (80 * L) / 2447;\\n        int256 _day = L - (2447 * _month) / 80;\\n        L = _month / 11;\\n        _month = _month + 2 - 12 * L;\\n        _year = 100 * (N - 49) + _year + L;\\n\\n        year = uint256(_year);\\n        month = uint256(_month);\\n        day = uint256(_day);\\n    }\\n}\\n\",\"keccak256\":\"0x9c15b6a9bf69a91d97a470866eafa3986a184e2faebffaa5d7d21a492d8c4d80\",\"license\":\"MIT\"},\"src/external/FixedMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.6;\\n\\n/// @title Fixed point arithmetic library\\n/// @author Taken from https://github.com/yieldprotocol/yield-utils-v2/blob/main/contracts/math/WDiv.sol & https://github.com/yieldprotocol/yield-utils-v2/blob/main/contracts/math/WMul.sol\\nlibrary FixedMath {\\n\\n    /// Taken from https://github.com/usmfum/USM/blob/master/contracts/FixedMath.sol\\n    /// @dev Multiply an amount by a fixed point factor with 18 decimals, rounds down\\n    function fmul(uint256 x, uint256 y, uint256 baseUnit) internal pure returns (uint256 z) {\\n        z = x * y;\\n    unchecked { z /= baseUnit; }\\n    }\\n\\n    /// Taken from https://github.com/usmfum/USM/blob/master/contracts/FixedMath.sol\\n    /// @dev Divide an amount by a fixed point factor with 18 decimals, rounds down\\n    function fdiv(uint256 x, uint256 y, uint256 baseUnit) internal pure returns (uint256 z) {\\n        z = (x * baseUnit) / y;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x8166a380b34901f96a969810299f406389db00796684d0f60e5cc9a64da21890\",\"license\":\"GPL-3.0-or-later\"},\"src/feeds/BaseFactory.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.6;\\n\\n// External references\\nimport { Clones } from \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport { Trust } from \\\"@rari-capital/solmate/src/auth/Trust.sol\\\";\\nimport { ERC20 } from \\\"@rari-capital/solmate/src/erc20/SafeERC20.sol\\\";\\n\\n// Internal references\\nimport { Errors } from \\\"../libs/errors.sol\\\";\\nimport { BaseFeed } from \\\"./BaseFeed.sol\\\";\\nimport { Divider } from \\\"../Divider.sol\\\";\\nimport { wTarget } from \\\"../wrappers/wTarget.sol\\\";\\n\\nabstract contract BaseFactory is Trust {\\n    using Clones for address;\\n\\n    uint256 MAX_INT = 2**256 - 1;\\n\\n    mapping(address => address) public feeds; // target -> feed (to check if a feed for a given target is deployed)\\n    address public protocol; // protocol's data contract address\\n    address public implementation;\\n    address public divider;\\n    uint256 public delta;\\n    address public airdropToken;\\n\\n    constructor(\\n        address _protocol,\\n        address _implementation,\\n        address _divider,\\n        uint256 _delta,\\n        address _airdropToken\\n    ) Trust(msg.sender) {\\n        protocol = _protocol;\\n        implementation = _implementation;\\n        divider = _divider;\\n        delta = _delta;\\n        airdropToken = _airdropToken;\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n    /// @notice Deploys a feed for the given _target\\n    /// @param _target Address of the target token\\n    function deployFeed(address _target) external returns (address clone, address wtarget) {\\n        require(_exists(_target), Errors.NotSupported);\\n        require(feeds[_target] == address(0), Errors.FeedAlreadyExists);\\n\\n        clone = implementation.clone();\\n        BaseFeed(clone).initialize(_target, divider, delta);\\n        Divider(divider).setFeed(clone, true);\\n        wTarget wt = new wTarget(_target, divider, airdropToken); // deploy Target Wrapper\\n        Divider(divider).setWrapper(address(wt));\\n        feeds[_target] = clone;\\n        emit FeedDeployed(clone);\\n        return (clone, address(wt));\\n    }\\n\\n    /* ========== ADMIN FUNCTIONS ========== */\\n\\n    function setDivider(address _divider) external requiresTrust {\\n        divider = _divider;\\n        emit DividerChanged(_divider);\\n    }\\n\\n    function setDelta(uint256 _delta) external requiresTrust {\\n        delta = _delta;\\n        emit DeltaChanged(_delta);\\n    }\\n\\n    function setImplementation(address _implementation) external requiresTrust {\\n        implementation = _implementation;\\n        emit ImplementationChanged(_implementation);\\n    }\\n\\n    function setProtocol(address _protocol) external requiresTrust {\\n        protocol = _protocol;\\n        emit ProtocolChanged(_protocol);\\n    }\\n\\n    /* ========== INTERNAL & HELPER FUNCTIONS ========== */\\n\\n    /// @notice Target validity check that must be overriden by child contracts\\n    function _exists(address _target) internal virtual returns (bool);\\n\\n    /* ========== EVENTS ========== */\\n\\n    event FeedDeployed(address addr);\\n    event DividerChanged(address divider);\\n    event DeltaChanged(uint256 delta);\\n    event ImplementationChanged(address implementation);\\n    event ProtocolChanged(address protocol);\\n}\\n\",\"keccak256\":\"0xc3cbe89ab20ecf013fa81161cb19f5397796326ce75fda8bd80699d9465f0ba2\",\"license\":\"UNLICENSED\"},\"src/feeds/BaseFeed.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.6;\\n\\n// External references\\nimport { Initializable } from \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport { ERC20 } from \\\"@rari-capital/solmate/src/erc20/ERC20.sol\\\";\\nimport { FixedMath } from \\\"../external/FixedMath.sol\\\";\\n\\n// Internal references\\nimport { Divider } from \\\"../Divider.sol\\\";\\nimport { Errors } from \\\"../libs/errors.sol\\\";\\n\\n/// @title Assign time-based value to target assets\\n/// @dev In most cases, the only function that will be unique to each feed type is `scale`\\nabstract contract BaseFeed is Initializable {\\n    using FixedMath for uint256;\\n\\n    address public target;\\n    address public divider; // TODO: must be hardcoded!\\n    uint256 public delta;\\n    string public name;\\n    string public symbol;\\n    LScale public lscale;\\n\\n    struct LScale {\\n        uint256 timestamp; // timestamp of the last scale value\\n        uint256 value; // last scale value\\n    }\\n\\n    function initialize(\\n        address _target,\\n        address _divider,\\n        uint256 _delta\\n    ) external virtual initializer {\\n        // TODO: only factory?\\n        // TODO: add input validation?\\n        divider = _divider;\\n        delta = _delta;\\n        target = _target;\\n        name = string(abi.encodePacked(ERC20(target).name(), \\\" Yield\\\"));\\n        symbol = string(abi.encodePacked(ERC20(target).symbol(), \\\"-yield\\\"));\\n        emit Initialized();\\n    }\\n\\n    /// @notice Calculate and return this feed's Scale value for the current timestamp\\n    /// @dev For some Targets, such as cTokens, this is simply the exchange rate,\\n    /// or `supply cToken / supply underlying`\\n    /// @dev For other Targets, such as AMM LP shares, specialized logic will be required\\n    /// @return _value WAD Scale value\\n    function scale() external virtual returns (uint256 _value) {\\n        _value = _scale();\\n        uint256 lvalue = lscale.value;\\n        require(_value >= lvalue, Errors.InvalidScaleValue);\\n        uint256 timeDiff = block.timestamp - lscale.timestamp;\\n        if (timeDiff > 0 && lvalue != 0) {\\n            uint256 growthPerSec = (_value - lvalue).fdiv(lvalue * timeDiff, 10**ERC20(target).decimals());\\n            if (growthPerSec > delta) revert(Errors.InvalidScaleValue);\\n        }\\n        if (_value != lscale.value) {\\n            // update value only if different than previous\\n            lscale.value = _value;\\n            lscale.timestamp = block.timestamp;\\n        }\\n    }\\n\\n    /// @notice Actual scale value check that must be overriden by child contracts\\n    function _scale() internal virtual returns (uint256 _value);\\n\\n    event Initialized();\\n}\\n\",\"keccak256\":\"0x0ee1ad30f69042da90f11096d79c21656177d9686d0a9588a8a84e740d9ada4c\",\"license\":\"UNLICENSED\"},\"src/feeds/compound/CFactory.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.6;\\n\\n// internal references\\nimport { BaseFactory } from \\\"../BaseFactory.sol\\\";\\n\\ninterface Comptroller {\\n    function markets(address target) external returns (bool isListed, uint collateralFactorMantissa, bool isComped);\\n}\\n\\ncontract CFactory is BaseFactory {\\n    constructor(\\n        address _implementation,\\n        address _divider,\\n        uint256 _delta,\\n        address _airdropToken\\n    ) BaseFactory(0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B, _implementation, _divider, _delta, _airdropToken) {}\\n\\n    function _exists(address _target) internal override virtual returns (bool) {\\n        (bool isListed, , ) = Comptroller(protocol).markets(_target);\\n        return isListed;\\n    }\\n}\\n\",\"keccak256\":\"0xe55e84c5980faee427676ae227c8c2180bee14dca94c10aca29cefd5cfb28820\",\"license\":\"UNLICENSED\"},\"src/libs/errors.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.6;\\n\\n/// @notice Program error types\\nlibrary Errors {\\n    string constant AlreadySettled = \\\"Series has already been settled\\\";\\n    string constant CollectNotSettled = \\\"Cannot collect if Series is at or after maturity and it has not been settled\\\";\\n    string constant DuplicateSeries = \\\"Series with given maturity already exists\\\";\\n    string constant ExistingValue = \\\"New value must be different than previous\\\";\\n    string constant FeedAlreadyExists = \\\"Feed already exists\\\";\\n    string constant GuardCapReached = \\\"Issuance cap reached\\\";\\n    string constant IssueOnSettled = \\\"Cannot issue if Series is settled\\\";\\n    string constant InvalidFeed = \\\"Invalid feed address or feed is not enabled\\\";\\n    string constant InvalidMaturity = \\\"Maturity date is not valid\\\";\\n    string constant InvalidScaleValue = \\\"Scale value is invalid\\\";\\n    string constant NotAuthorized = \\\"UNTRUSTED\\\"; // We copy the error message used by solmate's `Trust` auth lib\\n    string constant NotEnoughClaims = \\\"Not enough claims to collect given target balance\\\";\\n    string constant SeriesDoesntExists = \\\"Series does not exist\\\";\\n    string constant NotSettled = \\\"Series must be settled\\\";\\n    string constant NotSupported = \\\"Target is not supported\\\";\\n    string constant OutOfWindowBoundaries = \\\"Can not settle Series outside the time window boundaries\\\";\\n    string constant TransferFromFailed = \\\"TRANSFER_FROM_FAILED\\\";\\n    string constant ZeroBalance = \\\"Balance must be greater than 0\\\";\\n}\\n\",\"keccak256\":\"0x8614cabb35b0ecd94f193a654e3ebd7f4f02f86bce7d433b7c0024fb797501a0\",\"license\":\"UNLICENSED\"},\"src/tokens/Claim.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.6;\\n\\n// Internal references\\nimport { Divider } from \\\"../Divider.sol\\\";\\nimport { Token } from \\\"./Token.sol\\\";\\n\\n/// @title Claim token contract that allows excess collection pre-maturity\\ncontract Claim is Token {\\n    uint256 public maturity;\\n    address public divider;\\n    address public feed;\\n\\n    constructor(\\n        uint256 _maturity,\\n        address _divider,\\n        address _feed,\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) Token(_name, _symbol, _decimals) {\\n        maturity = _maturity;\\n        divider = _divider;\\n        feed = _feed;\\n    }\\n\\n    function collect() external returns (uint256 _collected) {\\n        return Divider(divider).collect(msg.sender, feed, maturity, address(0));\\n    }\\n\\n    function transfer(address to, uint256 value) public override returns (bool) {\\n        Divider(divider).collect(msg.sender, feed, maturity, to);\\n        super.transfer(to, value);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) public override returns (bool) {\\n        Divider(divider).collect(from, feed, maturity, to);\\n        super.transferFrom(from, to, value);\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x71019135aa984b657b15de2119301dee4f8284e3b76aee49bdbb906f01dde673\",\"license\":\"UNLICENSED\"},\"src/tokens/Token.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.6;\\n\\n// External references\\nimport { ERC20 } from \\\"@rari-capital/solmate/src/erc20/ERC20.sol\\\";\\nimport { Trust } from \\\"@rari-capital/solmate/src/auth/Trust.sol\\\";\\n\\ncontract Token is ERC20, Trust {\\n    uint256 public immutable BASE_UNIT;\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) ERC20(_name, _symbol, _decimals) Trust(msg.sender) {\\n        BASE_UNIT = 10**_decimals;\\n    }\\n\\n    /// @param usr The address to send the minted tokens\\n    /// @param amount The amount to be minted\\n    function mint(address usr, uint256 amount) public requiresTrust {\\n        _mint(usr, amount);\\n        emit Mint(usr, amount);\\n    }\\n\\n    /// @param usr The address from where to burn tokens from\\n    /// @param amount The amount to be burned\\n    function burn(address usr, uint256 amount) public requiresTrust {\\n        _burn(usr, amount);\\n        emit Burn(usr, amount);\\n    }\\n\\n    /* ========== EVENTS ========== */\\n\\n    event Mint(address indexed usr, uint256 amount);\\n    event Burn(address indexed usr, uint256 amount);\\n}\\n\",\"keccak256\":\"0x968b2c41dc0ead0dfd8194d00b503d556d115912da1f4541f38c80bd84edacb1\",\"license\":\"UNLICENSED\"},\"src/wrappers/wTarget.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.6;\\n\\n// External references\\nimport { ERC20, SafeERC20 } from \\\"@rari-capital/solmate/src/erc20/SafeERC20.sol\\\";\\nimport { Trust } from \\\"@rari-capital/solmate/src/auth/Trust.sol\\\";\\nimport { FixedMath } from \\\"../external/FixedMath.sol\\\";\\n\\n// Internal\\nimport { Divider } from \\\"../Divider.sol\\\";\\nimport { BaseFeed as Feed } from \\\"../feeds/BaseFeed.sol\\\";\\n\\n/// @notice\\ncontract wTarget is Trust {\\n    using SafeERC20 for ERC20;\\n    using FixedMath for uint256;\\n\\n    /// @notice Configuration\\n    uint256 MAX_INT = 2**256 - 1;\\n\\n    /// @notice Mutable program state\\n    address public target;\\n    address public airdropToken;\\n    address public divider;\\n    mapping(address => uint256) public tBalances; // usr -> amount of airdrop tokens distributed\\n    mapping(address => uint256) public distributed; // usr -> amount of airdrop tokens distributed\\n\\n    constructor(\\n        address _target,\\n        address _divider,\\n        address _airdropToken\\n    ) Trust(msg.sender) {\\n        target = _target;\\n        airdropToken = _airdropToken;\\n        divider = _divider;\\n        ERC20(target).approve(divider, MAX_INT);\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n    /// @notice Distributes airdropped tokens to Claim holders proportionally based on Claim balance\\n    /// @param _feed Feed to associate with the Series\\n    /// @param _maturity Maturity date\\n    /// @param _usr User to distribute airdrop tokens to\\n    function distribute(\\n        address _feed,\\n        uint256 _maturity,\\n        address _usr,\\n        uint256 collected\\n    ) external {\\n        (, address claim, , , , , ) = Divider(divider).series(_feed, _maturity);\\n        // uint256 scale = Divider(msg.sender).lscales(_feed, _maturity, _usr);\\n        // uint256 tBal = ERC20(_zero).balanceOf(_usr).fdiv(scale, 10**ERC20(target).decimals());\\n        // uint amount = (tBal / ERC20(target).balanceOf(address(this))) *\\n        // ERC20(airdropToken).balanceOf(address(this)) - distributed[_usr];\\n        uint256 amount = ERC20(claim).totalSupply() == 0\\n            ? 0\\n            : (ERC20(claim).balanceOf(_usr) / ERC20(claim).totalSupply()) *\\n                (ERC20(airdropToken).balanceOf(address(this)) - distributed[_usr]);\\n        // uint amount = ERC20(claim).totalSupply() == 0\\n        // ? 0\\n        // : (ERC20(claim).balanceOf(_usr) / ERC20(claim).totalSupply()) *\\n        // ERC20(airdropToken).balanceOf(address(this)) - distributed[_usr];\\n        emit Hi(ERC20(claim).totalSupply());\\n        emit Hi(ERC20(claim).balanceOf(_usr));\\n        emit Hi((ERC20(claim).balanceOf(_usr) / ERC20(claim).totalSupply()));\\n        emit Hi(ERC20(airdropToken).balanceOf(address(this)));\\n        emit Hi(amount);\\n\\n        distributed[_usr] += amount;\\n        ERC20(airdropToken).transfer(_usr, amount);\\n        emit Distributed(_usr, airdropToken, amount);\\n    }\\n\\n    /* ========== EVENTS ========== */\\n    event Distributed(address indexed usr, address indexed token, uint256 indexed amount);\\n    event Hi(uint256 h);\\n}\\n\",\"keccak256\":\"0xad9c42820982e9bd5e9ece207a19447537041474e526143352b11df7f6994db6\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405260001960015534801561001657600080fd5b506040516118e93803806118e98339810160408190526100359161011e565b3360008181526020818152604091829020805460ff191660019081179091559151918252733d9819210a31b4961b30ef54be2aed79b9c9cd3b928792879287928792909182917fe95aec380cae16330d146d5499ef7db6f3657e477104a733e771bc09e500d986910160405180910390a250600380546001600160a01b039687166001600160a01b03199182161790915560048054958716958216959095179094556005805493861693851693909317909255600655600780549190931691161790555061016b92505050565b80516001600160a01b038116811461011957600080fd5b919050565b6000806000806080858703121561013457600080fd5b61013d85610102565b935061014b60208601610102565b92506040850151915061016060608601610102565b905092959194509250565b61176f8061017a6000396000f3fe608060405234801561001057600080fd5b50600436106100bf5760003560e01c8063378efa371161007c578063378efa37146101845780634d06068a146101975780635c60da1b146101aa5780638ce74426146101bd57806396d64879146101d05780639e1991bc14610203578063d784d4261461021657600080fd5b8063025ff0a5146100c45780630581771c146100d95780630a9d793d1461011157806312b495a8146101245780631393916a1461013b5780632fba4aa91461014e575b600080fd5b6100d76100d236600461096f565b610229565b005b6100ec6100e73660046108d3565b61029d565b604080516001600160a01b039384168152929091166020830152015b60405180910390f35b6100d761011f3660046108d3565b610587565b61012d60065481565b604051908152602001610108565b6100d76101493660046108f5565b610601565b61017761015c3660046108d3565b6002602052600090815260409020546001600160a01b031681565b6040516101089190610988565b600554610177906001600160a01b031681565b600754610177906001600160a01b031681565b600454610177906001600160a01b031681565b600354610177906001600160a01b031681565b6101f36101de3660046108d3565b60006020819052908152604090205460ff1681565b6040519015158152602001610108565b6100d76102113660046108d3565b61068d565b6100d76102243660046108d3565b610707565b3360009081526020819052604090205460ff166102615760405162461bcd60e51b8152600401610258906109f1565b60405180910390fd5b60068190556040518181527f97a9e80a219b5a7a3e31cad6874bf9a41e1f9b57727cd8b25d9352c6dff1df5b906020015b60405180910390a150565b6000806102a983610781565b6040518060400160405280601781526020017615185c99d95d081a5cc81b9bdd081cdd5c1c1bdc9d1959604a1b815250906102f75760405162461bcd60e51b8152600401610258919061099c565b506001600160a01b0383811660009081526002602090815260409182902054825180840190935260138352724665656420616c72656164792065786973747360681b91830191909152909116156103615760405162461bcd60e51b8152600401610258919061099c565b50600454610377906001600160a01b0316610812565b6005546006546040516305e52ecf60e21b81526001600160a01b03878116600483015292831660248201526044810191909152919350831690631794bb3c90606401600060405180830381600087803b1580156103d357600080fd5b505af11580156103e7573d6000803e3d6000fd5b50506005546040516331f1cf3560e21b81526001600160a01b03868116600483015260016024830152909116925063c7c73cd49150604401600060405180830381600087803b15801561043957600080fd5b505af115801561044d573d6000803e3d6000fd5b5050600554600754604051600094508793506001600160a01b039283169290911690610478906108af565b6001600160a01b03938416815291831660208301529091166040820152606001604051809103906000f0801580156104b4573d6000803e3d6000fd5b5060055460405163c2167d9360e01b81529192506001600160a01b03169063c2167d93906104e6908490600401610988565b600060405180830381600087803b15801561050057600080fd5b505af1158015610514573d6000803e3d6000fd5b505050506001600160a01b038481166000908152600260205260409081902080546001600160a01b03191692861692909217909155517f6625b50f85bc9b983d1edb72ff22dd0391166673bd5a0e3ad061ae27690d393490610577908590610988565b60405180910390a1919391925050565b3360009081526020819052604090205460ff166105b65760405162461bcd60e51b8152600401610258906109f1565b600380546001600160a01b0319166001600160a01b0383161790556040517f15b84596b3c567ae2998116949ae5f2d47f3055c12d9053db4d6e50f4c794dd990610292908390610988565b3360009081526020819052604090205460ff166106305760405162461bcd60e51b8152600401610258906109f1565b6001600160a01b03821660008181526020818152604091829020805460ff191685151590811790915591519182527fe95aec380cae16330d146d5499ef7db6f3657e477104a733e771bc09e500d986910160405180910390a25050565b3360009081526020819052604090205460ff166106bc5760405162461bcd60e51b8152600401610258906109f1565b600580546001600160a01b0319166001600160a01b0383161790556040517f18590070e5b081bc1b0ca0231791392f05752a341aca711640503809a737d36190610292908390610988565b3360009081526020819052604090205460ff166107365760405162461bcd60e51b8152600401610258906109f1565b600480546001600160a01b0319166001600160a01b0383161790556040517f2989b377844ae55f0ca303ad21490d8519f8cf871ad6b5ba3dbec736bb54c63f90610292908390610988565b600354604051638e8f294b60e01b815260009182916001600160a01b0390911690638e8f294b906107b6908690600401610988565b606060405180830381600087803b1580156107d057600080fd5b505af11580156107e4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610808919061092c565b5090949350505050565b6000604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528260601b60148201526e5af43d82803e903d91602b57fd5bf360881b60288201526037816000f09150506001600160a01b0381166108aa5760405162461bcd60e51b8152602060048201526016602482015275115490cc4c4d8dce8818dc99585d194819985a5b195960521b6044820152606401610258565b919050565b610d1480610a2683390190565b80356001600160a01b03811681146108aa57600080fd5b6000602082840312156108e557600080fd5b6108ee826108bc565b9392505050565b6000806040838503121561090857600080fd5b610911836108bc565b9150602083013561092181610a14565b809150509250929050565b60008060006060848603121561094157600080fd5b835161094c81610a14565b60208501516040860151919450925061096481610a14565b809150509250925092565b60006020828403121561098157600080fd5b5035919050565b6001600160a01b0391909116815260200190565b600060208083528351808285015260005b818110156109c9578581018301518582016040015282016109ad565b818111156109db576000604083870101525b50601f01601f1916929092016040019392505050565b602080825260099082015268155395149554d5115160ba1b604082015260600190565b8015158114610a2257600080fd5b5056fe608060405260001960015534801561001657600080fd5b50604051610d14380380610d148339810160408190526100359161015f565b3360008181526020818152604091829020805460ff19166001908117909155915191825282917fe95aec380cae16330d146d5499ef7db6f3657e477104a733e771bc09e500d986910160405180910390a250600280546001600160a01b038581166001600160a01b031992831681179093556003805485831690841617905560048054918616919092168117825560015460405163095ea7b360e01b815292830191909152602482015263095ea7b390604401602060405180830381600087803b15801561010257600080fd5b505af1158015610116573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061013a91906101a2565b505050506101cb565b80516001600160a01b038116811461015a57600080fd5b919050565b60008060006060848603121561017457600080fd5b61017d84610143565b925061018b60208501610143565b915061019960408501610143565b90509250925092565b6000602082840312156101b457600080fd5b815180151581146101c457600080fd5b9392505050565b610b3a806101da6000396000f3fe608060405234801561001057600080fd5b50600436106100785760003560e01c80631393916a1461007d578063378efa37146100925780634d06068a146100bb578063578bcf35146100ce57806396d64879146100fc578063aadbe18f1461012f578063b6ea46b01461014f578063d4b8399214610162575b600080fd5b61009061008b36600461096d565b610175565b005b6004546100a5906001600160a01b031681565b6040516100b29190610a24565b60405180910390f35b6003546100a5906001600160a01b031681565b6100ee6100dc3660046108d5565b60066020526000908152604090205481565b6040519081526020016100b2565b61011f61010a3660046108d5565b60006020819052908152604090205460ff1681565b60405190151581526020016100b2565b6100ee61013d3660046108d5565b60056020526000908152604090205481565b61009061015d3660046109a6565b610221565b6002546100a5906001600160a01b031681565b3360009081526020819052604090205460ff166101c45760405162461bcd60e51b8152602060048201526009602482015268155395149554d5115160ba1b604482015260640160405180910390fd5b6001600160a01b03821660008181526020818152604091829020805460ff191685151590811790915591519182527fe95aec380cae16330d146d5499ef7db6f3657e477104a733e771bc09e500d986910160405180910390a25050565b60048054604051630448e98560e11b81526001600160a01b03878116938201939093526024810186905260009290911690630891d30a9060440160e06040518083038186803b15801561027357600080fd5b505afa158015610287573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ab91906108f9565b50505050509150506000816001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156102ee57600080fd5b505afa158015610302573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103269190610a0b565b156104d1576001600160a01b03808516600090815260066020526040908190205460035491516370a0823160e01b8152909291909116906370a0823190610371903090600401610a24565b60206040518083038186803b15801561038957600080fd5b505afa15801561039d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103c19190610a0b565b6103cb9190610a91565b826001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561040457600080fd5b505afa158015610418573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061043c9190610a0b565b6040516370a0823160e01b81526001600160a01b038516906370a0823190610468908990600401610a24565b60206040518083038186803b15801561048057600080fd5b505afa158015610494573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b89190610a0b565b6104c29190610a50565b6104cc9190610a72565b6104d4565b60005b9050600080516020610ae5833981519152826001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561051e57600080fd5b505afa158015610532573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105569190610a0b565b60405190815260200160405180910390a16040516370a0823160e01b8152600080516020610ae5833981519152906001600160a01b038416906370a08231906105a3908890600401610a24565b60206040518083038186803b1580156105bb57600080fd5b505afa1580156105cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f39190610a0b565b60405190815260200160405180910390a1600080516020610ae5833981519152826001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561064c57600080fd5b505afa158015610660573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106849190610a0b565b6040516370a0823160e01b81526001600160a01b038516906370a08231906106b0908990600401610a24565b60206040518083038186803b1580156106c857600080fd5b505afa1580156106dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107009190610a0b565b61070a9190610a50565b60405190815260200160405180910390a16003546040516370a0823160e01b8152600080516020610ae5833981519152916001600160a01b0316906370a0823190610759903090600401610a24565b60206040518083038186803b15801561077157600080fd5b505afa158015610785573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a99190610a0b565b60405190815260200160405180910390a1604051818152600080516020610ae58339815191529060200160405180910390a16001600160a01b03841660009081526006602052604081208054839290610803908490610a38565b909155505060035460405163a9059cbb60e01b81526001600160a01b038681166004830152602482018490529091169063a9059cbb90604401602060405180830381600087803b15801561085657600080fd5b505af115801561086a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061088e91906109ee565b5060035460405182916001600160a01b0390811691908716907fad4a9acf26d8bba7a8cf1a41160d59be042ee554578e256c98d2ab74cdd4354290600090a4505050505050565b6000602082840312156108e757600080fd5b81356108f281610abe565b9392505050565b600080600080600080600060e0888a03121561091457600080fd5b875161091f81610abe565b602089015190975061093081610abe565b604089015190965061094181610abe565b80955050606088015193506080880151925060a0880151915060c0880151905092959891949750929550565b6000806040838503121561098057600080fd5b823561098b81610abe565b9150602083013561099b81610ad6565b809150509250929050565b600080600080608085870312156109bc57600080fd5b84356109c781610abe565b93506020850135925060408501356109de81610abe565b9396929550929360600135925050565b600060208284031215610a0057600080fd5b81516108f281610ad6565b600060208284031215610a1d57600080fd5b5051919050565b6001600160a01b0391909116815260200190565b60008219821115610a4b57610a4b610aa8565b500190565b600082610a6d57634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615610a8c57610a8c610aa8565b500290565b600082821015610aa357610aa3610aa8565b500390565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b0381168114610ad357600080fd5b50565b8015158114610ad357600080fdfe9144e1e2e3507b17fc6668db38d7d405740a32037f971e97b977d571cb7ac56fa26469706673582212204e707564185fa4e3eafec99b40f1d2c3a45c6f195c844effaa9a96a64c3316e264736f6c63430008060033a26469706673582212207da1ccb043f8d1c65be70fe64a03227fd900508df63657ae30e3b25813f3335d64736f6c63430008060033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "deployFeed(address)": {
        "params": {
          "_target": "Address of the target token"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "deployFeed(address)": {
        "notice": "Deploys a feed for the given _target"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 138,
        "contract": "src/feeds/compound/CFactory.sol:CFactory",
        "label": "isTrusted",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 3025,
        "contract": "src/feeds/compound/CFactory.sol:CFactory",
        "label": "MAX_INT",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 3029,
        "contract": "src/feeds/compound/CFactory.sol:CFactory",
        "label": "feeds",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 3031,
        "contract": "src/feeds/compound/CFactory.sol:CFactory",
        "label": "protocol",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 3033,
        "contract": "src/feeds/compound/CFactory.sol:CFactory",
        "label": "implementation",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 3035,
        "contract": "src/feeds/compound/CFactory.sol:CFactory",
        "label": "divider",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 3037,
        "contract": "src/feeds/compound/CFactory.sol:CFactory",
        "label": "delta",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 3039,
        "contract": "src/feeds/compound/CFactory.sol:CFactory",
        "label": "airdropToken",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}