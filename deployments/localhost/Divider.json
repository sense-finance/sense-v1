{
  "address": "0x04C89607413713Ec9775E14b954286519d836FEf",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stable",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_cup",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "feed",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "mscale",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "usr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "lscale",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct Divider.Backfill[]",
          "name": "backfills",
          "type": "tuple[]"
        }
      ],
      "name": "Backfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "feed",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "collected",
          "type": "uint256"
        }
      ],
      "name": "Collected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "feed",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "Combined",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "feed",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isOn",
          "type": "bool"
        }
      ],
      "name": "FeedChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "cap",
          "type": "uint256"
        }
      ],
      "name": "GuardChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "feed",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "Issued",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "feed",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "redeemed",
          "type": "uint256"
        }
      ],
      "name": "Redeemed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "feed",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "zero",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "claim",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sponsor",
          "type": "address"
        }
      ],
      "name": "SeriesInitialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "feed",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "settler",
          "type": "address"
        }
      ],
      "name": "SeriesSettled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "trusted",
          "type": "bool"
        }
      ],
      "name": "UserTrustUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "wtarget",
          "type": "address"
        }
      ],
      "name": "WTargetAdded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "INIT_STAKE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ISSUANCE_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_MATURITY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_MATURITY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SETTLEMENT_WINDOW",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SPONSOR_WINDOW",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "feed",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "mscale",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "usr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "lscale",
              "type": "uint256"
            }
          ],
          "internalType": "struct Divider.Backfill[]",
          "name": "backfills",
          "type": "tuple[]"
        }
      ],
      "name": "backfillScale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "usr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "feed",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "collect",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "collected",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "feed",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "uBal",
          "type": "uint256"
        }
      ],
      "name": "combine",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cup",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "feeds",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "guards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "feed",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        }
      ],
      "name": "initSeries",
      "outputs": [
        {
          "internalType": "address",
          "name": "zero",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "claim",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isTrusted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "feed",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tBal",
          "type": "uint256"
        }
      ],
      "name": "issue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lscales",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "feed",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "uBal",
          "type": "uint256"
        }
      ],
      "name": "redeemZero",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "series",
      "outputs": [
        {
          "internalType": "address",
          "name": "zero",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "claim",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "sponsor",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "issuance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "iscale",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "mscale",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "feed",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isOn",
          "type": "bool"
        }
      ],
      "name": "setFeed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "cap",
          "type": "uint256"
        }
      ],
      "name": "setGuard",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "trusted",
          "type": "bool"
        }
      ],
      "name": "setIsTrusted",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wtarget",
          "type": "address"
        }
      ],
      "name": "setWrapper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "feed",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        }
      ],
      "name": "settleSeries",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stable",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "wtargets",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xe06ab1626f3573eab55d6e0ecf025ac35f66f1e8b796027d7021412e74fff24f",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x04C89607413713Ec9775E14b954286519d836FEf",
    "transactionIndex": 0,
    "gasUsed": "5913961",
    "logsBloom": "0x
    "blockHash": "0x6b159a4ef6279268cbe397ec1b801560bc051e592fdb1eaa5c39a021ed9234df",
    "transactionHash": "0xe06ab1626f3573eab55d6e0ecf025ac35f66f1e8b796027d7021412e74fff24f",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 13407365,
        "transactionHash": "0xe06ab1626f3573eab55d6e0ecf025ac35f66f1e8b796027d7021412e74fff24f",
        "address": "0x04C89607413713Ec9775E14b954286519d836FEf",
        "topics": [
          "0xe95aec380cae16330d146d5499ef7db6f3657e477104a733e771bc09e500d986",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 0,
        "blockHash": "0x6b159a4ef6279268cbe397ec1b801560bc051e592fdb1eaa5c39a021ed9234df"
      }
    ],
    "blockNumber": 13407365,
    "cumulativeGasUsed": "5913961",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6b175474e89094c44da98b954eedeac495271d0f",
    "0x0000000000000000000000000000000000000000"
  ],
  "solcInputHash": "7c5715d138b09e9a9a5e2707a1a686c2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stable\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cup\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feed\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mscale\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lscale\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct Divider.Backfill[]\",\"name\":\"backfills\",\"type\":\"tuple[]\"}],\"name\":\"Backfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feed\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collected\",\"type\":\"uint256\"}],\"name\":\"Collected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feed\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"Combined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feed\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isOn\",\"type\":\"bool\"}],\"name\":\"FeedChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"}],\"name\":\"GuardChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feed\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"Issued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feed\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"redeemed\",\"type\":\"uint256\"}],\"name\":\"Redeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feed\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"zero\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"claim\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"}],\"name\":\"SeriesInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feed\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"settler\",\"type\":\"address\"}],\"name\":\"SeriesSettled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"trusted\",\"type\":\"bool\"}],\"name\":\"UserTrustUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wtarget\",\"type\":\"address\"}],\"name\":\"WTargetAdded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"INIT_STAKE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ISSUANCE_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_MATURITY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_MATURITY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SETTLEMENT_WINDOW\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SPONSOR_WINDOW\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feed\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mscale\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lscale\",\"type\":\"uint256\"}],\"internalType\":\"struct Divider.Backfill[]\",\"name\":\"backfills\",\"type\":\"tuple[]\"}],\"name\":\"backfillScale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feed\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"collect\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"collected\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feed\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"uBal\",\"type\":\"uint256\"}],\"name\":\"combine\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cup\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeds\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"guards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feed\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"}],\"name\":\"initSeries\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"zero\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"claim\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isTrusted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feed\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tBal\",\"type\":\"uint256\"}],\"name\":\"issue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lscales\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feed\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"uBal\",\"type\":\"uint256\"}],\"name\":\"redeemZero\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"series\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"zero\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"claim\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"issuance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"iscale\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mscale\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feed\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isOn\",\"type\":\"bool\"}],\"name\":\"setFeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"}],\"name\":\"setGuard\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"trusted\",\"type\":\"bool\"}],\"name\":\"setIsTrusted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wtarget\",\"type\":\"address\"}],\"name\":\"setWrapper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feed\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"}],\"name\":\"settleSeries\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stable\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"wtargets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"fedealconada + jparklev\",\"kind\":\"dev\",\"methods\":{\"backfillScale(address,uint256,uint256,(address,uint256)[])\":{\"params\":{\"backfills\":\"Values to set on lscales mapping\",\"feed\":\"Feed's address\",\"maturity\":\"Maturity date for the Series\",\"mscale\":\"Value to set as the Series' Scale value at maturity\"}},\"collect(address,address,uint256,address)\":{\"details\":\"Burns the claim tokens if it's currently at or after maturity as this will be the last possible collectIf `to` is set, we copy the lscale value from usr to this address\",\"params\":{\"feed\":\"Feed address for the Series\",\"maturity\":\"Maturity date for the Series\",\"to\":\"address to set the lscale value from usr\",\"usr\":\"User who's collecting for their Claims\"}},\"combine(address,uint256,uint256)\":{\"details\":\"Explicitly burns claims before maturity, and implicitly does it at/after maturity through collect()\",\"params\":{\"feed\":\"Feed address for the Series\",\"maturity\":\"Maturity date for the Series\",\"uBal\":\"Balance of Zeros and Claims to burn\"}},\"initSeries(address,uint256)\":{\"details\":\"Deploys two ERC20 contracts, one for each Zero typeTransfers some fixed amount of stable asset to this contract\",\"params\":{\"feed\":\"Feed to associate with the Series\",\"maturity\":\"Maturity date for the new Series, in units of unix time\"}},\"issue(address,uint256,uint256)\":{\"params\":{\"feed\":\"Feed address for the Series\",\"maturity\":\"Maturity date for the Series\",\"tBal\":\"Balance of Target to deposit the amount of Zeros/Claims minted will be the equivelent value in units of underlying (less fees)\"}},\"redeemZero(address,uint256,uint256)\":{\"details\":\"The balance of redeemable Target is a function of the change in Scale\",\"params\":{\"feed\":\"Feed address for the Series\",\"maturity\":\"Maturity date for the Series\",\"uBal\":\"Amount of Zeros to burn, which should be equivelent to the amount of Underlying owed to the caller\"}},\"setFeed(address,bool)\":{\"params\":{\"feed\":\"Feed's address\",\"isOn\":\"Flag setting this feed to enabled or disabled\"}},\"setGuard(address,uint256)\":{\"params\":{\"cap\":\"The max target that can be deposited on the Divider\",\"target\":\"Target address\"}},\"setWrapper(address)\":{\"params\":{\"wtarget\":\"Wrapped Target address\"}},\"settleSeries(address,uint256)\":{\"details\":\"The Series' sponsor has a buffer where only they can settle the SeriesAfter the buffer, the reward becomes MEV\",\"params\":{\"feed\":\"Feed to associate with the Series\",\"maturity\":\"Maturity date for the new Series\"}}},\"title\":\"Sense Divider: Divide Assets in Two\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"ISSUANCE_FEE()\":{\"notice\":\"Configuration\"},\"backfillScale(address,uint256,uint256,(address,uint256)[])\":{\"notice\":\"Backfill a Series' Scale value at maturity if keepers failed to settle it\"},\"collect(address,address,uint256,address)\":{\"notice\":\"Collect Claim excess before, at, or after maturity\"},\"combine(address,uint256,uint256)\":{\"notice\":\"Reconstitute Target by burning Zeros and Claims\"},\"initSeries(address,uint256)\":{\"notice\":\"Initializes a new Series\"},\"issue(address,uint256,uint256)\":{\"notice\":\"Mint Zeros and Claims of a specific Series\"},\"redeemZero(address,uint256,uint256)\":{\"notice\":\"Burn Zeros of a Series once its been settled\"},\"setFeed(address,bool)\":{\"notice\":\"Enable or disable a feed\"},\"setGuard(address,uint256)\":{\"notice\":\"Set target's guard\"},\"setWrapper(address)\":{\"notice\":\"Adds wrapped target to wtargets mapping\"},\"settleSeries(address,uint256)\":{\"notice\":\"Settles a Series and transfer the settlement reward to the caller\"},\"stable()\":{\"notice\":\"Mutable program state\"}},\"notice\":\"You can use this contract to issue, combine, and redeem Sense ERC20 Zeros and Claims\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/Divider.sol\":\"Divider\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@rari-capital/solmate/src/auth/Trust.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.7.0;\\n\\n/// @notice Ultra minimal authorization logic for smart contracts.\\n/// @author Inspired by Dappsys V2 (https://github.com/dapp-org/dappsys-v2/blob/main/src/auth.sol)\\nabstract contract Trust {\\n    /*///////////////////////////////////////////////////////////////\\n                                  EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event UserTrustUpdated(address indexed user, bool trusted);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              TRUST STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    mapping(address => bool) public isTrusted;\\n\\n    constructor(address user) {\\n        isTrusted[user] = true;\\n\\n        emit UserTrustUpdated(user, true);\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                         TRUST MODIFIER FUNCTIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function setIsTrusted(address user, bool trusted) public requiresTrust {\\n        isTrusted[user] = trusted;\\n\\n        emit UserTrustUpdated(user, trusted);\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              TRUST LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    modifier requiresTrust() {\\n        require(isTrusted[msg.sender], \\\"UNTRUSTED\\\");\\n\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x5626e9634132d73cb032ca9176cdbb79de7d8b6f58586804cfc0140da2e04134\",\"license\":\"AGPL-3.0-only\"},\"@rari-capital/solmate/src/erc20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\\nabstract contract ERC20 {\\n    /*///////////////////////////////////////////////////////////////\\n                                  EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                             METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    uint8 public immutable decimals;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              ERC20 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                         PERMIT/EIP-2612 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    bytes32 public constant PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n    bytes32 public immutable DOMAIN_SEPARATOR;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n\\n        DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(\\n                keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                keccak256(bytes(name)),\\n                keccak256(bytes(\\\"1\\\")),\\n                block.chainid,\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              ERC20 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        allowance[msg.sender][spender] = value;\\n\\n        emit Approval(msg.sender, spender, value);\\n\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        balanceOf[msg.sender] -= value;\\n\\n        // This is safe because the sum of all user\\n        // balances can't exceed type(uint256).max!\\n        unchecked {\\n            balanceOf[to] += value;\\n        }\\n\\n        emit Transfer(msg.sender, to, value);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) public virtual returns (bool) {\\n        if (allowance[from][msg.sender] != type(uint256).max) {\\n            allowance[from][msg.sender] -= value;\\n        }\\n\\n        balanceOf[from] -= value;\\n\\n        // This is safe because the sum of all user\\n        // balances can't exceed type(uint256).max!\\n        unchecked {\\n            balanceOf[to] += value;\\n        }\\n\\n        emit Transfer(from, to, value);\\n\\n        return true;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                          PERMIT/EIP-2612 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                DOMAIN_SEPARATOR,\\n                keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\\n            )\\n        );\\n\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"INVALID_PERMIT_SIGNATURE\\\");\\n\\n        allowance[recoveredAddress][spender] = value;\\n\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                          INTERNAL UTILS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 value) internal {\\n        totalSupply += value;\\n\\n        // This is safe because the sum of all user\\n        // balances can't exceed type(uint256).max!\\n        unchecked {\\n            balanceOf[to] += value;\\n        }\\n\\n        emit Transfer(address(0), to, value);\\n    }\\n\\n    function _burn(address from, uint256 value) internal {\\n        balanceOf[from] -= value;\\n\\n        // This is safe because a user won't ever\\n        // have a balance larger than totalSupply!\\n        unchecked {\\n            totalSupply -= value;\\n        }\\n\\n        emit Transfer(from, address(0), value);\\n    }\\n}\\n\",\"keccak256\":\"0x4824edadf3ed7ce4dc3f0fdb47b5a7a08de80aba2a657f7a68212ea34a9c81a4\",\"license\":\"AGPL-3.0-only\"},\"@rari-capital/solmate/src/erc20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport {ERC20} from \\\"./ERC20.sol\\\";\\n\\n/// @notice Safe ERC20 and ETH transfer library that safely handles missing return values.\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v3-periphery/blob/main/contracts/libraries/TransferHelper.sol)\\nlibrary SafeERC20 {\\n    function safeTransferFrom(\\n        ERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(ERC20.transferFrom.selector, from, to, value)\\n        );\\n\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        ERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(ERC20.transfer.selector, to, value)\\n        );\\n\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeApprove(\\n        ERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(ERC20.approve.selector, to, value)\\n        );\\n\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"APPROVE_FAILED\\\");\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n\\n        require(success, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x4f46a609a6507ae6e0c66ec31aaaf1c4f7b49452de253ecbd7b77de58c6a1729\",\"license\":\"AGPL-3.0-only\"},\"src/Divider.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.6;\\n\\n// External references\\nimport { SafeERC20, ERC20 } from \\\"@rari-capital/solmate/src/erc20/SafeERC20.sol\\\";\\nimport { Trust } from \\\"@rari-capital/solmate/src/auth/Trust.sol\\\";\\nimport { DateTime } from \\\"./external/DateTime.sol\\\";\\nimport { FixedMath } from \\\"./external/FixedMath.sol\\\";\\n\\n// Internal references\\nimport { Errors } from \\\"./libs/errors.sol\\\";\\nimport { Claim } from \\\"./tokens/Claim.sol\\\";\\nimport { BaseFeed as Feed } from \\\"./feeds/BaseFeed.sol\\\";\\nimport { Token as Zero } from \\\"./tokens/Token.sol\\\";\\nimport { wTarget } from \\\"./wrappers/wTarget.sol\\\";\\n\\n/// @title Sense Divider: Divide Assets in Two\\n/// @author fedealconada + jparklev\\n/// @notice You can use this contract to issue, combine, and redeem Sense ERC20 Zeros and Claims\\ncontract Divider is Trust {\\n    using SafeERC20 for ERC20;\\n    using FixedMath for uint256;\\n    using Errors for   string;\\n\\n    /// @notice Configuration\\n    uint256 public constant ISSUANCE_FEE = 0.01e18; // In percentage (1%) [WAD] // TODO: TBD\\n    uint256 public constant INIT_STAKE = 1e18; // Series initialisation stablecoin stake [WAD] // TODO: TBD\\n    uint256 public constant SPONSOR_WINDOW = 4 hours; // TODO: TBD\\n    uint256 public constant SETTLEMENT_WINDOW = 2 hours; // TODO: TBD\\n    uint256 public constant MIN_MATURITY = 2 weeks; // TODO: TBD\\n    uint256 public constant MAX_MATURITY = 14 weeks; // TODO: TBD\\n\\n    string private constant ZERO_SYMBOL_PREFIX = \\\"z\\\";\\n    string private constant ZERO_NAME_PREFIX = \\\"Zero\\\";\\n    string private constant CLAIM_SYMBOL_PREFIX = \\\"c\\\";\\n    string private constant CLAIM_NAME_PREFIX = \\\"Claim\\\";\\n\\n    /// @notice Mutable program state\\n    address public stable;\\n    address public    cup;\\n    mapping(address => bool   ) public feeds;  // feed -> approved\\n    mapping(address => uint256) public guards; // target -> max amount of Target allowed to be issued\\n    mapping(address => address) public wtargets;  // target -> target wrapper\\n    mapping(address => mapping(uint256 => Series)) public series; // feed -> maturity -> series\\n    mapping(address => mapping(uint256 => mapping(address => uint256))) public lscales; // feed -> maturity -> account -> lscale\\n    struct Series {\\n        address zero; // Zero address for this Series (deployed on Series initialization)\\n        address claim; // Claim address for this Series (deployed on Series initialization)\\n        address sponsor; // Series initializer/sponsor\\n        uint256 issuance; // Issuance date for this Series (needed for Zero redemption)\\n        uint256 reward; // Tracks the fees due to the settler on Settlement\\n        uint256 iscale; // Scale value at issuance\\n        uint256 mscale; // Scale value at maturity\\n    }\\n\\n    constructor(address _stable, address _cup) Trust(msg.sender) {\\n        stable = _stable;\\n        cup    = _cup;\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n    /// @notice Initializes a new Series\\n    /// @dev Deploys two ERC20 contracts, one for each Zero type\\n    /// @dev Transfers some fixed amount of stable asset to this contract\\n    /// @param feed Feed to associate with the Series\\n    /// @param maturity Maturity date for the new Series, in units of unix time\\n    function initSeries(address feed, uint256 maturity) external returns (address zero, address claim) {\\n        require(feeds[feed], Errors.InvalidFeed);\\n        require(!_exists(feed, maturity), Errors.DuplicateSeries);\\n        require(_isValid(maturity), Errors.InvalidMaturity);\\n\\n        // Transfer stable asset stake from caller to this contract\\n        ERC20(stable).safeTransferFrom(msg.sender, address(this), INIT_STAKE);\\n\\n        // Deploy Zeros and Claims for this new Series\\n        (zero, claim) = _split(feed, maturity);\\n\\n        // Initialize the new Series struct\\n        Series memory newSeries = Series({\\n            zero : zero,\\n            claim : claim,\\n            sponsor : msg.sender,\\n            issuance : block.timestamp,\\n            reward : 0,\\n            iscale : Feed(feed).scale(),\\n            mscale : 0\\n        });\\n        series[feed][maturity] = newSeries;\\n\\n        emit SeriesInitialized(feed, maturity, zero, claim, msg.sender);\\n    }\\n\\n    /// @notice Settles a Series and transfer the settlement reward to the caller\\n    /// @dev The Series' sponsor has a buffer where only they can settle the Series\\n    /// @dev After the buffer, the reward becomes MEV\\n    /// @param feed Feed to associate with the Series\\n    /// @param maturity Maturity date for the new Series\\n    function settleSeries(address feed, uint256 maturity) external {\\n        require(feeds[feed], Errors.InvalidFeed);\\n        require(_exists(feed, maturity), Errors.SeriesDoesntExists);\\n        require(_canBeSettled(feed, maturity), Errors.OutOfWindowBoundaries);\\n\\n        // The maturity scale value is all a Series needs for us to consider it \\\"settled\\\"\\n        series[feed][maturity].mscale = Feed(feed).scale();\\n\\n        // Reward the caller for doing the work of settling the Series at around the correct time\\n        ERC20 target = ERC20(Feed(feed).target());\\n        target.safeTransferFrom(wtargets[address(target)], msg.sender, series[feed][maturity].reward);\\n        ERC20(stable).safeTransfer(msg.sender, INIT_STAKE);\\n\\n        emit SeriesSettled(feed, maturity, msg.sender);\\n    }\\n\\n    /// @notice Mint Zeros and Claims of a specific Series\\n    /// @param feed Feed address for the Series\\n    /// @param maturity Maturity date for the Series\\n    /// @param tBal Balance of Target to deposit\\n    /// the amount of Zeros/Claims minted will be the equivelent value in units of underlying (less fees)\\n    function issue(address feed, uint256 maturity, uint256 tBal) external {\\n        require(feeds[feed], Errors.InvalidFeed);\\n        require(_exists(feed, maturity), Errors.SeriesDoesntExists);\\n        require(!_settled(feed, maturity), Errors.IssueOnSettled);\\n\\n        ERC20 target = ERC20(Feed(feed).target());\\n        uint256 tDecimals = target.decimals();\\n        uint256 tBase = 10 ** tDecimals;\\n        uint256 fee;\\n\\n        // Ensure the caller won't hit the issuance cap with this action\\n        require(target.balanceOf(address(this)) + tBal <= guards[address(target)], Errors.GuardCapReached);\\n        target.safeTransferFrom(msg.sender, wtargets[address(target)], tBal);\\n\\n        // Take the issuance fee out of the deposited Target, and put it towards the settlement\\n        if (tDecimals != 18) {\\n            fee = (tDecimals < 18 ? ISSUANCE_FEE / (10**(18 - tDecimals)) : ISSUANCE_FEE * 10**(tDecimals - 18)).fmul(tBal, tBase);\\n        } else {\\n            fee = ISSUANCE_FEE.fmul(tBal, tBase);\\n        }\\n\\n        series[feed][maturity].reward += fee;\\n        uint256 tBalSubFee = tBal - fee;\\n\\n        // If the caller has collected on Claims before, use the scale value from that collection to determine how many Zeros/Claims to mint\\n        // so that the Claims they mint here will have the same amount of yield stored up as their existing holdings\\n        uint256 scale = lscales[feed][maturity][msg.sender];\\n\\n        // If the caller has not collected on Claims before, use the current scale value to determine how many Zeros/Claims to mint\\n        // so that the Claims they mint here are \\\"clean,\\\" in that they have no yet-to-be-collected yield\\n        if (scale == 0) {\\n            scale = Feed(feed).scale();\\n            lscales[feed][maturity][msg.sender] = scale;\\n        }\\n\\n        // Determine the amount of Underlying equal to the Target being sent in (the principal)\\n        uint256 uBal = tBalSubFee.fmul(scale, Zero(series[feed][maturity].zero).BASE_UNIT());\\n\\n        // Mint equal amounts of Zeros and Claims\\n        Zero(series[feed][maturity].zero  ).mint(msg.sender, uBal);\\n        Claim(series[feed][maturity].claim).mint(msg.sender, uBal);\\n\\n        emit Issued(feed, maturity, uBal, msg.sender);\\n    }\\n\\n    /// @notice Reconstitute Target by burning Zeros and Claims\\n    /// @dev Explicitly burns claims before maturity, and implicitly does it at/after maturity through collect()\\n    /// @param feed Feed address for the Series\\n    /// @param maturity Maturity date for the Series\\n    /// @param uBal Balance of Zeros and Claims to burn\\n    function combine(address feed, uint256 maturity, uint256 uBal) external {\\n        require(feeds[feed], Errors.InvalidFeed);\\n        require(_exists(feed, maturity), Errors.SeriesDoesntExists);\\n\\n        Zero(series[feed][maturity].zero).burn(msg.sender, uBal);\\n        _collect(msg.sender, feed, maturity, uBal, address(0));\\n        if (block.timestamp < maturity) Claim(series[feed][maturity].claim).burn(msg.sender, uBal);\\n\\n        // We use lscale since the current scale was already stored there by the _collect() call\\n        uint256 cscale = _settled(feed, maturity) ? series[feed][maturity].mscale : lscales[feed][maturity][msg.sender];\\n\\n        // Convert from units of Underlying to units of Target\\n        uint256 tBal = uBal.fdiv(cscale, 10**ERC20(Feed(feed).target()).decimals());\\n        ERC20 target = ERC20(Feed(feed).target());\\n        target.safeTransferFrom(wtargets[address(target)], msg.sender, tBal);\\n\\n        emit Combined(feed, maturity, tBal, msg.sender);\\n    }\\n\\n    /// @notice Burn Zeros of a Series once its been settled\\n    /// @dev The balance of redeemable Target is a function of the change in Scale\\n    /// @param feed Feed address for the Series\\n    /// @param maturity Maturity date for the Series\\n    /// @param uBal Amount of Zeros to burn, which should be equivelent to the amount of Underlying owed to the caller\\n    function redeemZero(address feed, uint256 maturity, uint256 uBal) external {\\n        require(feeds[feed], Errors.InvalidFeed);\\n        // If a Series is settled, we know that it must have existed as well, so that check is unnecessary\\n        require(_settled(feed, maturity), Errors.NotSettled);\\n        // Burn the caller's Zeros\\n        Zero(series[feed][maturity].zero).burn(msg.sender, uBal);\\n\\n        // Calculate the amount of Target the caller is owed (amount of Target that's\\n        // equivelent to their principal in Underlying), then send it them\\n        uint256 tBal = uBal.fdiv(series[feed][maturity].mscale, 10**ERC20(Feed(feed).target()).decimals()); // Sensitive to precision loss\\n        ERC20 target = ERC20(Feed(feed).target());\\n        target.safeTransferFrom(wtargets[address(target)], msg.sender, tBal);\\n\\n        emit Redeemed(feed, maturity, tBal);\\n    }\\n\\n    /// @notice Collect Claim excess before, at, or after maturity\\n    /// @dev Burns the claim tokens if it's currently at or after maturity as this will be the last possible collect\\n    /// @dev If `to` is set, we copy the lscale value from usr to this address\\n    /// @param usr User who's collecting for their Claims\\n    /// @param feed Feed address for the Series\\n    /// @param maturity Maturity date for the Series\\n    /// @param to address to set the lscale value from usr\\n    function collect(\\n        address usr,\\n        address feed,\\n        uint256 maturity,\\n        address to\\n    ) external onlyClaim(feed, maturity) returns (uint256 collected) {\\n        return _collect(usr,\\n            feed,\\n            maturity,\\n            Claim(msg.sender).balanceOf(usr),\\n            to\\n        );\\n    }\\n\\n    function _collect(\\n        address usr,\\n        address feed,\\n        uint256 maturity,\\n        uint256 uBal,\\n        address to\\n    ) internal returns (uint256 collected) {\\n        require(feeds[feed], Errors.InvalidFeed);\\n        require(_exists(feed, maturity), Errors.SeriesDoesntExists);\\n\\n        // Get the scale value from the last time this holder collected\\n        uint256 cscale = series[feed][maturity].mscale;\\n        uint256 lscale = lscales[feed][maturity][usr];\\n        Claim claim = Claim(series[feed][maturity].claim);\\n        ERC20 target = ERC20(Feed(feed).target());\\n\\n        // If this is the Claim holder's first time collecting and nobody sent these Claims to them,\\n        // set the \\\"last scale\\\" value to the scale at issuance for this series\\n        if (lscale == 0) lscale = series[feed][maturity].iscale;\\n\\n        // If we're past maturity, this Series must be settled before collect can be called\\n        if (_settled(feed, maturity)) {\\n            claim.burn(usr, uBal);\\n        } else {\\n            // If we're not settled and we're past maturity + the sponsor window,\\n            // anyone can settle this Series so revert until someone does\\n            if (block.timestamp > maturity + SPONSOR_WINDOW) {\\n                revert(Errors.CollectNotSettled);\\n            } else {\\n                cscale = Feed(feed).scale();\\n                lscales[feed][maturity][usr] = cscale;\\n            }\\n        }\\n\\n        // Determine how much yield has accrued since the last time this user collected, in units of Target.\\n        // (Or take the last time as issuance if they haven't yet.)\\n        // Reminder that `Underlying / Scale` = `Target`, so this equation is saying, for some amount of Underlying `u`:\\n        // \\\"Target balance that equaled `u` at last collection _minus_ Target balance that equals `u` now\\\".\\n        // Because scale must be increasing, the Target balance needed to equal `u` decreases, and that \\\"excess\\\"\\n        // is what Claim holders are collecting\\n        collected = uBal.fdiv(lscale, claim.BASE_UNIT()) - uBal.fdiv(cscale, claim.BASE_UNIT());\\n        target.safeTransferFrom(wtargets[address(target)], usr, collected);\\n\\n        wTarget(wtargets[address(target)]).distribute(feed, maturity, usr, collected); // distribute airdrop tokens\\n\\n        // If this collect is a part of a token transfer to another address, set the receiver's\\n        // last collection to this scale (as all yield is being stripped off before the Claims are sent)\\n        if (to != address(0)) {\\n            lscales[feed][maturity][to] = cscale;\\n        }\\n\\n        emit Collected(feed, maturity, collected);\\n    }\\n\\n    /* ========== ADMIN FUNCTIONS ========== */\\n\\n    /// @notice Enable or disable a feed\\n    /// @param feed Feed's address\\n    /// @param isOn Flag setting this feed to enabled or disabled\\n    function setFeed(address feed, bool isOn) external requiresTrust {\\n        require(feeds[feed] != isOn, Errors.ExistingValue);\\n        feeds[feed] = isOn;\\n        emit FeedChanged(feed, isOn);\\n    }\\n\\n    /// @notice Set target's guard\\n    /// @param target Target address\\n    /// @param cap The max target that can be deposited on the Divider\\n    function setGuard(address target, uint256 cap) external requiresTrust {\\n        guards[target] = cap;\\n        emit GuardChanged(target, cap);\\n    }\\n\\n    /// @notice Adds wrapped target to wtargets mapping\\n    /// @param wtarget Wrapped Target address\\n    function setWrapper(address wtarget) external requiresTrust {\\n        address target = wTarget(wtarget).target();\\n        require(wtargets[target] == address(0), Errors.ExistingValue);\\n        wtargets[target] = wtarget;\\n        emit WTargetAdded(wtarget);\\n    }\\n\\n    struct Backfill {\\n        address usr;   // Address of the user who's getting their lscale backfilled\\n        uint256 lscale; // Scale value to backfill for usr's lscale\\n    }\\n\\n    /// @notice Backfill a Series' Scale value at maturity if keepers failed to settle it\\n    /// @param feed Feed's address\\n    /// @param maturity Maturity date for the Series\\n    /// @param mscale Value to set as the Series' Scale value at maturity\\n    /// @param backfills Values to set on lscales mapping\\n    function backfillScale(\\n        address feed,\\n        uint256 maturity,\\n        uint256 mscale,\\n        Backfill[] memory backfills\\n    ) external requiresTrust {\\n        require(_exists(feed, maturity), Errors.SeriesDoesntExists);\\n        require(mscale > series[feed][maturity].iscale, Errors.InvalidScaleValue);\\n\\n        uint256 cutoff = maturity + SPONSOR_WINDOW + SETTLEMENT_WINDOW;\\n        // If the feed is disabled, it will allow the admin to backfill no matter the maturity\\n        require(!feeds[feed] || block.timestamp > cutoff, Errors.OutOfWindowBoundaries);\\n\\n        // Set the maturity scale for the Series (needed for `redeem` methods)\\n        series[feed][maturity].mscale = mscale;\\n        // Set user's last scale values the Series (needed for the `collect` method)\\n        for (uint i = 0; i < backfills.length; i++) {\\n            lscales[feed][maturity][backfills[i].usr] = backfills[i].lscale;\\n        }\\n\\n        // Determine where the rewards should go depending on where we are relative to the maturity date\\n        address rewardee = block.timestamp <= maturity + SPONSOR_WINDOW ? series[feed][maturity].sponsor : cup;\\n        ERC20 target = ERC20(Feed(feed).target());\\n        target.safeTransferFrom(wtargets[address(target)], cup, series[feed][maturity].reward);\\n        ERC20(stable).safeTransfer(rewardee, INIT_STAKE);\\n\\n        emit Backfilled(feed, maturity, mscale, backfills);\\n    }\\n\\n    /* ========== INTERNAL VIEWS ========== */\\n\\n    function _exists(address feed, uint256 maturity) internal view returns (bool exists) {\\n        return address(series[feed][maturity].zero) != address(0);\\n    }\\n\\n    function _settled(address feed, uint256 maturity) internal view returns (bool settled) {\\n        return series[feed][maturity].mscale > 0;\\n    }\\n\\n    function _canBeSettled(address feed, uint256 maturity) internal view returns (bool canBeSettled) {\\n        require(!_settled(feed, maturity), Errors.AlreadySettled);\\n        uint256 cutoff = maturity + SPONSOR_WINDOW + SETTLEMENT_WINDOW;\\n        // If the sender is the sponsor for the Series\\n        if (msg.sender == series[feed][maturity].sponsor) {\\n            return maturity - SPONSOR_WINDOW <= block.timestamp && cutoff >= block.timestamp;\\n        } else {\\n            return maturity + SPONSOR_WINDOW < block.timestamp && cutoff >= block.timestamp;\\n        }\\n    }\\n\\n    function _isValid(uint256 maturity) internal view returns (bool valid) {\\n        if (maturity < block.timestamp + MIN_MATURITY || maturity > block.timestamp + MAX_MATURITY) return false;\\n\\n        (, , uint256 day, uint256 hour, uint256 minute, uint256 second) = DateTime.timestampToDateTime(maturity);\\n        if (day != 1 || hour != 0 || minute != 0 || second != 0) return false;\\n        return true;\\n    }\\n\\n    /* ========== INTERNAL HELPERS ========== */\\n\\n    function _split(address feed, uint256 maturity) internal returns (address zero, address claim) {\\n        ERC20 target = ERC20(Feed(feed).target());\\n        uint8 decimals = target.decimals();\\n        (, string memory m, string memory y) = DateTime.toDateString(maturity);\\n        string memory datestring = string(abi.encodePacked(m, \\\"-\\\", y));\\n\\n        string memory zname = string(abi.encodePacked(target.name(), \\\" \\\", datestring, \\\" \\\", ZERO_NAME_PREFIX, \\\" \\\", \\\"by Sense\\\"));\\n        string memory zsymbol = string(abi.encodePacked(ZERO_SYMBOL_PREFIX, target.symbol(), \\\":\\\", datestring));\\n        zero = address(new Zero(zname, zsymbol, decimals));\\n\\n        string memory cname = string(abi.encodePacked(target.name(), \\\" \\\", datestring, \\\" \\\", CLAIM_NAME_PREFIX, \\\" \\\", \\\"by Sense\\\"));\\n        string memory csymbol = string(abi.encodePacked(CLAIM_SYMBOL_PREFIX, target.symbol(), \\\":\\\", datestring));\\n        claim = address(new Claim(maturity, address(this), feed, cname, csymbol, decimals));\\n    }\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    modifier onlyClaim(address feed, uint256 maturity) {\\n        require(series[feed][maturity].claim == msg.sender, \\\"Can only be invoked by the Claim contract\\\");\\n        _;\\n    }\\n\\n    /* ========== EVENTS ========== */\\n\\n    event Backfilled(address indexed feed, uint256 indexed maturity, uint256 mscale, Backfill[] backfills);\\n    event Collected(address indexed feed, uint256 indexed maturity, uint256 collected);\\n    event Combined(address indexed feed, uint256 indexed maturity, uint256 balance, address indexed sender);\\n    event GuardChanged(address indexed target, uint256 indexed cap);\\n    event FeedChanged(address indexed feed, bool isOn);\\n    event Issued(address indexed feed, uint256 indexed maturity, uint256 balance, address indexed sender);\\n    event Redeemed(address indexed feed, uint256 indexed maturity, uint256 redeemed);\\n    event SeriesInitialized(address indexed feed, uint256 indexed maturity, address zero, address claim, address indexed sponsor);\\n    event SeriesSettled(address indexed feed, uint256 indexed maturity, address indexed settler);\\n    event WTargetAdded(address indexed wtarget);\\n}\\n\",\"keccak256\":\"0xd89acffcce7afeed019eb4a7ebe2aab292b156cfacaa7c4efb20673635c9b63d\",\"license\":\"UNLICENSED\"},\"src/external/DateTime.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\n// ----------------------------------------------------------------------------\\n// DateTime Library v2.0\\n//\\n// A gas-efficient Solidity date and time library\\n//\\n// https://github.com/bokkypoobah/BokkyPooBahsDateTimeLibrary\\n//\\n// Tested date range 1970/01/01 to 2345/12/31\\n//\\n// Conventions:\\n// Unit      | Range         | Notes\\n// :-------- |:-------------:|:-----\\n// timestamp | >= 0          | Unix timestamp, number of seconds since 1970/01/01 00:00:00 UTC\\n// year      | 1970 ... 2345 |\\n// month     | 1 ... 12      |\\n// day       | 1 ... 31      |\\n// hour      | 0 ... 23      |\\n// minute    | 0 ... 59      |\\n// second    | 0 ... 59      |\\n// dayOfWeek | 1 ... 7       | 1 = Monday, ..., 7 = Sunday\\n//\\n//\\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2018-2019. The MIT Licence.\\n// ----------------------------------------------------------------------------\\n\\nlibrary DateTime {\\n    uint256 constant SECONDS_PER_DAY = 24 * 60 * 60;\\n    uint256 constant SECONDS_PER_HOUR = 60 * 60;\\n    uint256 constant SECONDS_PER_MINUTE = 60;\\n    int256 constant OFFSET19700101 = 2440588;\\n\\n    function timestampToDate(uint256 timestamp) internal pure returns (uint256 year, uint256 month, uint256 day) {\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n\\n    function timestampToDateTime(uint256 timestamp) internal pure returns (uint256 year, uint256 month, uint256 day, uint256 hour, uint256 minute, uint256 second) {\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        uint256 secs = timestamp % SECONDS_PER_DAY;\\n        hour = secs / SECONDS_PER_HOUR;\\n        secs = secs % SECONDS_PER_HOUR;\\n        minute = secs / SECONDS_PER_MINUTE;\\n        second = secs % SECONDS_PER_MINUTE;\\n    }\\n\\n    function toDateString(uint256 _timestamp) internal pure returns (string memory d, string memory m, string memory y) {\\n        (uint256 year, uint256 month, uint256 day) = timestampToDate(_timestamp);\\n        d = uintToString(day);\\n        m = uintToString(month);\\n        y = uintToString(year);\\n    }\\n\\n    /// Taken from https://stackoverflow.com/questions/47129173/how-to-convert-uint-to-string-in-solidity\\n    function uintToString(uint _i) internal pure returns (string memory _uintAsString) {\\n        if (_i == 0) return \\\"0\\\";\\n        uint j = _i;\\n        uint len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint k = len;\\n        while (_i != 0) {\\n            k = k-1;\\n            uint8 temp = (48 + uint8(_i - _i / 10 * 10));\\n            bytes1 b1 = bytes1(temp);\\n            bstr[k] = b1;\\n            _i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate the number of days from 1970/01/01 to year/month/day using\\n    // the date conversion algorithm from\\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\n    // and subtracting the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // days = day\\n    //      - 32075\\n    //      + 1461 * (year + 4800 + (month - 14) / 12) / 4\\n    //      + 367 * (month - 2 - (month - 14) / 12 * 12) / 12\\n    //      - 3 * ((year + 4900 + (month - 14) / 12) / 100) / 4\\n    //      - offset\\n    // ------------------------------------------------------------------------\\n    function _daysFromDate(uint256 year, uint256 month, uint256 day) internal pure returns (uint256 _days) {\\n        require(year >= 1970);\\n        int256 _year = int256(year);\\n        int256 _month = int256(month);\\n        int256 _day = int256(day);\\n\\n        int256 __days =\\n        _day -\\n        32075 +\\n        (1461 * (_year + 4800 + (_month - 14) / 12)) /\\n        4 +\\n        (367 * (_month - 2 - ((_month - 14) / 12) * 12)) /\\n        12 -\\n        (3 * ((_year + 4900 + (_month - 14) / 12) / 100)) /\\n        4 -\\n        OFFSET19700101;\\n\\n        _days = uint256(__days);\\n    }\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate year/month/day from the number of days since 1970/01/01 using\\n    // the date conversion algorithm from\\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\n    // and adding the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // int L = days + 68569 + offset\\n    // int N = 4 * L / 146097\\n    // L = L - (146097 * N + 3) / 4\\n    // year = 4000 * (L + 1) / 1461001\\n    // L = L - 1461 * year / 4 + 31\\n    // month = 80 * L / 2447\\n    // dd = L - 2447 * month / 80\\n    // L = month / 11\\n    // month = month + 2 - 12 * L\\n    // year = 100 * (N - 49) + year + L\\n    // ------------------------------------------------------------------------\\n    function _daysToDate(uint256 _days) internal pure returns (uint256 year, uint256 month, uint256 day) {\\n        int256 __days = int256(_days);\\n\\n        int256 L = __days + 68569 + OFFSET19700101;\\n        int256 N = (4 * L) / 146097;\\n        L = L - (146097 * N + 3) / 4;\\n        int256 _year = (4000 * (L + 1)) / 1461001;\\n        L = L - (1461 * _year) / 4 + 31;\\n        int256 _month = (80 * L) / 2447;\\n        int256 _day = L - (2447 * _month) / 80;\\n        L = _month / 11;\\n        _month = _month + 2 - 12 * L;\\n        _year = 100 * (N - 49) + _year + L;\\n\\n        year = uint256(_year);\\n        month = uint256(_month);\\n        day = uint256(_day);\\n    }\\n}\\n\",\"keccak256\":\"0x9c15b6a9bf69a91d97a470866eafa3986a184e2faebffaa5d7d21a492d8c4d80\",\"license\":\"MIT\"},\"src/external/FixedMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.6;\\n\\n/// @title Fixed point arithmetic library\\n/// @author Taken from https://github.com/yieldprotocol/yield-utils-v2/blob/main/contracts/math/WDiv.sol & https://github.com/yieldprotocol/yield-utils-v2/blob/main/contracts/math/WMul.sol\\nlibrary FixedMath {\\n\\n    /// Taken from https://github.com/usmfum/USM/blob/master/contracts/FixedMath.sol\\n    /// @dev Multiply an amount by a fixed point factor with 18 decimals, rounds down\\n    function fmul(uint256 x, uint256 y, uint256 baseUnit) internal pure returns (uint256 z) {\\n        z = x * y;\\n    unchecked { z /= baseUnit; }\\n    }\\n\\n    /// Taken from https://github.com/usmfum/USM/blob/master/contracts/FixedMath.sol\\n    /// @dev Divide an amount by a fixed point factor with 18 decimals, rounds down\\n    function fdiv(uint256 x, uint256 y, uint256 baseUnit) internal pure returns (uint256 z) {\\n        z = (x * baseUnit) / y;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x8166a380b34901f96a969810299f406389db00796684d0f60e5cc9a64da21890\",\"license\":\"GPL-3.0-or-later\"},\"src/feeds/BaseFeed.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.6;\\n\\n// External references\\nimport { Initializable } from \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport { ERC20 } from \\\"@rari-capital/solmate/src/erc20/ERC20.sol\\\";\\nimport { FixedMath } from \\\"../external/FixedMath.sol\\\";\\n\\n// Internal references\\nimport { Divider } from \\\"../Divider.sol\\\";\\nimport { Errors } from \\\"../libs/errors.sol\\\";\\n\\n/// @title Assign time-based value to target assets\\n/// @dev In most cases, the only function that will be unique to each feed type is `scale`\\nabstract contract BaseFeed is Initializable {\\n    using FixedMath for uint256;\\n\\n    address public target;\\n    address public divider; // TODO: must be hardcoded!\\n    uint256 public delta;\\n    string public name;\\n    string public symbol;\\n    LScale public lscale;\\n\\n    struct LScale {\\n        uint256 timestamp; // timestamp of the last scale value\\n        uint256 value; // last scale value\\n    }\\n\\n    function initialize(\\n        address _target,\\n        address _divider,\\n        uint256 _delta\\n    ) external virtual initializer {\\n        // TODO: only factory?\\n        // TODO: add input validation?\\n        divider = _divider;\\n        delta = _delta;\\n        target = _target;\\n        name = string(abi.encodePacked(ERC20(target).name(), \\\" Yield\\\"));\\n        symbol = string(abi.encodePacked(ERC20(target).symbol(), \\\"-yield\\\"));\\n        emit Initialized();\\n    }\\n\\n    /// @notice Calculate and return this feed's Scale value for the current timestamp\\n    /// @dev For some Targets, such as cTokens, this is simply the exchange rate,\\n    /// or `supply cToken / supply underlying`\\n    /// @dev For other Targets, such as AMM LP shares, specialized logic will be required\\n    /// @return _value WAD Scale value\\n    function scale() external virtual returns (uint256 _value) {\\n        _value = _scale();\\n        uint256 lvalue = lscale.value;\\n        require(_value >= lvalue, Errors.InvalidScaleValue);\\n        uint256 timeDiff = block.timestamp - lscale.timestamp;\\n        if (timeDiff > 0 && lvalue != 0) {\\n            uint256 growthPerSec = (_value - lvalue).fdiv(lvalue * timeDiff, 10**ERC20(target).decimals());\\n            if (growthPerSec > delta) revert(Errors.InvalidScaleValue);\\n        }\\n        if (_value != lscale.value) {\\n            // update value only if different than previous\\n            lscale.value = _value;\\n            lscale.timestamp = block.timestamp;\\n        }\\n    }\\n\\n    /// @notice Actual scale value check that must be overriden by child contracts\\n    function _scale() internal virtual returns (uint256 _value);\\n\\n    event Initialized();\\n}\\n\",\"keccak256\":\"0x0ee1ad30f69042da90f11096d79c21656177d9686d0a9588a8a84e740d9ada4c\",\"license\":\"UNLICENSED\"},\"src/libs/errors.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.6;\\n\\n/// @notice Program error types\\nlibrary Errors {\\n    string constant AlreadySettled = \\\"Series has already been settled\\\";\\n    string constant CollectNotSettled = \\\"Cannot collect if Series is at or after maturity and it has not been settled\\\";\\n    string constant DuplicateSeries = \\\"Series with given maturity already exists\\\";\\n    string constant ExistingValue = \\\"New value must be different than previous\\\";\\n    string constant FeedAlreadyExists = \\\"Feed already exists\\\";\\n    string constant GuardCapReached = \\\"Issuance cap reached\\\";\\n    string constant IssueOnSettled = \\\"Cannot issue if Series is settled\\\";\\n    string constant InvalidFeed = \\\"Invalid feed address or feed is not enabled\\\";\\n    string constant InvalidMaturity = \\\"Maturity date is not valid\\\";\\n    string constant InvalidScaleValue = \\\"Scale value is invalid\\\";\\n    string constant NotAuthorized = \\\"UNTRUSTED\\\"; // We copy the error message used by solmate's `Trust` auth lib\\n    string constant NotEnoughClaims = \\\"Not enough claims to collect given target balance\\\";\\n    string constant SeriesDoesntExists = \\\"Series does not exist\\\";\\n    string constant NotSettled = \\\"Series must be settled\\\";\\n    string constant NotSupported = \\\"Target is not supported\\\";\\n    string constant OutOfWindowBoundaries = \\\"Can not settle Series outside the time window boundaries\\\";\\n    string constant TransferFromFailed = \\\"TRANSFER_FROM_FAILED\\\";\\n    string constant ZeroBalance = \\\"Balance must be greater than 0\\\";\\n}\\n\",\"keccak256\":\"0x8614cabb35b0ecd94f193a654e3ebd7f4f02f86bce7d433b7c0024fb797501a0\",\"license\":\"UNLICENSED\"},\"src/tokens/Claim.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.6;\\n\\n// Internal references\\nimport { Divider } from \\\"../Divider.sol\\\";\\nimport { Token } from \\\"./Token.sol\\\";\\n\\n/// @title Claim token contract that allows excess collection pre-maturity\\ncontract Claim is Token {\\n    uint256 public maturity;\\n    address public divider;\\n    address public feed;\\n\\n    constructor(\\n        uint256 _maturity,\\n        address _divider,\\n        address _feed,\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) Token(_name, _symbol, _decimals) {\\n        maturity = _maturity;\\n        divider = _divider;\\n        feed = _feed;\\n    }\\n\\n    function collect() external returns (uint256 _collected) {\\n        return Divider(divider).collect(msg.sender, feed, maturity, address(0));\\n    }\\n\\n    function transfer(address to, uint256 value) public override returns (bool) {\\n        Divider(divider).collect(msg.sender, feed, maturity, to);\\n        super.transfer(to, value);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) public override returns (bool) {\\n        Divider(divider).collect(from, feed, maturity, to);\\n        super.transferFrom(from, to, value);\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x71019135aa984b657b15de2119301dee4f8284e3b76aee49bdbb906f01dde673\",\"license\":\"UNLICENSED\"},\"src/tokens/Token.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.6;\\n\\n// External references\\nimport { ERC20 } from \\\"@rari-capital/solmate/src/erc20/ERC20.sol\\\";\\nimport { Trust } from \\\"@rari-capital/solmate/src/auth/Trust.sol\\\";\\n\\ncontract Token is ERC20, Trust {\\n    uint256 public immutable BASE_UNIT;\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) ERC20(_name, _symbol, _decimals) Trust(msg.sender) {\\n        BASE_UNIT = 10**_decimals;\\n    }\\n\\n    /// @param usr The address to send the minted tokens\\n    /// @param amount The amount to be minted\\n    function mint(address usr, uint256 amount) public requiresTrust {\\n        _mint(usr, amount);\\n        emit Mint(usr, amount);\\n    }\\n\\n    /// @param usr The address from where to burn tokens from\\n    /// @param amount The amount to be burned\\n    function burn(address usr, uint256 amount) public requiresTrust {\\n        _burn(usr, amount);\\n        emit Burn(usr, amount);\\n    }\\n\\n    /* ========== EVENTS ========== */\\n\\n    event Mint(address indexed usr, uint256 amount);\\n    event Burn(address indexed usr, uint256 amount);\\n}\\n\",\"keccak256\":\"0x968b2c41dc0ead0dfd8194d00b503d556d115912da1f4541f38c80bd84edacb1\",\"license\":\"UNLICENSED\"},\"src/wrappers/wTarget.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.6;\\n\\n// External references\\nimport { ERC20, SafeERC20 } from \\\"@rari-capital/solmate/src/erc20/SafeERC20.sol\\\";\\nimport { Trust } from \\\"@rari-capital/solmate/src/auth/Trust.sol\\\";\\nimport { FixedMath } from \\\"../external/FixedMath.sol\\\";\\n\\n// Internal\\nimport { Divider } from \\\"../Divider.sol\\\";\\nimport { BaseFeed as Feed } from \\\"../feeds/BaseFeed.sol\\\";\\n\\n/// @notice\\ncontract wTarget is Trust {\\n    using SafeERC20 for ERC20;\\n    using FixedMath for uint256;\\n\\n    /// @notice Configuration\\n    uint256 MAX_INT = 2**256 - 1;\\n\\n    /// @notice Mutable program state\\n    address public target;\\n    address public airdropToken;\\n    address public divider;\\n    mapping(address => uint256) public tBalances; // usr -> amount of airdrop tokens distributed\\n    mapping(address => uint256) public distributed; // usr -> amount of airdrop tokens distributed\\n\\n    constructor(\\n        address _target,\\n        address _divider,\\n        address _airdropToken\\n    ) Trust(msg.sender) {\\n        target = _target;\\n        airdropToken = _airdropToken;\\n        divider = _divider;\\n        ERC20(target).approve(divider, MAX_INT);\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n    /// @notice Distributes airdropped tokens to Claim holders proportionally based on Claim balance\\n    /// @param _feed Feed to associate with the Series\\n    /// @param _maturity Maturity date\\n    /// @param _usr User to distribute airdrop tokens to\\n    function distribute(\\n        address _feed,\\n        uint256 _maturity,\\n        address _usr,\\n        uint256 collected\\n    ) external {\\n        (, address claim, , , , , ) = Divider(divider).series(_feed, _maturity);\\n        // uint256 scale = Divider(msg.sender).lscales(_feed, _maturity, _usr);\\n        // uint256 tBal = ERC20(_zero).balanceOf(_usr).fdiv(scale, 10**ERC20(target).decimals());\\n        // uint amount = (tBal / ERC20(target).balanceOf(address(this))) *\\n        // ERC20(airdropToken).balanceOf(address(this)) - distributed[_usr];\\n        uint256 amount = ERC20(claim).totalSupply() == 0\\n            ? 0\\n            : (ERC20(claim).balanceOf(_usr) / ERC20(claim).totalSupply()) *\\n                (ERC20(airdropToken).balanceOf(address(this)) - distributed[_usr]);\\n        // uint amount = ERC20(claim).totalSupply() == 0\\n        // ? 0\\n        // : (ERC20(claim).balanceOf(_usr) / ERC20(claim).totalSupply()) *\\n        // ERC20(airdropToken).balanceOf(address(this)) - distributed[_usr];\\n        emit Hi(ERC20(claim).totalSupply());\\n        emit Hi(ERC20(claim).balanceOf(_usr));\\n        emit Hi((ERC20(claim).balanceOf(_usr) / ERC20(claim).totalSupply()));\\n        emit Hi(ERC20(airdropToken).balanceOf(address(this)));\\n        emit Hi(amount);\\n\\n        distributed[_usr] += amount;\\n        ERC20(airdropToken).transfer(_usr, amount);\\n        emit Distributed(_usr, airdropToken, amount);\\n    }\\n\\n    /* ========== EVENTS ========== */\\n    event Distributed(address indexed usr, address indexed token, uint256 indexed amount);\\n    event Hi(uint256 h);\\n}\\n\",\"keccak256\":\"0xad9c42820982e9bd5e9ece207a19447537041474e526143352b11df7f6994db6\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162006a7738038062006a778339810160408190526200003491620000d5565b3360008181526020818152604091829020805460ff19166001908117909155915191825282917fe95aec380cae16330d146d5499ef7db6f3657e477104a733e771bc09e500d986910160405180910390a250600180546001600160a01b039384166001600160a01b031991821617909155600280549290931691161790556200010d565b80516001600160a01b0381168114620000d057600080fd5b919050565b60008060408385031215620000e957600080fd5b620000f483620000b8565b91506200010460208401620000b8565b90509250929050565b61695a806200011d6000396000f3fe60806040523480156200001157600080fd5b5060043610620001815760003560e01c80635ea5a9b911620000df578063a584423f1162000092578063a584423f1462000416578063b16d0b0f146200042d578063ba89bebd1462000459578063c2167d931462000470578063c40d29c91462000487578063c7c73cd41462000497578063dfe5ef4814620004ae57600080fd5b80635ea5a9b914620003795780635fa0cc0a14620003885780636572ced3146200039f5780636b46215114620003b657806396d6487914620003d9578063a414163814620003ff57600080fd5b80632fba4aa911620001385780632fba4aa914620002ca5780633488f17814620003015780633ad10beb14620003395780633c49be0c146200034d5780633deb6cae1462000364578063553123ab146200036e57600080fd5b80630891d30a14620001865780630fe0554d14620002365780631393916a146200024f57806322be3de114620002685780632ca6a1b8146200028b5780632f9cd8541462000296575b600080fd5b620001eb62000197366004620034da565b6006602081815260009384526040808520909152918352912080546001820154600283015460038401546004850154600586015495909601546001600160a01b039485169693851695949092169390929187565b604080516001600160a01b039889168152968816602088015294909616938501939093526060840191909152608083015260a082015260c081019190915260e0015b60405180910390f35b6200024061384081565b6040519081526020016200022d565b62000266620002603660046200349c565b620004c5565b005b6001546200027c906001600160a01b031681565b6040516200022d9190620038ec565b620002406212750081565b62000240620002a736600462003509565b600760209081526000938452604080852082529284528284209052825290205481565b620002f0620002db366004620033fb565b60036020526000908152604090205460ff1681565b60405190151581526020016200022d565b6200031862000312366004620034da565b6200055e565b604080516001600160a01b039384168152929091166020830152016200022d565b6002546200027c906001600160a01b031681565b620002406200035e36600462003442565b6200083a565b62000240611c2081565b620002406281330081565b62000240662386f26fc1000081565b6200026662000399366004620034da565b62000966565b62000266620003b036600462003588565b620009df565b62000240620003c7366004620033fb565b60046020526000908152604090205481565b620002f0620003ea366004620033fb565b60006020819052908152604090205460ff1681565b6200026662000410366004620034da565b62000dc9565b620002666200042736600462003550565b62001075565b6200027c6200043e366004620033fb565b6005602052600090815260409020546001600160a01b031681565b620002666200046a36600462003550565b620013c8565b6200026662000481366004620033fb565b6200180a565b62000240670de0b6b3a764000081565b62000266620004a83660046200349c565b6200196a565b62000266620004bf36600462003550565b62001a58565b3360009081526020819052604090205460ff16620005005760405162461bcd60e51b8152600401620004f7906200396b565b60405180910390fd5b6001600160a01b03821660008181526020818152604091829020805460ff191685151590811790915591519182527fe95aec380cae16330d146d5499ef7db6f3657e477104a733e771bc09e500d98691015b60405180910390a25050565b6001600160a01b038216600090815260036020908152604080832054815160608101909252602b808352849360ff90921692916200682f9083013990620005ba5760405162461bcd60e51b8152600401620004f7919062003919565b50620005c7848462002148565b15604051806060016040528060298152602001620068dc6029913990620006035760405162461bcd60e51b8152600401620004f7919062003919565b506200060f8362002177565b6040518060400160405280601a81526020017f4d617475726974792064617465206973206e6f742076616c696400000000000081525090620006665760405162461bcd60e51b8152600401620004f7919062003919565b5060015462000689906001600160a01b03163330670de0b6b3a764000062002210565b62000695848462002335565b809250819350505060006040518060e00160405280846001600160a01b03168152602001836001600160a01b03168152602001336001600160a01b0316815260200142815260200160008152602001866001600160a01b031663f51e181a6040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156200072057600080fd5b505af115801562000735573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200075b919062003751565b8152600060209182018190526001600160a01b03888116808352600680855260408085208b8652865293849020865181549085166001600160a01b0319918216178255878701516001830180549187169183169190911790558786015160028301805491871691909216179055606087015160038201556080870151600482015560a0870151600582015560c0870151910155825188831681529187169382019390935292935033928792917f17186c9a47f5897bd77ffe32daf444b4f01bcffa7ea85c2eb4c9e330d4bb1a04910160405180910390a4509250929050565b6001600160a01b038084166000908152600660209081526040808320868452909152812060010154909185918591163314620008cb5760405162461bcd60e51b815260206004820152602960248201527f43616e206f6e6c7920626520696e766f6b65642062792074686520436c61696d6044820152680818dbdb9d1c9858dd60ba1b6064820152608401620004f7565b6200095b878787336001600160a01b03166370a082318c6040518263ffffffff1660e01b8152600401620009009190620038ec565b60206040518083038186803b1580156200091957600080fd5b505afa1580156200092e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000954919062003751565b88620027ec565b979650505050505050565b3360009081526020819052604090205460ff16620009985760405162461bcd60e51b8152600401620004f7906200396b565b6001600160a01b038216600081815260046020526040808220849055518392917ff16a3457e9b9a5c31fda410fd95ed37234eafeb546daeb8a99f8895f94bf8fee91a35050565b3360009081526020819052604090205460ff1662000a115760405162461bcd60e51b8152600401620004f7906200396b565b62000a1d848462002148565b604051806040016040528060158152602001600080516020620069058339815191528152509062000a635760405162461bcd60e51b8152600401620004f7919062003919565b506001600160a01b0384166000908152600660209081526040808320868452825291829020600501548251808401909352601683527514d8d85b19481d985b1d59481a5cc81a5b9d985b1a5960521b91830191909152831162000adb5760405162461bcd60e51b8152600401620004f7919062003919565b506000611c2062000aef6138408662003af7565b62000afb919062003af7565b6001600160a01b03861660009081526003602052604090205490915060ff16158062000b2657508042115b6040518060600160405280603881526020016200685a603891399062000b615760405162461bcd60e51b8152600401620004f7919062003919565b506001600160a01b03851660009081526006602081815260408084208885529091528220018490555b825181101562000c3c5782818151811062000ba95762000ba962003e42565b60200260200101516020015160076000886001600160a01b03166001600160a01b031681526020019081526020016000206000878152602001908152602001600020600085848151811062000c025762000c0262003e42565b602090810291909101810151516001600160a01b03168252810191909152604001600020558062000c338162003de1565b91505062000b8a565b50600062000c4d6138408662003af7565b42111562000c67576002546001600160a01b031662000c91565b6001600160a01b038087166000908152600660209081526040808320898452909152902060020154165b90506000866001600160a01b031663d4b839926040518163ffffffff1660e01b815260040160206040518083038186803b15801562000ccf57600080fd5b505afa15801562000ce4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000d0a919062003422565b6001600160a01b038082166000818152600560209081526040808320546002548e87168552600684528285208e865290935292206004015494955062000d599492939182169291169062002210565b60015462000d7a906001600160a01b031683670de0b6b3a764000062002d5b565b85876001600160a01b03167f03acc415d7a548a696a54ee1a79e6fe7e6f3999b013a7855877294650f59f780878760405162000db8929190620039ed565b60405180910390a350505050505050565b6001600160a01b03821660009081526003602090815260409182902054825160608101909352602b80845260ff90911692916200682f908301399062000e245760405162461bcd60e51b8152600401620004f7919062003919565b5062000e31828262002148565b604051806040016040528060158152602001600080516020620069058339815191528152509062000e775760405162461bcd60e51b8152600401620004f7919062003919565b5062000e84828262002e7e565b6040518060600160405280603881526020016200685a603891399062000ebf5760405162461bcd60e51b8152600401620004f7919062003919565b50816001600160a01b031663f51e181a6040518163ffffffff1660e01b8152600401602060405180830381600087803b15801562000efc57600080fd5b505af115801562000f11573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000f37919062003751565b6001600160a01b03831660008181526006602081815260408084208785528252808420909201949094558051636a5c1cc960e11b81529051919363d4b8399292600480840193829003018186803b15801562000f9257600080fd5b505afa15801562000fa7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000fcd919062003422565b6001600160a01b0380821660008181526005602090815260408083205489861684526006835281842089855290925290912060040154939450620010179391921690339062002210565b60015462001038906001600160a01b031633670de0b6b3a764000062002d5b565b604051339083906001600160a01b038616907fd1426f892f3cce4b1085d051aa4be26da2192d8db075f55bc75f185d38ea624b90600090a4505050565b6001600160a01b03831660009081526003602090815260409182902054825160608101909352602b80845260ff90911692916200682f9083013990620010d05760405162461bcd60e51b8152600401620004f7919062003919565b50620010dd838362002f82565b6040518060400160405280601681526020017514d95c9a595cc81b5d5cdd081899481cd95d1d1b195960521b815250906200112d5760405162461bcd60e51b8152600401620004f7919062003919565b506001600160a01b03808416600090815260066020908152604080832086845290915290819020549051632770a7eb60e21b8152911690639dc29fac906200117c903390859060040162003900565b600060405180830381600087803b1580156200119757600080fd5b505af1158015620011ac573d6000803e3d6000fd5b505050506001600160a01b03831660008181526006602081815260408084208785528252808420909201548251636a5c1cc960e11b815292519394620012d6949193909263d4b8399292600480840193829003018186803b1580156200121157600080fd5b505afa15801562001226573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200124c919062003422565b6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156200128557600080fd5b505afa1580156200129a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620012c091906200376b565b620012cd90600a62003bdc565b84919062002faf565b90506000846001600160a01b031663d4b839926040518163ffffffff1660e01b815260040160206040518083038186803b1580156200131457600080fd5b505afa15801562001329573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200134f919062003422565b6001600160a01b038082166000818152600560205260409020549293506200137c92909116338562002210565b83856001600160a01b03167ff3a670cd3af7d64b488926880889d08a8585a138ff455227af6737339a1ec26284604051620013b991815260200190565b60405180910390a35050505050565b6001600160a01b03831660009081526003602090815260409182902054825160608101909352602b80845260ff90911692916200682f9083013990620014235760405162461bcd60e51b8152600401620004f7919062003919565b5062001430838362002148565b6040518060400160405280601581526020016000805160206200690583398151915281525090620014765760405162461bcd60e51b8152600401620004f7919062003919565b506001600160a01b03808416600090815260066020908152604080832086845290915290819020549051632770a7eb60e21b8152911690639dc29fac90620014c5903390859060040162003900565b600060405180830381600087803b158015620014e057600080fd5b505af1158015620014f5573d6000803e3d6000fd5b5050505062001509338484846000620027ec565b508142101562001599576001600160a01b03808416600090815260066020908152604080832086845290915290819020600101549051632770a7eb60e21b8152911690639dc29fac9062001564903390859060040162003900565b600060405180830381600087803b1580156200157f57600080fd5b505af115801562001594573d6000803e3d6000fd5b505050505b6000620015a7848462002f82565b620015de576001600160a01b0384166000908152600760209081526040808320868452825280832033845290915290205462001605565b6001600160a01b038416600090815260066020818152604080842087855290915290912001545b905060006200170d82866001600160a01b031663d4b839926040518163ffffffff1660e01b815260040160206040518083038186803b1580156200164857600080fd5b505afa1580156200165d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001683919062003422565b6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015620016bc57600080fd5b505afa158015620016d1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620016f791906200376b565b6200170490600a62003bdc565b85919062002faf565b90506000856001600160a01b031663d4b839926040518163ffffffff1660e01b815260040160206040518083038186803b1580156200174b57600080fd5b505afa15801562001760573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001786919062003422565b6001600160a01b03808216600081815260056020526040902054929350620017b392909116338562002210565b336001600160a01b031685876001600160a01b03167fc93ef223012fd8a42ae087bcd98f3ea6c91a3596f56fb683451dda1abc5b695c85604051620017fa91815260200190565b60405180910390a4505050505050565b3360009081526020819052604090205460ff166200183c5760405162461bcd60e51b8152600401620004f7906200396b565b6000816001600160a01b031663d4b839926040518163ffffffff1660e01b815260040160206040518083038186803b1580156200187857600080fd5b505afa1580156200188d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620018b3919062003422565b6001600160a01b0380821660009081526005602090815260409182902054825160608101909352602980845294955090921615929091620068929083013990620019125760405162461bcd60e51b8152600401620004f7919062003919565b506001600160a01b0381811660009081526005602052604080822080546001600160a01b0319169386169384179055517fa2cba5a8f6374bbe84f0e5e5a901eb4220985d50e6b5437d1e96c6087766c03d9190a25050565b3360009081526020819052604090205460ff166200199c5760405162461bcd60e51b8152600401620004f7906200396b565b6001600160a01b03821660009081526003602090815260409182902054825160608101909352602980845260ff909116151584151514159291620068929083013990620019fe5760405162461bcd60e51b8152600401620004f7919062003919565b506001600160a01b038216600081815260036020908152604091829020805460ff191685151590811790915591519182527f52e08a8591e1cd7fb698c8d05931cd7db7b8b8cf3d09dcc3bc6aa828711ebbde910162000552565b6001600160a01b03831660009081526003602090815260409182902054825160608101909352602b80845260ff90911692916200682f908301399062001ab35760405162461bcd60e51b8152600401620004f7919062003919565b5062001ac0838362002148565b604051806040016040528060158152602001600080516020620069058339815191528152509062001b065760405162461bcd60e51b8152600401620004f7919062003919565b5062001b13838362002f82565b15604051806060016040528060218152602001620068bb602191399062001b4f5760405162461bcd60e51b8152600401620004f7919062003919565b506000836001600160a01b031663d4b839926040518163ffffffff1660e01b815260040160206040518083038186803b15801562001b8c57600080fd5b505afa15801562001ba1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001bc7919062003422565b90506000816001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801562001c0557600080fd5b505afa15801562001c1a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001c4091906200376b565b60ff169050600062001c5482600a62003bce565b6001600160a01b03841660008181526004602081905260408083205490516370a0823160e01b815294955091939192889290916370a082319162001c9b91309101620038ec565b60206040518083038186803b15801562001cb457600080fd5b505afa15801562001cc9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001cef919062003751565b62001cfb919062003af7565b111560405180604001604052806014815260200173125cdcdd585b98d94818d85c081c995858da195960621b8152509062001d4b5760405162461bcd60e51b8152600401620004f7919062003919565b506001600160a01b0380851660008181526005602052604090205462001d75923391168862002210565b8260121462001dfd5762001df585836012861062001dc05762001d9a60128762003d94565b62001da790600a62003bce565b62001dba90662386f26fc1000062003d2d565b62001ded565b62001dcd86601262003d94565b62001dda90600a62003bce565b62001ded90662386f26fc1000062003b6e565b919062002fd2565b905062001e14565b62001e11662386f26fc10000868462002fd2565b90505b6001600160a01b03871660009081526006602090815260408083208984529091528120600401805483929062001e4c90849062003af7565b909155506000905062001e60828762003d94565b6001600160a01b03891660009081526007602090815260408083208b845282528083203384529091529020549091508062001f3d57886001600160a01b031663f51e181a6040518163ffffffff1660e01b8152600401602060405180830381600087803b15801562001ed157600080fd5b505af115801562001ee6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001f0c919062003751565b6001600160a01b038a1660009081526007602090815260408083208c84528252808320338452909152902081905590505b6001600160a01b03808a1660009081526006602090815260408083208c84528252808320548151620e962f60e81b81529151939462001fe49487949290911692630e962f00926004808301939192829003018186803b15801562001fa057600080fd5b505afa15801562001fb5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001fdb919062003751565b85919062002fd2565b6001600160a01b03808c1660009081526006602090815260408083208e8452909152908190205490516340c10f1960e01b815292935016906340c10f199062002034903390859060040162003900565b600060405180830381600087803b1580156200204f57600080fd5b505af115801562002064573d6000803e3d6000fd5b5050506001600160a01b03808c1660009081526006602090815260408083208e8452909152908190206001015490516340c10f1960e01b8152911691506340c10f1990620020b9903390859060040162003900565b600060405180830381600087803b158015620020d457600080fd5b505af1158015620020e9573d6000803e3d6000fd5b50505050336001600160a01b0316898b6001600160a01b03167ff75041e6352580ba937fde3a7ff5ff99bd178f75ac104184f85e3abbaaa44fef846040516200213491815260200190565b60405180910390a450505050505050505050565b6001600160a01b0382811660009081526006602090815260408083208584529091529020541615155b92915050565b600062002188621275004262003af7565b821080620021a35750620021a0628133004262003af7565b82115b15620021b157506000919050565b600080600080620021c28662002ffd565b95509550955095505050836001141580620021dc57508215155b80620021e757508115155b80620021f257508015155b15620022045750600095945050505050565b50600195945050505050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b1790529151600092839290881691620022769190620037be565b6000604051808303816000865af19150503d8060008114620022b5576040519150601f19603f3d011682016040523d82523d6000602084013e620022ba565b606091505b5091509150818015620022e8575080511580620022e8575080806020019051810190620022e891906200369b565b6200232d5760405162461bcd60e51b81526020600482015260146024820152731514905394d1915497d19493d357d1905253115160621b6044820152606401620004f7565b505050505050565b6000806000846001600160a01b031663d4b839926040518163ffffffff1660e01b815260040160206040518083038186803b1580156200237457600080fd5b505afa15801562002389573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620023af919062003422565b90506000816001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015620023ed57600080fd5b505afa15801562002402573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200242891906200376b565b905060008062002438876200307f565b92509250506000828260405160200162002454929190620038ac565b60405160208183030381529060405290506000856001600160a01b03166306fdde036040518163ffffffff1660e01b815260040160006040518083038186803b158015620024a157600080fd5b505afa158015620024b6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620024e09190810190620036bb565b82604051806040016040528060048152602001635a65726f60e01b815250604051602001620025129392919062003832565b60405160208183030381529060405290506000604051806040016040528060018152602001603d60f91b815250876001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b1580156200257957600080fd5b505afa1580156200258e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620025b89190810190620036bb565b84604051602001620025cd93929190620037dc565b6040516020818303038152906040529050818187604051620025ef90620033df565b620025fd939291906200392e565b604051809103906000f0801580156200261a573d6000803e3d6000fd5b5098506000876001600160a01b03166306fdde036040518163ffffffff1660e01b815260040160006040518083038186803b1580156200265957600080fd5b505afa1580156200266e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620026989190810190620036bb565b8460405180604001604052806005815260200164436c61696d60d81b815250604051602001620026cb9392919062003832565b60405160208183030381529060405290506000604051806040016040528060018152602001606360f81b815250896001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b1580156200273257600080fd5b505afa15801562002747573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620027719190810190620036bb565b866040516020016200278693929190620037dc565b60405160208183030381529060405290508b308e84848c604051620027ab90620033ed565b620027bc969594939291906200398e565b604051809103906000f080158015620027d9573d6000803e3d6000fd5b5099505050505050505050509250929050565b6001600160a01b038416600090815260036020908152604080832054815160608101909252602b80835260ff909116926200682f9083013990620028455760405162461bcd60e51b8152600401620004f7919062003919565b5062002852858562002148565b6040518060400160405280601581526020016000805160206200690583398151915281525090620028985760405162461bcd60e51b8152600401620004f7919062003919565b506001600160a01b0380861660008181526006602081815260408084208a855280835281852093840154868652600784528286208c875284528286208e891687528452828620548c87529184526001909401548251636a5c1cc960e11b815292519497919691169493909263d4b839929260048082019391829003018186803b1580156200292557600080fd5b505afa1580156200293a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002960919062003422565b90508262002992576001600160a01b03891660009081526006602090815260408083208b845290915290206005015492505b6200299e898962002f82565b1562002a0e57604051632770a7eb60e21b81526001600160a01b03831690639dc29fac90620029d4908d908b9060040162003900565b600060405180830381600087803b158015620029ef57600080fd5b505af115801562002a04573d6000803e3d6000fd5b5050505062002b03565b62002a1c6138408962003af7565b42111562002a59576040518060800160405280604c8152602001620067e3604c913960405162461bcd60e51b8152600401620004f7919062003919565b886001600160a01b031663f51e181a6040518163ffffffff1660e01b8152600401602060405180830381600087803b15801562002a9557600080fd5b505af115801562002aaa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002ad0919062003751565b6001600160a01b03808b1660009081526007602090815260408083208d84528252808320938f1683529290522081905593505b62002b8684836001600160a01b0316630e962f006040518163ffffffff1660e01b815260040160206040518083038186803b15801562002b4257600080fd5b505afa15801562002b57573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002b7d919062003751565b89919062002faf565b62002c0984846001600160a01b0316630e962f006040518163ffffffff1660e01b815260040160206040518083038186803b15801562002bc557600080fd5b505afa15801562002bda573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002c00919062003751565b8a919062002faf565b62002c15919062003d94565b6001600160a01b0380831660008181526005602052604090205492975062002c42929091168c8862002210565b6001600160a01b0381811660009081526005602052604090819020549051630b6ea46b60e41b81528b83166004820152602481018b90528c831660448201526064810188905291169063b6ea46b090608401600060405180830381600087803b15801562002caf57600080fd5b505af115801562002cc4573d6000803e3d6000fd5b505050506001600160a01b0386161562002d09576001600160a01b03808a1660009081526007602090815260408083208c84528252808320938a168352929052208490555b87896001600160a01b03167f8f0c3d4726e2d22ccf850efced91f2d0c1bea40229449223d795a6cff32762368760405162002d4691815260200190565b60405180910390a35050505095945050505050565b600080846001600160a01b031663a9059cbb60e01b858560405160240162002d8592919062003900565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b031990941693909317909252905162002dc59190620037be565b6000604051808303816000865af19150503d806000811462002e04576040519150601f19603f3d011682016040523d82523d6000602084013e62002e09565b606091505b509150915081801562002e3757508051158062002e3757508080602001905181019062002e3791906200369b565b62002e775760405162461bcd60e51b815260206004820152600f60248201526e1514905394d1915497d19052531151608a1b6044820152606401620004f7565b5050505050565b600062002e8c838362002f82565b156040518060400160405280601f81526020017f5365726965732068617320616c7265616479206265656e20736574746c6564008152509062002ee45760405162461bcd60e51b8152600401620004f7919062003919565b506000611c2062002ef86138408562003af7565b62002f04919062003af7565b6001600160a01b0385811660009081526006602090815260408083208884529091529020600201549192501633141562002f5f574262002f476138408562003d94565b1115801562002f565750428110155b91505062002171565b4262002f6e6138408562003af7565b10801562002f565750421115905062002171565b6001600160a01b039190911660009081526006602081815260408084209484529390529190200154151590565b60008262002fbe838662003d2d565b62002fca919062003b6e565b949350505050565b600062002fe0838562003d2d565b905081818162002ff45762002ff462003e2c565b04949350505050565b600080808080806200301d62003017620151808962003b6e565b620030ca565b91975095509350600062003035620151808962003dff565b905062003045610e108262003b6e565b935062003055610e108262003dff565b905062003064603c8262003b6e565b925062003073603c8262003dff565b91505091939550919395565b60608060606000806000620030948762003276565b925092509250620030a5816200329a565b9550620030b2826200329a565b9450620030bf836200329a565b959794965050505050565b60008080838162253d8c620030e38362010bd962003ab0565b620030ef919062003ab0565b9050600062023ab16200310483600462003c9c565b62003110919062003b3a565b90506004620031238262023ab162003c9c565b6200313090600362003ab0565b6200313c919062003b3a565b62003148908362003d4f565b9150600062164b096200315d84600162003ab0565b6200316b90610fa062003c9c565b62003177919062003b3a565b9050600462003189826105b562003c9c565b62003195919062003b3a565b620031a1908462003d4f565b620031ae90601f62003ab0565b9250600061098f620031c285605062003c9c565b620031ce919062003b3a565b905060006050620031e28361098f62003c9c565b620031ee919062003b3a565b620031fa908662003d4f565b905062003209600b8362003b3a565b94506200321885600c62003c9c565b6200322583600262003ab0565b62003231919062003d4f565b915084836200324260318762003d4f565b6200324f90606462003c9c565b6200325b919062003ab0565b62003267919062003ab0565b9a919950975095505050505050565b600080806200328d62003017620151808662003b6e565b9196909550909350915050565b606081620032bf5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115620032ef5780620032d68162003de1565b9150620032e79050600a8362003b6e565b9150620032c3565b60008167ffffffffffffffff8111156200330d576200330d62003e58565b6040519080825280601f01601f19166020018201604052801562003338576020820181803683370190505b509050815b8515620033d6576200335160018262003d94565b9050600062003362600a8862003b6e565b6200336f90600a62003d2d565b6200337b908862003d94565b6200338890603062003b12565b905060008160f81b905080848481518110620033a857620033a862003e42565b60200101906001600160f81b031916908160001a905350620033cc600a8962003b6e565b975050506200333d565b50949350505050565b6113038062003e9783390190565b611649806200519a83390190565b6000602082840312156200340e57600080fd5b81356200341b8162003e6e565b9392505050565b6000602082840312156200343557600080fd5b81516200341b8162003e6e565b600080600080608085870312156200345957600080fd5b8435620034668162003e6e565b93506020850135620034788162003e6e565b9250604085013591506060850135620034918162003e6e565b939692955090935050565b60008060408385031215620034b057600080fd5b8235620034bd8162003e6e565b91506020830135620034cf8162003e87565b809150509250929050565b60008060408385031215620034ee57600080fd5b8235620034fb8162003e6e565b946020939093013593505050565b6000806000606084860312156200351f57600080fd5b83356200352c8162003e6e565b9250602084013591506040840135620035458162003e6e565b809150509250925092565b6000806000606084860312156200356657600080fd5b8335620035738162003e6e565b95602085013595506040909401359392505050565b600080600080608085870312156200359f57600080fd5b8435620035ac8162003e6e565b935060208581013593506040808701359350606087013567ffffffffffffffff80821115620035da57600080fd5b818901915089601f830112620035ef57600080fd5b81358181111562003604576200360462003e58565b62003614858260051b0162003a7c565b8181528581019250838601600683901b850187018d10156200363557600080fd5b60009450845b83811015620036875786828f03121562003653578586fd5b6200365d62003a50565b82356200366a8162003e6e565b81528289013589820152855293870193908601906001016200363b565b505080965050505050505092959194509250565b600060208284031215620036ae57600080fd5b81516200341b8162003e87565b600060208284031215620036ce57600080fd5b815167ffffffffffffffff80821115620036e757600080fd5b818401915084601f830112620036fc57600080fd5b81518181111562003711576200371162003e58565b62003726601f8201601f191660200162003a7c565b91508082528560208285010111156200373e57600080fd5b620033d681602084016020860162003dae565b6000602082840312156200376457600080fd5b5051919050565b6000602082840312156200377e57600080fd5b815160ff811681146200341b57600080fd5b60008151808452620037aa81602086016020860162003dae565b601f01601f19169290920160200192915050565b60008251620037d281846020870162003dae565b9190910192915050565b60008451620037f081846020890162003dae565b8451908301906200380681836020890162003dae565b601d60f91b910190815283516200382581600184016020880162003dae565b0160010195945050505050565b600084516200384681846020890162003dae565b8083019050600160fd1b808252855162003868816001850160208a0162003dae565b6001920191820181905284516200388781600285016020890162003dae565b60029201918201526762792053656e736560c01b6003820152600b0195945050505050565b60008351620038c081846020880162003dae565b602d60f81b9083019081528351620038e081600184016020880162003dae565b01600101949350505050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6020815260006200341b602083018462003790565b60608152600062003943606083018662003790565b828103602084015262003957818662003790565b91505060ff83166040830152949350505050565b602080825260099082015268155395149554d5115160ba1b604082015260600190565b8681526001600160a01b0386811660208301528516604082015260c060608201819052600090620039c29083018662003790565b8281036080840152620039d6818662003790565b91505060ff831660a0830152979650505050505050565b6000604080830185845260208281860152818651808452606087019150828801935060005b8181101562003a4257845180516001600160a01b0316845284015184840152938301939185019160010162003a12565b509098975050505050505050565b6040805190810167ffffffffffffffff8111828210171562003a765762003a7662003e58565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171562003aa85762003aa862003e58565b604052919050565b600080821280156001600160ff1b038490038513161562003ad55762003ad562003e16565b600160ff1b839003841281161562003af15762003af162003e16565b50500190565b6000821982111562003b0d5762003b0d62003e16565b500190565b600060ff821660ff84168060ff0382111562003b325762003b3262003e16565b019392505050565b60008262003b4c5762003b4c62003e2c565b600160ff1b82146000198414161562003b695762003b6962003e16565b500590565b60008262003b805762003b8062003e2c565b500490565b600181815b8085111562003bc657816000190482111562003baa5762003baa62003e16565b8085161562003bb857918102915b93841c939080029062003b8a565b509250929050565b60006200341b838362003be8565b60006200341b60ff8416835b60008262003bf95750600162002171565b8162003c085750600062002171565b816001811462003c21576002811462003c2c5762003c4c565b600191505062002171565b60ff84111562003c405762003c4062003e16565b50506001821b62002171565b5060208310610133831016604e8410600b841016171562003c71575081810a62002171565b62003c7d838362003b85565b806000190482111562003c945762003c9462003e16565b029392505050565b60006001600160ff1b038184138284138082168684048611161562003cc55762003cc562003e16565b600160ff1b600087128281168783058912161562003ce75762003ce762003e16565b6000871292508782058712848416161562003d065762003d0662003e16565b8785058712818416161562003d1f5762003d1f62003e16565b505050929093029392505050565b600081600019048311821515161562003d4a5762003d4a62003e16565b500290565b60008083128015600160ff1b85018412161562003d705762003d7062003e16565b6001600160ff1b038401831381161562003d8e5762003d8e62003e16565b50500390565b60008282101562003da95762003da962003e16565b500390565b60005b8381101562003dcb57818101518382015260200162003db1565b8381111562003ddb576000848401525b50505050565b600060001982141562003df85762003df862003e16565b5060010190565b60008262003e115762003e1162003e2c565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811462003e8457600080fd5b50565b801515811462003e8457600080fdfe60e06040523480156200001157600080fd5b506040516200130338038062001303833981016040819052620000349162000311565b33838383826000908051906020019062000050929190620001b4565b50815162000066906001906020850190620001b4565b507fff0000000000000000000000000000000000000000000000000000000000000060f882901b166080526040517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f90620000c49060009062000396565b60408051918290038220828201825260018352603160f81b6020938401528151928301939093528101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c00160408051601f19818403018152828252805160209182012060a0526001600160a01b03871660008181526006835292909220805460ff1916600190811790915583529094507fe95aec380cae16330d146d5499ef7db6f3657e477104a733e771bc09e500d986935001905060405180910390a250620001a781600a62000483565b60c05250620005ba915050565b828054620001c29062000551565b90600052602060002090601f016020900481019282620001e6576000855562000231565b82601f106200020157805160ff191683800117855562000231565b8280016001018555821562000231579182015b828111156200023157825182559160200191906001019062000214565b506200023f92915062000243565b5090565b5b808211156200023f576000815560010162000244565b600082601f8301126200026c57600080fd5b81516001600160401b0380821115620002895762000289620005a4565b604051601f8301601f19908116603f01168101908282118183101715620002b457620002b4620005a4565b81604052838152602092508683858801011115620002d157600080fd5b600091505b83821015620002f55785820183015181830184015290820190620002d6565b83821115620003075760008385830101525b9695505050505050565b6000806000606084860312156200032757600080fd5b83516001600160401b03808211156200033f57600080fd5b6200034d878388016200025a565b945060208601519150808211156200036457600080fd5b5062000373868287016200025a565b925050604084015160ff811681146200038b57600080fd5b809150509250925092565b600080835481600182811c915080831680620003b357607f831692505b6020808410821415620003d457634e487b7160e01b86526022600452602486fd5b818015620003eb5760018114620003fd576200042c565b60ff198616895284890196506200042c565b60008a81526020902060005b86811015620004245781548b82015290850190830162000409565b505084890196505b509498975050505050505050565b600181815b808511156200047b5781600019048211156200045f576200045f6200058e565b808516156200046d57918102915b93841c93908002906200043f565b509250929050565b60006200049460ff8416836200049b565b9392505050565b600082620004ac575060016200054b565b81620004bb575060006200054b565b8160018114620004d45760028114620004df57620004ff565b60019150506200054b565b60ff841115620004f357620004f36200058e565b50506001821b6200054b565b5060208310610133831016604e8410600b841016171562000524575081810a6200054b565b6200053083836200043a565b80600019048211156200054757620005476200058e565b0290505b92915050565b600181811c908216806200056657607f821691505b602082108114156200058857634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b60805160f81c60a05160c051610d0f620005f460003960006101410152600081816102070152610746015260006101ce0152610d0f6000f3fe608060405234801561001057600080fd5b50600436106100f65760003560e01c806340c10f191161009257806340c10f191461022957806370a082311461023c5780637ecebe001461025c57806395d89b411461027c57806396d64879146102845780639dc29fac146102a7578063a9059cbb146102ba578063d505accf146102cd578063dd62ed3e146102e057600080fd5b806306fdde03146100fb578063095ea7b3146101195780630e962f001461013c5780631393916a1461017157806318160ddd1461018657806323b872dd1461018f57806330adf81f146101a2578063313ce567146101c95780633644e51514610202575b600080fd5b61010361030b565b6040516101109190610ba6565b60405180910390f35b61012c610127366004610b7c565b610399565b6040519015158152602001610110565b6101637f000000000000000000000000000000000000000000000000000000000000000081565b604051908152602001610110565b61018461017f366004610b40565b610405565b005b61016360025481565b61012c61019d366004610a91565b61049d565b6101637f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b6101f07f000000000000000000000000000000000000000000000000000000000000000081565b60405160ff9091168152602001610110565b6101637f000000000000000000000000000000000000000000000000000000000000000081565b610184610237366004610b7c565b610585565b61016361024a366004610a3c565b60036020526000908152604090205481565b61016361026a366004610a3c565b60056020526000908152604090205481565b6101036105f9565b61012c610292366004610a3c565b60066020526000908152604090205460ff1681565b6101846102b5366004610b7c565b610606565b61012c6102c8366004610b7c565b61067a565b6101846102db366004610acd565b6106e0565b6101636102ee366004610a5e565b600460209081526000928352604080842090915290825290205481565b6000805461031890610c4d565b80601f016020809104026020016040519081016040528092919081815260200182805461034490610c4d565b80156103915780601f1061036657610100808354040283529160200191610391565b820191906000526020600020905b81548152906001019060200180831161037457829003601f168201915b505050505081565b3360008181526004602090815260408083206001600160a01b038716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906103f49086815260200190565b60405180910390a350600192915050565b3360009081526006602052604090205460ff1661043d5760405162461bcd60e51b815260040161043490610bfb565b60405180910390fd5b6001600160a01b038216600081815260066020908152604091829020805460ff191685151590811790915591519182527fe95aec380cae16330d146d5499ef7db6f3657e477104a733e771bc09e500d98691015b60405180910390a25050565b6001600160a01b038316600090815260046020908152604080832033845290915281205460001914610502576001600160a01b0384166000908152600460209081526040808320338452909152812080548492906104fc908490610c36565b90915550505b6001600160a01b0384166000908152600360205260408120805484929061052a908490610c36565b90915550506001600160a01b0380841660008181526003602052604090819020805486019055519091861690600080516020610cba833981519152906105739086815260200190565b60405180910390a35060019392505050565b3360009081526006602052604090205460ff166105b45760405162461bcd60e51b815260040161043490610bfb565b6105be8282610964565b816001600160a01b03167f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d41213968858260405161049191815260200190565b6001805461031890610c4d565b3360009081526006602052604090205460ff166106355760405162461bcd60e51b815260040161043490610bfb565b61063f82826109be565b816001600160a01b03167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca58260405161049191815260200190565b3360009081526003602052604081208054839190839061069b908490610c36565b90915550506001600160a01b03831660008181526003602052604090819020805485019055513390600080516020610cba833981519152906103f49086815260200190565b4284101561072a5760405162461bcd60e51b815260206004820152601760248201527614115493525517d11150511312539157d1561412549151604a1b6044820152606401610434565b6001600160a01b038716600090815260056020526040812080547f0000000000000000000000000000000000000000000000000000000000000000917f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9918b918b918b918761079883610c88565b909155506040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810187905260e0016040516020818303038152906040528051906020012060405160200161081192919061190160f01b81526002810192909252602282015260420190565b60408051601f198184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa15801561087c573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116158015906108b25750886001600160a01b0316816001600160a01b0316145b6108f95760405162461bcd60e51b8152602060048201526018602482015277494e56414c49445f5045524d49545f5349474e415455524560401b6044820152606401610434565b6001600160a01b0381811660009081526004602090815260408083208c8516808552908352928190208b9055518a815291928c16917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050505050505050565b80600260008282546109769190610c1e565b90915550506001600160a01b038216600081815260036020908152604080832080548601905551848152600080516020610cba83398151915291015b60405180910390a35050565b6001600160a01b038216600090815260036020526040812080548392906109e6908490610c36565b90915550506002805482900390556040518181526000906001600160a01b03841690600080516020610cba833981519152906020016109b2565b80356001600160a01b0381168114610a3757600080fd5b919050565b600060208284031215610a4e57600080fd5b610a5782610a20565b9392505050565b60008060408385031215610a7157600080fd5b610a7a83610a20565b9150610a8860208401610a20565b90509250929050565b600080600060608486031215610aa657600080fd5b610aaf84610a20565b9250610abd60208501610a20565b9150604084013590509250925092565b600080600080600080600060e0888a031215610ae857600080fd5b610af188610a20565b9650610aff60208901610a20565b95506040880135945060608801359350608088013560ff81168114610b2357600080fd5b9699959850939692959460a0840135945060c09093013592915050565b60008060408385031215610b5357600080fd5b610b5c83610a20565b915060208301358015158114610b7157600080fd5b809150509250929050565b60008060408385031215610b8f57600080fd5b610b9883610a20565b946020939093013593505050565b600060208083528351808285015260005b81811015610bd357858101830151858201604001528201610bb7565b81811115610be5576000604083870101525b50601f01601f1916929092016040019392505050565b602080825260099082015268155395149554d5115160ba1b604082015260600190565b60008219821115610c3157610c31610ca3565b500190565b600082821015610c4857610c48610ca3565b500390565b600181811c90821680610c6157607f821691505b60208210811415610c8257634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415610c9c57610c9c610ca3565b5060010190565b634e487b7160e01b600052601160045260246000fdfeddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220b064919c07d1015f3f2025335e0a96eb30cae60111a6c327aaa1c351574d714264736f6c6343000806003360e06040523480156200001157600080fd5b506040516200164938038062001649833981016040819052620000349162000365565b82828233838383826000908051906020019062000053929190620001eb565b50815162000069906001906020850190620001eb565b507fff0000000000000000000000000000000000000000000000000000000000000060f882901b166080526040517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f90620000c79060009062000419565b60408051918290038220828201825260018352603160f81b6020938401528151928301939093528101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c00160408051601f19818403018152828252805160209182012060a0526001600160a01b03871660008181526006835292909220805460ff1916600190811790915583529094507fe95aec380cae16330d146d5499ef7db6f3657e477104a733e771bc09e500d986935001905060405180910390a250620001aa81600a62000506565b60c0525050506007959095555050600880546001600160a01b039384166001600160a01b03199182161790915560098054929093169116179055506200063d565b828054620001f990620005d4565b90600052602060002090601f0160209004810192826200021d576000855562000268565b82601f106200023857805160ff191683800117855562000268565b8280016001018555821562000268579182015b82811115620002685782518255916020019190600101906200024b565b50620002769291506200027a565b5090565b5b808211156200027657600081556001016200027b565b80516001600160a01b0381168114620002a957600080fd5b919050565b600082601f830112620002c057600080fd5b81516001600160401b0380821115620002dd57620002dd62000627565b604051601f8301601f19908116603f0116810190828211818310171562000308576200030862000627565b816040528381526020925086838588010111156200032557600080fd5b600091505b838210156200034957858201830151818301840152908201906200032a565b838211156200035b5760008385830101525b9695505050505050565b60008060008060008060c087890312156200037f57600080fd5b86519550620003916020880162000291565b9450620003a16040880162000291565b60608801519094506001600160401b0380821115620003bf57600080fd5b620003cd8a838b01620002ae565b94506080890151915080821115620003e457600080fd5b50620003f389828a01620002ae565b92505060a087015160ff811681146200040b57600080fd5b809150509295509295509295565b600080835481600182811c9150808316806200043657607f831692505b60208084108214156200045757634e487b7160e01b86526022600452602486fd5b8180156200046e57600181146200048057620004af565b60ff19861689528489019650620004af565b60008a81526020902060005b86811015620004a75781548b8201529085019083016200048c565b505084890196505b509498975050505050505050565b600181815b80851115620004fe578160001904821115620004e257620004e262000611565b80851615620004f057918102915b93841c9390800290620004c2565b509250929050565b60006200051760ff8416836200051e565b9392505050565b6000826200052f57506001620005ce565b816200053e57506000620005ce565b8160018114620005575760028114620005625762000582565b6001915050620005ce565b60ff84111562000576576200057662000611565b50506001821b620005ce565b5060208310610133831016604e8410600b8410161715620005a7575081810a620005ce565b620005b38383620004bd565b8060001904821115620005ca57620005ca62000611565b0290505b92915050565b600181811c90821680620005e957607f821691505b602082108114156200060b57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b60805160f81c60a05160c051610fd262000677600039600061018d01526000818161025c01526107e1015260006102230152610fd26000f3fe608060405234801561001057600080fd5b50600436106101425760003560e01c806337a7b7d8116100b857806396d648791161007c57806396d64879146103175780639dc29fac1461033a578063a9059cbb1461034d578063d505accf14610360578063dd62ed3e14610373578063e52253811461039e57600080fd5b806337a7b7d8146102a957806340c10f19146102bc57806370a08231146102cf5780637ecebe00146102ef57806395d89b411461030f57600080fd5b8063204f83f91161010a578063204f83f9146101db57806323b872dd146101e457806330adf81f146101f7578063313ce5671461021e5780633644e51514610257578063378efa371461027e57600080fd5b806306fdde0314610147578063095ea7b3146101655780630e962f00146101885780631393916a146101bd57806318160ddd146101d2575b600080fd5b61014f6103a6565b60405161015c9190610e69565b60405180910390f35b610178610173366004610dfb565b610434565b604051901515815260200161015c565b6101af7f000000000000000000000000000000000000000000000000000000000000000081565b60405190815260200161015c565b6101d06101cb366004610dbf565b6104a0565b005b6101af60025481565b6101af60075481565b6101786101f2366004610d10565b610538565b6101af7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b6102457f000000000000000000000000000000000000000000000000000000000000000081565b60405160ff909116815260200161015c565b6101af7f000000000000000000000000000000000000000000000000000000000000000081565b600854610291906001600160a01b031681565b6040516001600160a01b03909116815260200161015c565b600954610291906001600160a01b031681565b6101d06102ca366004610dfb565b6105e0565b6101af6102dd366004610cbb565b60036020526000908152604090205481565b6101af6102fd366004610cbb565b60056020526000908152604090205481565b61014f610654565b610178610325366004610cbb565b60066020526000908152604090205460ff1681565b6101d0610348366004610dfb565b610661565b61017861035b366004610dfb565b6106d5565b6101d061036e366004610d4c565b61077b565b6101af610381366004610cdd565b600460209081526000928352604080842090915290825290205481565b6101af6109ff565b600080546103b390610f10565b80601f01602080910402602001604051908101604052809291908181526020018280546103df90610f10565b801561042c5780601f106104015761010080835404028352916020019161042c565b820191906000526020600020905b81548152906001019060200180831161040f57829003601f168201915b505050505081565b3360008181526004602090815260408083206001600160a01b038716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259061048f9086815260200190565b60405180910390a350600192915050565b3360009081526006602052604090205460ff166104d85760405162461bcd60e51b81526004016104cf90610ebe565b60405180910390fd5b6001600160a01b038216600081815260066020908152604091829020805460ff191685151590811790915591519182527fe95aec380cae16330d146d5499ef7db6f3657e477104a733e771bc09e500d98691015b60405180910390a25050565b600854600954600754604051630f126f8360e21b81526000936001600160a01b0390811693633c49be0c93610577938a93909216918990600401610e3e565b602060405180830381600087803b15801561059157600080fd5b505af11580156105a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c99190610e25565b506105d5848484610a95565b506001949350505050565b3360009081526006602052604090205460ff1661060f5760405162461bcd60e51b81526004016104cf90610ebe565b6106198282610b7d565b816001600160a01b03167f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d41213968858260405161052c91815260200190565b600180546103b390610f10565b3360009081526006602052604090205460ff166106905760405162461bcd60e51b81526004016104cf90610ebe565b61069a8282610bd7565b816001600160a01b03167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca58260405161052c91815260200190565b600854600954600754604051630f126f8360e21b81526000936001600160a01b0390811693633c49be0c93610714933393909216918990600401610e3e565b602060405180830381600087803b15801561072e57600080fd5b505af1158015610742573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107669190610e25565b506107718383610c39565b5060019392505050565b428410156107c55760405162461bcd60e51b815260206004820152601760248201527614115493525517d11150511312539157d1561412549151604a1b60448201526064016104cf565b6001600160a01b038716600090815260056020526040812080547f0000000000000000000000000000000000000000000000000000000000000000917f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9918b918b918b918761083383610f4b565b909155506040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810187905260e001604051602081830303815290604052805190602001206040516020016108ac92919061190160f01b81526002810192909252602282015260420190565b60408051601f198184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa158015610917573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381161580159061094d5750886001600160a01b0316816001600160a01b0316145b6109945760405162461bcd60e51b8152602060048201526018602482015277494e56414c49445f5045524d49545f5349474e415455524560401b60448201526064016104cf565b6001600160a01b0381811660009081526004602090815260408083208c8516808552908352928190208b9055518a815291928c16917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050505050505050565b600854600954600754604051630f126f8360e21b81526000936001600160a01b0390811693633c49be0c93610a3e933393909216918790600401610e3e565b602060405180830381600087803b158015610a5857600080fd5b505af1158015610a6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a909190610e25565b905090565b6001600160a01b038316600090815260046020908152604080832033845290915281205460001914610afa576001600160a01b038416600090815260046020908152604080832033845290915281208054849290610af4908490610ef9565b90915550505b6001600160a01b03841660009081526003602052604081208054849290610b22908490610ef9565b90915550506001600160a01b0380841660008181526003602052604090819020805486019055519091861690600080516020610f7d83398151915290610b6b9086815260200190565b60405180910390a35060019392505050565b8060026000828254610b8f9190610ee1565b90915550506001600160a01b038216600081815260036020908152604080832080548601905551848152600080516020610f7d83398151915291015b60405180910390a35050565b6001600160a01b03821660009081526003602052604081208054839290610bff908490610ef9565b90915550506002805482900390556040518181526000906001600160a01b03841690600080516020610f7d83398151915290602001610bcb565b33600090815260036020526040812080548391908390610c5a908490610ef9565b90915550506001600160a01b03831660008181526003602052604090819020805485019055513390600080516020610f7d8339815191529061048f9086815260200190565b80356001600160a01b0381168114610cb657600080fd5b919050565b600060208284031215610ccd57600080fd5b610cd682610c9f565b9392505050565b60008060408385031215610cf057600080fd5b610cf983610c9f565b9150610d0760208401610c9f565b90509250929050565b600080600060608486031215610d2557600080fd5b610d2e84610c9f565b9250610d3c60208501610c9f565b9150604084013590509250925092565b600080600080600080600060e0888a031215610d6757600080fd5b610d7088610c9f565b9650610d7e60208901610c9f565b95506040880135945060608801359350608088013560ff81168114610da257600080fd5b9699959850939692959460a0840135945060c09093013592915050565b60008060408385031215610dd257600080fd5b610ddb83610c9f565b915060208301358015158114610df057600080fd5b809150509250929050565b60008060408385031215610e0e57600080fd5b610e1783610c9f565b946020939093013593505050565b600060208284031215610e3757600080fd5b5051919050565b6001600160a01b03948516815292841660208401526040830191909152909116606082015260800190565b600060208083528351808285015260005b81811015610e9657858101830151858201604001528201610e7a565b81811115610ea8576000604083870101525b50601f01601f1916929092016040019392505050565b602080825260099082015268155395149554d5115160ba1b604082015260600190565b60008219821115610ef457610ef4610f66565b500190565b600082821015610f0b57610f0b610f66565b500390565b600181811c90821680610f2457607f821691505b60208210811415610f4557634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415610f5f57610f5f610f66565b5060010190565b634e487b7160e01b600052601160045260246000fdfeddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220e4b45e05437426ebe8aea4e381fe12a08cca3c5337a7103932b7a1a0fd57716864736f6c6343000806003343616e6e6f7420636f6c6c65637420696620536572696573206973206174206f72206166746572206d6174757269747920616e6420697420686173206e6f74206265656e20736574746c6564496e76616c696420666565642061646472657373206f722066656564206973206e6f7420656e61626c656443616e206e6f7420736574746c6520536572696573206f757473696465207468652074696d652077696e646f7720626f756e6461726965734e65772076616c7565206d75737420626520646966666572656e74207468616e2070726576696f757343616e6e6f742069737375652069662053657269657320697320736574746c6564536572696573207769746820676976656e206d6174757269747920616c72656164792065786973747353657269657320646f6573206e6f742065786973740000000000000000000000a2646970667358221220707e921d7fc18ae8c22b371993a1faf5f46761e6104f1b82c8a3cbca79aea40c64736f6c63430008060033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620001815760003560e01c80635ea5a9b911620000df578063a584423f1162000092578063a584423f1462000416578063b16d0b0f146200042d578063ba89bebd1462000459578063c2167d931462000470578063c40d29c91462000487578063c7c73cd41462000497578063dfe5ef4814620004ae57600080fd5b80635ea5a9b914620003795780635fa0cc0a14620003885780636572ced3146200039f5780636b46215114620003b657806396d6487914620003d9578063a414163814620003ff57600080fd5b80632fba4aa911620001385780632fba4aa914620002ca5780633488f17814620003015780633ad10beb14620003395780633c49be0c146200034d5780633deb6cae1462000364578063553123ab146200036e57600080fd5b80630891d30a14620001865780630fe0554d14620002365780631393916a146200024f57806322be3de114620002685780632ca6a1b8146200028b5780632f9cd8541462000296575b600080fd5b620001eb62000197366004620034da565b6006602081815260009384526040808520909152918352912080546001820154600283015460038401546004850154600586015495909601546001600160a01b039485169693851695949092169390929187565b604080516001600160a01b039889168152968816602088015294909616938501939093526060840191909152608083015260a082015260c081019190915260e0015b60405180910390f35b6200024061384081565b6040519081526020016200022d565b62000266620002603660046200349c565b620004c5565b005b6001546200027c906001600160a01b031681565b6040516200022d9190620038ec565b620002406212750081565b62000240620002a736600462003509565b600760209081526000938452604080852082529284528284209052825290205481565b620002f0620002db366004620033fb565b60036020526000908152604090205460ff1681565b60405190151581526020016200022d565b6200031862000312366004620034da565b6200055e565b604080516001600160a01b039384168152929091166020830152016200022d565b6002546200027c906001600160a01b031681565b620002406200035e36600462003442565b6200083a565b62000240611c2081565b620002406281330081565b62000240662386f26fc1000081565b6200026662000399366004620034da565b62000966565b62000266620003b036600462003588565b620009df565b62000240620003c7366004620033fb565b60046020526000908152604090205481565b620002f0620003ea366004620033fb565b60006020819052908152604090205460ff1681565b6200026662000410366004620034da565b62000dc9565b620002666200042736600462003550565b62001075565b6200027c6200043e366004620033fb565b6005602052600090815260409020546001600160a01b031681565b620002666200046a36600462003550565b620013c8565b6200026662000481366004620033fb565b6200180a565b62000240670de0b6b3a764000081565b62000266620004a83660046200349c565b6200196a565b62000266620004bf36600462003550565b62001a58565b3360009081526020819052604090205460ff16620005005760405162461bcd60e51b8152600401620004f7906200396b565b60405180910390fd5b6001600160a01b03821660008181526020818152604091829020805460ff191685151590811790915591519182527fe95aec380cae16330d146d5499ef7db6f3657e477104a733e771bc09e500d98691015b60405180910390a25050565b6001600160a01b038216600090815260036020908152604080832054815160608101909252602b808352849360ff90921692916200682f9083013990620005ba5760405162461bcd60e51b8152600401620004f7919062003919565b50620005c7848462002148565b15604051806060016040528060298152602001620068dc6029913990620006035760405162461bcd60e51b8152600401620004f7919062003919565b506200060f8362002177565b6040518060400160405280601a81526020017f4d617475726974792064617465206973206e6f742076616c696400000000000081525090620006665760405162461bcd60e51b8152600401620004f7919062003919565b5060015462000689906001600160a01b03163330670de0b6b3a764000062002210565b62000695848462002335565b809250819350505060006040518060e00160405280846001600160a01b03168152602001836001600160a01b03168152602001336001600160a01b0316815260200142815260200160008152602001866001600160a01b031663f51e181a6040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156200072057600080fd5b505af115801562000735573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200075b919062003751565b8152600060209182018190526001600160a01b03888116808352600680855260408085208b8652865293849020865181549085166001600160a01b0319918216178255878701516001830180549187169183169190911790558786015160028301805491871691909216179055606087015160038201556080870151600482015560a0870151600582015560c0870151910155825188831681529187169382019390935292935033928792917f17186c9a47f5897bd77ffe32daf444b4f01bcffa7ea85c2eb4c9e330d4bb1a04910160405180910390a4509250929050565b6001600160a01b038084166000908152600660209081526040808320868452909152812060010154909185918591163314620008cb5760405162461bcd60e51b815260206004820152602960248201527f43616e206f6e6c7920626520696e766f6b65642062792074686520436c61696d6044820152680818dbdb9d1c9858dd60ba1b6064820152608401620004f7565b6200095b878787336001600160a01b03166370a082318c6040518263ffffffff1660e01b8152600401620009009190620038ec565b60206040518083038186803b1580156200091957600080fd5b505afa1580156200092e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000954919062003751565b88620027ec565b979650505050505050565b3360009081526020819052604090205460ff16620009985760405162461bcd60e51b8152600401620004f7906200396b565b6001600160a01b038216600081815260046020526040808220849055518392917ff16a3457e9b9a5c31fda410fd95ed37234eafeb546daeb8a99f8895f94bf8fee91a35050565b3360009081526020819052604090205460ff1662000a115760405162461bcd60e51b8152600401620004f7906200396b565b62000a1d848462002148565b604051806040016040528060158152602001600080516020620069058339815191528152509062000a635760405162461bcd60e51b8152600401620004f7919062003919565b506001600160a01b0384166000908152600660209081526040808320868452825291829020600501548251808401909352601683527514d8d85b19481d985b1d59481a5cc81a5b9d985b1a5960521b91830191909152831162000adb5760405162461bcd60e51b8152600401620004f7919062003919565b506000611c2062000aef6138408662003af7565b62000afb919062003af7565b6001600160a01b03861660009081526003602052604090205490915060ff16158062000b2657508042115b6040518060600160405280603881526020016200685a603891399062000b615760405162461bcd60e51b8152600401620004f7919062003919565b506001600160a01b03851660009081526006602081815260408084208885529091528220018490555b825181101562000c3c5782818151811062000ba95762000ba962003e42565b60200260200101516020015160076000886001600160a01b03166001600160a01b031681526020019081526020016000206000878152602001908152602001600020600085848151811062000c025762000c0262003e42565b602090810291909101810151516001600160a01b03168252810191909152604001600020558062000c338162003de1565b91505062000b8a565b50600062000c4d6138408662003af7565b42111562000c67576002546001600160a01b031662000c91565b6001600160a01b038087166000908152600660209081526040808320898452909152902060020154165b90506000866001600160a01b031663d4b839926040518163ffffffff1660e01b815260040160206040518083038186803b15801562000ccf57600080fd5b505afa15801562000ce4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000d0a919062003422565b6001600160a01b038082166000818152600560209081526040808320546002548e87168552600684528285208e865290935292206004015494955062000d599492939182169291169062002210565b60015462000d7a906001600160a01b031683670de0b6b3a764000062002d5b565b85876001600160a01b03167f03acc415d7a548a696a54ee1a79e6fe7e6f3999b013a7855877294650f59f780878760405162000db8929190620039ed565b60405180910390a350505050505050565b6001600160a01b03821660009081526003602090815260409182902054825160608101909352602b80845260ff90911692916200682f908301399062000e245760405162461bcd60e51b8152600401620004f7919062003919565b5062000e31828262002148565b604051806040016040528060158152602001600080516020620069058339815191528152509062000e775760405162461bcd60e51b8152600401620004f7919062003919565b5062000e84828262002e7e565b6040518060600160405280603881526020016200685a603891399062000ebf5760405162461bcd60e51b8152600401620004f7919062003919565b50816001600160a01b031663f51e181a6040518163ffffffff1660e01b8152600401602060405180830381600087803b15801562000efc57600080fd5b505af115801562000f11573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000f37919062003751565b6001600160a01b03831660008181526006602081815260408084208785528252808420909201949094558051636a5c1cc960e11b81529051919363d4b8399292600480840193829003018186803b15801562000f9257600080fd5b505afa15801562000fa7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000fcd919062003422565b6001600160a01b0380821660008181526005602090815260408083205489861684526006835281842089855290925290912060040154939450620010179391921690339062002210565b60015462001038906001600160a01b031633670de0b6b3a764000062002d5b565b604051339083906001600160a01b038616907fd1426f892f3cce4b1085d051aa4be26da2192d8db075f55bc75f185d38ea624b90600090a4505050565b6001600160a01b03831660009081526003602090815260409182902054825160608101909352602b80845260ff90911692916200682f9083013990620010d05760405162461bcd60e51b8152600401620004f7919062003919565b50620010dd838362002f82565b6040518060400160405280601681526020017514d95c9a595cc81b5d5cdd081899481cd95d1d1b195960521b815250906200112d5760405162461bcd60e51b8152600401620004f7919062003919565b506001600160a01b03808416600090815260066020908152604080832086845290915290819020549051632770a7eb60e21b8152911690639dc29fac906200117c903390859060040162003900565b600060405180830381600087803b1580156200119757600080fd5b505af1158015620011ac573d6000803e3d6000fd5b505050506001600160a01b03831660008181526006602081815260408084208785528252808420909201548251636a5c1cc960e11b815292519394620012d6949193909263d4b8399292600480840193829003018186803b1580156200121157600080fd5b505afa15801562001226573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200124c919062003422565b6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156200128557600080fd5b505afa1580156200129a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620012c091906200376b565b620012cd90600a62003bdc565b84919062002faf565b90506000846001600160a01b031663d4b839926040518163ffffffff1660e01b815260040160206040518083038186803b1580156200131457600080fd5b505afa15801562001329573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200134f919062003422565b6001600160a01b038082166000818152600560205260409020549293506200137c92909116338562002210565b83856001600160a01b03167ff3a670cd3af7d64b488926880889d08a8585a138ff455227af6737339a1ec26284604051620013b991815260200190565b60405180910390a35050505050565b6001600160a01b03831660009081526003602090815260409182902054825160608101909352602b80845260ff90911692916200682f9083013990620014235760405162461bcd60e51b8152600401620004f7919062003919565b5062001430838362002148565b6040518060400160405280601581526020016000805160206200690583398151915281525090620014765760405162461bcd60e51b8152600401620004f7919062003919565b506001600160a01b03808416600090815260066020908152604080832086845290915290819020549051632770a7eb60e21b8152911690639dc29fac90620014c5903390859060040162003900565b600060405180830381600087803b158015620014e057600080fd5b505af1158015620014f5573d6000803e3d6000fd5b5050505062001509338484846000620027ec565b508142101562001599576001600160a01b03808416600090815260066020908152604080832086845290915290819020600101549051632770a7eb60e21b8152911690639dc29fac9062001564903390859060040162003900565b600060405180830381600087803b1580156200157f57600080fd5b505af115801562001594573d6000803e3d6000fd5b505050505b6000620015a7848462002f82565b620015de576001600160a01b0384166000908152600760209081526040808320868452825280832033845290915290205462001605565b6001600160a01b038416600090815260066020818152604080842087855290915290912001545b905060006200170d82866001600160a01b031663d4b839926040518163ffffffff1660e01b815260040160206040518083038186803b1580156200164857600080fd5b505afa1580156200165d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001683919062003422565b6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015620016bc57600080fd5b505afa158015620016d1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620016f791906200376b565b6200170490600a62003bdc565b85919062002faf565b90506000856001600160a01b031663d4b839926040518163ffffffff1660e01b815260040160206040518083038186803b1580156200174b57600080fd5b505afa15801562001760573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001786919062003422565b6001600160a01b03808216600081815260056020526040902054929350620017b392909116338562002210565b336001600160a01b031685876001600160a01b03167fc93ef223012fd8a42ae087bcd98f3ea6c91a3596f56fb683451dda1abc5b695c85604051620017fa91815260200190565b60405180910390a4505050505050565b3360009081526020819052604090205460ff166200183c5760405162461bcd60e51b8152600401620004f7906200396b565b6000816001600160a01b031663d4b839926040518163ffffffff1660e01b815260040160206040518083038186803b1580156200187857600080fd5b505afa1580156200188d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620018b3919062003422565b6001600160a01b0380821660009081526005602090815260409182902054825160608101909352602980845294955090921615929091620068929083013990620019125760405162461bcd60e51b8152600401620004f7919062003919565b506001600160a01b0381811660009081526005602052604080822080546001600160a01b0319169386169384179055517fa2cba5a8f6374bbe84f0e5e5a901eb4220985d50e6b5437d1e96c6087766c03d9190a25050565b3360009081526020819052604090205460ff166200199c5760405162461bcd60e51b8152600401620004f7906200396b565b6001600160a01b03821660009081526003602090815260409182902054825160608101909352602980845260ff909116151584151514159291620068929083013990620019fe5760405162461bcd60e51b8152600401620004f7919062003919565b506001600160a01b038216600081815260036020908152604091829020805460ff191685151590811790915591519182527f52e08a8591e1cd7fb698c8d05931cd7db7b8b8cf3d09dcc3bc6aa828711ebbde910162000552565b6001600160a01b03831660009081526003602090815260409182902054825160608101909352602b80845260ff90911692916200682f908301399062001ab35760405162461bcd60e51b8152600401620004f7919062003919565b5062001ac0838362002148565b604051806040016040528060158152602001600080516020620069058339815191528152509062001b065760405162461bcd60e51b8152600401620004f7919062003919565b5062001b13838362002f82565b15604051806060016040528060218152602001620068bb602191399062001b4f5760405162461bcd60e51b8152600401620004f7919062003919565b506000836001600160a01b031663d4b839926040518163ffffffff1660e01b815260040160206040518083038186803b15801562001b8c57600080fd5b505afa15801562001ba1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001bc7919062003422565b90506000816001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801562001c0557600080fd5b505afa15801562001c1a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001c4091906200376b565b60ff169050600062001c5482600a62003bce565b6001600160a01b03841660008181526004602081905260408083205490516370a0823160e01b815294955091939192889290916370a082319162001c9b91309101620038ec565b60206040518083038186803b15801562001cb457600080fd5b505afa15801562001cc9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001cef919062003751565b62001cfb919062003af7565b111560405180604001604052806014815260200173125cdcdd585b98d94818d85c081c995858da195960621b8152509062001d4b5760405162461bcd60e51b8152600401620004f7919062003919565b506001600160a01b0380851660008181526005602052604090205462001d75923391168862002210565b8260121462001dfd5762001df585836012861062001dc05762001d9a60128762003d94565b62001da790600a62003bce565b62001dba90662386f26fc1000062003d2d565b62001ded565b62001dcd86601262003d94565b62001dda90600a62003bce565b62001ded90662386f26fc1000062003b6e565b919062002fd2565b905062001e14565b62001e11662386f26fc10000868462002fd2565b90505b6001600160a01b03871660009081526006602090815260408083208984529091528120600401805483929062001e4c90849062003af7565b909155506000905062001e60828762003d94565b6001600160a01b03891660009081526007602090815260408083208b845282528083203384529091529020549091508062001f3d57886001600160a01b031663f51e181a6040518163ffffffff1660e01b8152600401602060405180830381600087803b15801562001ed157600080fd5b505af115801562001ee6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001f0c919062003751565b6001600160a01b038a1660009081526007602090815260408083208c84528252808320338452909152902081905590505b6001600160a01b03808a1660009081526006602090815260408083208c84528252808320548151620e962f60e81b81529151939462001fe49487949290911692630e962f00926004808301939192829003018186803b15801562001fa057600080fd5b505afa15801562001fb5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001fdb919062003751565b85919062002fd2565b6001600160a01b03808c1660009081526006602090815260408083208e8452909152908190205490516340c10f1960e01b815292935016906340c10f199062002034903390859060040162003900565b600060405180830381600087803b1580156200204f57600080fd5b505af115801562002064573d6000803e3d6000fd5b5050506001600160a01b03808c1660009081526006602090815260408083208e8452909152908190206001015490516340c10f1960e01b8152911691506340c10f1990620020b9903390859060040162003900565b600060405180830381600087803b158015620020d457600080fd5b505af1158015620020e9573d6000803e3d6000fd5b50505050336001600160a01b0316898b6001600160a01b03167ff75041e6352580ba937fde3a7ff5ff99bd178f75ac104184f85e3abbaaa44fef846040516200213491815260200190565b60405180910390a450505050505050505050565b6001600160a01b0382811660009081526006602090815260408083208584529091529020541615155b92915050565b600062002188621275004262003af7565b821080620021a35750620021a0628133004262003af7565b82115b15620021b157506000919050565b600080600080620021c28662002ffd565b95509550955095505050836001141580620021dc57508215155b80620021e757508115155b80620021f257508015155b15620022045750600095945050505050565b50600195945050505050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b1790529151600092839290881691620022769190620037be565b6000604051808303816000865af19150503d8060008114620022b5576040519150601f19603f3d011682016040523d82523d6000602084013e620022ba565b606091505b5091509150818015620022e8575080511580620022e8575080806020019051810190620022e891906200369b565b6200232d5760405162461bcd60e51b81526020600482015260146024820152731514905394d1915497d19493d357d1905253115160621b6044820152606401620004f7565b505050505050565b6000806000846001600160a01b031663d4b839926040518163ffffffff1660e01b815260040160206040518083038186803b1580156200237457600080fd5b505afa15801562002389573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620023af919062003422565b90506000816001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015620023ed57600080fd5b505afa15801562002402573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200242891906200376b565b905060008062002438876200307f565b92509250506000828260405160200162002454929190620038ac565b60405160208183030381529060405290506000856001600160a01b03166306fdde036040518163ffffffff1660e01b815260040160006040518083038186803b158015620024a157600080fd5b505afa158015620024b6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620024e09190810190620036bb565b82604051806040016040528060048152602001635a65726f60e01b815250604051602001620025129392919062003832565b60405160208183030381529060405290506000604051806040016040528060018152602001603d60f91b815250876001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b1580156200257957600080fd5b505afa1580156200258e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620025b89190810190620036bb565b84604051602001620025cd93929190620037dc565b6040516020818303038152906040529050818187604051620025ef90620033df565b620025fd939291906200392e565b604051809103906000f0801580156200261a573d6000803e3d6000fd5b5098506000876001600160a01b03166306fdde036040518163ffffffff1660e01b815260040160006040518083038186803b1580156200265957600080fd5b505afa1580156200266e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620026989190810190620036bb565b8460405180604001604052806005815260200164436c61696d60d81b815250604051602001620026cb9392919062003832565b60405160208183030381529060405290506000604051806040016040528060018152602001606360f81b815250896001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b1580156200273257600080fd5b505afa15801562002747573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620027719190810190620036bb565b866040516020016200278693929190620037dc565b60405160208183030381529060405290508b308e84848c604051620027ab90620033ed565b620027bc969594939291906200398e565b604051809103906000f080158015620027d9573d6000803e3d6000fd5b5099505050505050505050509250929050565b6001600160a01b038416600090815260036020908152604080832054815160608101909252602b80835260ff909116926200682f9083013990620028455760405162461bcd60e51b8152600401620004f7919062003919565b5062002852858562002148565b6040518060400160405280601581526020016000805160206200690583398151915281525090620028985760405162461bcd60e51b8152600401620004f7919062003919565b506001600160a01b0380861660008181526006602081815260408084208a855280835281852093840154868652600784528286208c875284528286208e891687528452828620548c87529184526001909401548251636a5c1cc960e11b815292519497919691169493909263d4b839929260048082019391829003018186803b1580156200292557600080fd5b505afa1580156200293a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002960919062003422565b90508262002992576001600160a01b03891660009081526006602090815260408083208b845290915290206005015492505b6200299e898962002f82565b1562002a0e57604051632770a7eb60e21b81526001600160a01b03831690639dc29fac90620029d4908d908b9060040162003900565b600060405180830381600087803b158015620029ef57600080fd5b505af115801562002a04573d6000803e3d6000fd5b5050505062002b03565b62002a1c6138408962003af7565b42111562002a59576040518060800160405280604c8152602001620067e3604c913960405162461bcd60e51b8152600401620004f7919062003919565b886001600160a01b031663f51e181a6040518163ffffffff1660e01b8152600401602060405180830381600087803b15801562002a9557600080fd5b505af115801562002aaa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002ad0919062003751565b6001600160a01b03808b1660009081526007602090815260408083208d84528252808320938f1683529290522081905593505b62002b8684836001600160a01b0316630e962f006040518163ffffffff1660e01b815260040160206040518083038186803b15801562002b4257600080fd5b505afa15801562002b57573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002b7d919062003751565b89919062002faf565b62002c0984846001600160a01b0316630e962f006040518163ffffffff1660e01b815260040160206040518083038186803b15801562002bc557600080fd5b505afa15801562002bda573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002c00919062003751565b8a919062002faf565b62002c15919062003d94565b6001600160a01b0380831660008181526005602052604090205492975062002c42929091168c8862002210565b6001600160a01b0381811660009081526005602052604090819020549051630b6ea46b60e41b81528b83166004820152602481018b90528c831660448201526064810188905291169063b6ea46b090608401600060405180830381600087803b15801562002caf57600080fd5b505af115801562002cc4573d6000803e3d6000fd5b505050506001600160a01b0386161562002d09576001600160a01b03808a1660009081526007602090815260408083208c84528252808320938a168352929052208490555b87896001600160a01b03167f8f0c3d4726e2d22ccf850efced91f2d0c1bea40229449223d795a6cff32762368760405162002d4691815260200190565b60405180910390a35050505095945050505050565b600080846001600160a01b031663a9059cbb60e01b858560405160240162002d8592919062003900565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b031990941693909317909252905162002dc59190620037be565b6000604051808303816000865af19150503d806000811462002e04576040519150601f19603f3d011682016040523d82523d6000602084013e62002e09565b606091505b509150915081801562002e3757508051158062002e3757508080602001905181019062002e3791906200369b565b62002e775760405162461bcd60e51b815260206004820152600f60248201526e1514905394d1915497d19052531151608a1b6044820152606401620004f7565b5050505050565b600062002e8c838362002f82565b156040518060400160405280601f81526020017f5365726965732068617320616c7265616479206265656e20736574746c6564008152509062002ee45760405162461bcd60e51b8152600401620004f7919062003919565b506000611c2062002ef86138408562003af7565b62002f04919062003af7565b6001600160a01b0385811660009081526006602090815260408083208884529091529020600201549192501633141562002f5f574262002f476138408562003d94565b1115801562002f565750428110155b91505062002171565b4262002f6e6138408562003af7565b10801562002f565750421115905062002171565b6001600160a01b039190911660009081526006602081815260408084209484529390529190200154151590565b60008262002fbe838662003d2d565b62002fca919062003b6e565b949350505050565b600062002fe0838562003d2d565b905081818162002ff45762002ff462003e2c565b04949350505050565b600080808080806200301d62003017620151808962003b6e565b620030ca565b91975095509350600062003035620151808962003dff565b905062003045610e108262003b6e565b935062003055610e108262003dff565b905062003064603c8262003b6e565b925062003073603c8262003dff565b91505091939550919395565b60608060606000806000620030948762003276565b925092509250620030a5816200329a565b9550620030b2826200329a565b9450620030bf836200329a565b959794965050505050565b60008080838162253d8c620030e38362010bd962003ab0565b620030ef919062003ab0565b9050600062023ab16200310483600462003c9c565b62003110919062003b3a565b90506004620031238262023ab162003c9c565b6200313090600362003ab0565b6200313c919062003b3a565b62003148908362003d4f565b9150600062164b096200315d84600162003ab0565b6200316b90610fa062003c9c565b62003177919062003b3a565b9050600462003189826105b562003c9c565b62003195919062003b3a565b620031a1908462003d4f565b620031ae90601f62003ab0565b9250600061098f620031c285605062003c9c565b620031ce919062003b3a565b905060006050620031e28361098f62003c9c565b620031ee919062003b3a565b620031fa908662003d4f565b905062003209600b8362003b3a565b94506200321885600c62003c9c565b6200322583600262003ab0565b62003231919062003d4f565b915084836200324260318762003d4f565b6200324f90606462003c9c565b6200325b919062003ab0565b62003267919062003ab0565b9a919950975095505050505050565b600080806200328d62003017620151808662003b6e565b9196909550909350915050565b606081620032bf5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115620032ef5780620032d68162003de1565b9150620032e79050600a8362003b6e565b9150620032c3565b60008167ffffffffffffffff8111156200330d576200330d62003e58565b6040519080825280601f01601f19166020018201604052801562003338576020820181803683370190505b509050815b8515620033d6576200335160018262003d94565b9050600062003362600a8862003b6e565b6200336f90600a62003d2d565b6200337b908862003d94565b6200338890603062003b12565b905060008160f81b905080848481518110620033a857620033a862003e42565b60200101906001600160f81b031916908160001a905350620033cc600a8962003b6e565b975050506200333d565b50949350505050565b6113038062003e9783390190565b611649806200519a83390190565b6000602082840312156200340e57600080fd5b81356200341b8162003e6e565b9392505050565b6000602082840312156200343557600080fd5b81516200341b8162003e6e565b600080600080608085870312156200345957600080fd5b8435620034668162003e6e565b93506020850135620034788162003e6e565b9250604085013591506060850135620034918162003e6e565b939692955090935050565b60008060408385031215620034b057600080fd5b8235620034bd8162003e6e565b91506020830135620034cf8162003e87565b809150509250929050565b60008060408385031215620034ee57600080fd5b8235620034fb8162003e6e565b946020939093013593505050565b6000806000606084860312156200351f57600080fd5b83356200352c8162003e6e565b9250602084013591506040840135620035458162003e6e565b809150509250925092565b6000806000606084860312156200356657600080fd5b8335620035738162003e6e565b95602085013595506040909401359392505050565b600080600080608085870312156200359f57600080fd5b8435620035ac8162003e6e565b935060208581013593506040808701359350606087013567ffffffffffffffff80821115620035da57600080fd5b818901915089601f830112620035ef57600080fd5b81358181111562003604576200360462003e58565b62003614858260051b0162003a7c565b8181528581019250838601600683901b850187018d10156200363557600080fd5b60009450845b83811015620036875786828f03121562003653578586fd5b6200365d62003a50565b82356200366a8162003e6e565b81528289013589820152855293870193908601906001016200363b565b505080965050505050505092959194509250565b600060208284031215620036ae57600080fd5b81516200341b8162003e87565b600060208284031215620036ce57600080fd5b815167ffffffffffffffff80821115620036e757600080fd5b818401915084601f830112620036fc57600080fd5b81518181111562003711576200371162003e58565b62003726601f8201601f191660200162003a7c565b91508082528560208285010111156200373e57600080fd5b620033d681602084016020860162003dae565b6000602082840312156200376457600080fd5b5051919050565b6000602082840312156200377e57600080fd5b815160ff811681146200341b57600080fd5b60008151808452620037aa81602086016020860162003dae565b601f01601f19169290920160200192915050565b60008251620037d281846020870162003dae565b9190910192915050565b60008451620037f081846020890162003dae565b8451908301906200380681836020890162003dae565b601d60f91b910190815283516200382581600184016020880162003dae565b0160010195945050505050565b600084516200384681846020890162003dae565b8083019050600160fd1b808252855162003868816001850160208a0162003dae565b6001920191820181905284516200388781600285016020890162003dae565b60029201918201526762792053656e736560c01b6003820152600b0195945050505050565b60008351620038c081846020880162003dae565b602d60f81b9083019081528351620038e081600184016020880162003dae565b01600101949350505050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6020815260006200341b602083018462003790565b60608152600062003943606083018662003790565b828103602084015262003957818662003790565b91505060ff83166040830152949350505050565b602080825260099082015268155395149554d5115160ba1b604082015260600190565b8681526001600160a01b0386811660208301528516604082015260c060608201819052600090620039c29083018662003790565b8281036080840152620039d6818662003790565b91505060ff831660a0830152979650505050505050565b6000604080830185845260208281860152818651808452606087019150828801935060005b8181101562003a4257845180516001600160a01b0316845284015184840152938301939185019160010162003a12565b509098975050505050505050565b6040805190810167ffffffffffffffff8111828210171562003a765762003a7662003e58565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171562003aa85762003aa862003e58565b604052919050565b600080821280156001600160ff1b038490038513161562003ad55762003ad562003e16565b600160ff1b839003841281161562003af15762003af162003e16565b50500190565b6000821982111562003b0d5762003b0d62003e16565b500190565b600060ff821660ff84168060ff0382111562003b325762003b3262003e16565b019392505050565b60008262003b4c5762003b4c62003e2c565b600160ff1b82146000198414161562003b695762003b6962003e16565b500590565b60008262003b805762003b8062003e2c565b500490565b600181815b8085111562003bc657816000190482111562003baa5762003baa62003e16565b8085161562003bb857918102915b93841c939080029062003b8a565b509250929050565b60006200341b838362003be8565b60006200341b60ff8416835b60008262003bf95750600162002171565b8162003c085750600062002171565b816001811462003c21576002811462003c2c5762003c4c565b600191505062002171565b60ff84111562003c405762003c4062003e16565b50506001821b62002171565b5060208310610133831016604e8410600b841016171562003c71575081810a62002171565b62003c7d838362003b85565b806000190482111562003c945762003c9462003e16565b029392505050565b60006001600160ff1b038184138284138082168684048611161562003cc55762003cc562003e16565b600160ff1b600087128281168783058912161562003ce75762003ce762003e16565b6000871292508782058712848416161562003d065762003d0662003e16565b8785058712818416161562003d1f5762003d1f62003e16565b505050929093029392505050565b600081600019048311821515161562003d4a5762003d4a62003e16565b500290565b60008083128015600160ff1b85018412161562003d705762003d7062003e16565b6001600160ff1b038401831381161562003d8e5762003d8e62003e16565b50500390565b60008282101562003da95762003da962003e16565b500390565b60005b8381101562003dcb57818101518382015260200162003db1565b8381111562003ddb576000848401525b50505050565b600060001982141562003df85762003df862003e16565b5060010190565b60008262003e115762003e1162003e2c565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811462003e8457600080fd5b50565b801515811462003e8457600080fdfe60e06040523480156200001157600080fd5b506040516200130338038062001303833981016040819052620000349162000311565b33838383826000908051906020019062000050929190620001b4565b50815162000066906001906020850190620001b4565b507fff0000000000000000000000000000000000000000000000000000000000000060f882901b166080526040517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f90620000c49060009062000396565b60408051918290038220828201825260018352603160f81b6020938401528151928301939093528101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c00160408051601f19818403018152828252805160209182012060a0526001600160a01b03871660008181526006835292909220805460ff1916600190811790915583529094507fe95aec380cae16330d146d5499ef7db6f3657e477104a733e771bc09e500d986935001905060405180910390a250620001a781600a62000483565b60c05250620005ba915050565b828054620001c29062000551565b90600052602060002090601f016020900481019282620001e6576000855562000231565b82601f106200020157805160ff191683800117855562000231565b8280016001018555821562000231579182015b828111156200023157825182559160200191906001019062000214565b506200023f92915062000243565b5090565b5b808211156200023f576000815560010162000244565b600082601f8301126200026c57600080fd5b81516001600160401b0380821115620002895762000289620005a4565b604051601f8301601f19908116603f01168101908282118183101715620002b457620002b4620005a4565b81604052838152602092508683858801011115620002d157600080fd5b600091505b83821015620002f55785820183015181830184015290820190620002d6565b83821115620003075760008385830101525b9695505050505050565b6000806000606084860312156200032757600080fd5b83516001600160401b03808211156200033f57600080fd5b6200034d878388016200025a565b945060208601519150808211156200036457600080fd5b5062000373868287016200025a565b925050604084015160ff811681146200038b57600080fd5b809150509250925092565b600080835481600182811c915080831680620003b357607f831692505b6020808410821415620003d457634e487b7160e01b86526022600452602486fd5b818015620003eb5760018114620003fd576200042c565b60ff198616895284890196506200042c565b60008a81526020902060005b86811015620004245781548b82015290850190830162000409565b505084890196505b509498975050505050505050565b600181815b808511156200047b5781600019048211156200045f576200045f6200058e565b808516156200046d57918102915b93841c93908002906200043f565b509250929050565b60006200049460ff8416836200049b565b9392505050565b600082620004ac575060016200054b565b81620004bb575060006200054b565b8160018114620004d45760028114620004df57620004ff565b60019150506200054b565b60ff841115620004f357620004f36200058e565b50506001821b6200054b565b5060208310610133831016604e8410600b841016171562000524575081810a6200054b565b6200053083836200043a565b80600019048211156200054757620005476200058e565b0290505b92915050565b600181811c908216806200056657607f821691505b602082108114156200058857634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b60805160f81c60a05160c051610d0f620005f460003960006101410152600081816102070152610746015260006101ce0152610d0f6000f3fe608060405234801561001057600080fd5b50600436106100f65760003560e01c806340c10f191161009257806340c10f191461022957806370a082311461023c5780637ecebe001461025c57806395d89b411461027c57806396d64879146102845780639dc29fac146102a7578063a9059cbb146102ba578063d505accf146102cd578063dd62ed3e146102e057600080fd5b806306fdde03146100fb578063095ea7b3146101195780630e962f001461013c5780631393916a1461017157806318160ddd1461018657806323b872dd1461018f57806330adf81f146101a2578063313ce567146101c95780633644e51514610202575b600080fd5b61010361030b565b6040516101109190610ba6565b60405180910390f35b61012c610127366004610b7c565b610399565b6040519015158152602001610110565b6101637f000000000000000000000000000000000000000000000000000000000000000081565b604051908152602001610110565b61018461017f366004610b40565b610405565b005b61016360025481565b61012c61019d366004610a91565b61049d565b6101637f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b6101f07f000000000000000000000000000000000000000000000000000000000000000081565b60405160ff9091168152602001610110565b6101637f000000000000000000000000000000000000000000000000000000000000000081565b610184610237366004610b7c565b610585565b61016361024a366004610a3c565b60036020526000908152604090205481565b61016361026a366004610a3c565b60056020526000908152604090205481565b6101036105f9565b61012c610292366004610a3c565b60066020526000908152604090205460ff1681565b6101846102b5366004610b7c565b610606565b61012c6102c8366004610b7c565b61067a565b6101846102db366004610acd565b6106e0565b6101636102ee366004610a5e565b600460209081526000928352604080842090915290825290205481565b6000805461031890610c4d565b80601f016020809104026020016040519081016040528092919081815260200182805461034490610c4d565b80156103915780601f1061036657610100808354040283529160200191610391565b820191906000526020600020905b81548152906001019060200180831161037457829003601f168201915b505050505081565b3360008181526004602090815260408083206001600160a01b038716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906103f49086815260200190565b60405180910390a350600192915050565b3360009081526006602052604090205460ff1661043d5760405162461bcd60e51b815260040161043490610bfb565b60405180910390fd5b6001600160a01b038216600081815260066020908152604091829020805460ff191685151590811790915591519182527fe95aec380cae16330d146d5499ef7db6f3657e477104a733e771bc09e500d98691015b60405180910390a25050565b6001600160a01b038316600090815260046020908152604080832033845290915281205460001914610502576001600160a01b0384166000908152600460209081526040808320338452909152812080548492906104fc908490610c36565b90915550505b6001600160a01b0384166000908152600360205260408120805484929061052a908490610c36565b90915550506001600160a01b0380841660008181526003602052604090819020805486019055519091861690600080516020610cba833981519152906105739086815260200190565b60405180910390a35060019392505050565b3360009081526006602052604090205460ff166105b45760405162461bcd60e51b815260040161043490610bfb565b6105be8282610964565b816001600160a01b03167f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d41213968858260405161049191815260200190565b6001805461031890610c4d565b3360009081526006602052604090205460ff166106355760405162461bcd60e51b815260040161043490610bfb565b61063f82826109be565b816001600160a01b03167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca58260405161049191815260200190565b3360009081526003602052604081208054839190839061069b908490610c36565b90915550506001600160a01b03831660008181526003602052604090819020805485019055513390600080516020610cba833981519152906103f49086815260200190565b4284101561072a5760405162461bcd60e51b815260206004820152601760248201527614115493525517d11150511312539157d1561412549151604a1b6044820152606401610434565b6001600160a01b038716600090815260056020526040812080547f0000000000000000000000000000000000000000000000000000000000000000917f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9918b918b918b918761079883610c88565b909155506040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810187905260e0016040516020818303038152906040528051906020012060405160200161081192919061190160f01b81526002810192909252602282015260420190565b60408051601f198184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa15801561087c573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116158015906108b25750886001600160a01b0316816001600160a01b0316145b6108f95760405162461bcd60e51b8152602060048201526018602482015277494e56414c49445f5045524d49545f5349474e415455524560401b6044820152606401610434565b6001600160a01b0381811660009081526004602090815260408083208c8516808552908352928190208b9055518a815291928c16917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050505050505050565b80600260008282546109769190610c1e565b90915550506001600160a01b038216600081815260036020908152604080832080548601905551848152600080516020610cba83398151915291015b60405180910390a35050565b6001600160a01b038216600090815260036020526040812080548392906109e6908490610c36565b90915550506002805482900390556040518181526000906001600160a01b03841690600080516020610cba833981519152906020016109b2565b80356001600160a01b0381168114610a3757600080fd5b919050565b600060208284031215610a4e57600080fd5b610a5782610a20565b9392505050565b60008060408385031215610a7157600080fd5b610a7a83610a20565b9150610a8860208401610a20565b90509250929050565b600080600060608486031215610aa657600080fd5b610aaf84610a20565b9250610abd60208501610a20565b9150604084013590509250925092565b600080600080600080600060e0888a031215610ae857600080fd5b610af188610a20565b9650610aff60208901610a20565b95506040880135945060608801359350608088013560ff81168114610b2357600080fd5b9699959850939692959460a0840135945060c09093013592915050565b60008060408385031215610b5357600080fd5b610b5c83610a20565b915060208301358015158114610b7157600080fd5b809150509250929050565b60008060408385031215610b8f57600080fd5b610b9883610a20565b946020939093013593505050565b600060208083528351808285015260005b81811015610bd357858101830151858201604001528201610bb7565b81811115610be5576000604083870101525b50601f01601f1916929092016040019392505050565b602080825260099082015268155395149554d5115160ba1b604082015260600190565b60008219821115610c3157610c31610ca3565b500190565b600082821015610c4857610c48610ca3565b500390565b600181811c90821680610c6157607f821691505b60208210811415610c8257634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415610c9c57610c9c610ca3565b5060010190565b634e487b7160e01b600052601160045260246000fdfeddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220b064919c07d1015f3f2025335e0a96eb30cae60111a6c327aaa1c351574d714264736f6c6343000806003360e06040523480156200001157600080fd5b506040516200164938038062001649833981016040819052620000349162000365565b82828233838383826000908051906020019062000053929190620001eb565b50815162000069906001906020850190620001eb565b507fff0000000000000000000000000000000000000000000000000000000000000060f882901b166080526040517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f90620000c79060009062000419565b60408051918290038220828201825260018352603160f81b6020938401528151928301939093528101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c00160408051601f19818403018152828252805160209182012060a0526001600160a01b03871660008181526006835292909220805460ff1916600190811790915583529094507fe95aec380cae16330d146d5499ef7db6f3657e477104a733e771bc09e500d986935001905060405180910390a250620001aa81600a62000506565b60c0525050506007959095555050600880546001600160a01b039384166001600160a01b03199182161790915560098054929093169116179055506200063d565b828054620001f990620005d4565b90600052602060002090601f0160209004810192826200021d576000855562000268565b82601f106200023857805160ff191683800117855562000268565b8280016001018555821562000268579182015b82811115620002685782518255916020019190600101906200024b565b50620002769291506200027a565b5090565b5b808211156200027657600081556001016200027b565b80516001600160a01b0381168114620002a957600080fd5b919050565b600082601f830112620002c057600080fd5b81516001600160401b0380821115620002dd57620002dd62000627565b604051601f8301601f19908116603f0116810190828211818310171562000308576200030862000627565b816040528381526020925086838588010111156200032557600080fd5b600091505b838210156200034957858201830151818301840152908201906200032a565b838211156200035b5760008385830101525b9695505050505050565b60008060008060008060c087890312156200037f57600080fd5b86519550620003916020880162000291565b9450620003a16040880162000291565b60608801519094506001600160401b0380821115620003bf57600080fd5b620003cd8a838b01620002ae565b94506080890151915080821115620003e457600080fd5b50620003f389828a01620002ae565b92505060a087015160ff811681146200040b57600080fd5b809150509295509295509295565b600080835481600182811c9150808316806200043657607f831692505b60208084108214156200045757634e487b7160e01b86526022600452602486fd5b8180156200046e57600181146200048057620004af565b60ff19861689528489019650620004af565b60008a81526020902060005b86811015620004a75781548b8201529085019083016200048c565b505084890196505b509498975050505050505050565b600181815b80851115620004fe578160001904821115620004e257620004e262000611565b80851615620004f057918102915b93841c9390800290620004c2565b509250929050565b60006200051760ff8416836200051e565b9392505050565b6000826200052f57506001620005ce565b816200053e57506000620005ce565b8160018114620005575760028114620005625762000582565b6001915050620005ce565b60ff84111562000576576200057662000611565b50506001821b620005ce565b5060208310610133831016604e8410600b8410161715620005a7575081810a620005ce565b620005b38383620004bd565b8060001904821115620005ca57620005ca62000611565b0290505b92915050565b600181811c90821680620005e957607f821691505b602082108114156200060b57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b60805160f81c60a05160c051610fd262000677600039600061018d01526000818161025c01526107e1015260006102230152610fd26000f3fe608060405234801561001057600080fd5b50600436106101425760003560e01c806337a7b7d8116100b857806396d648791161007c57806396d64879146103175780639dc29fac1461033a578063a9059cbb1461034d578063d505accf14610360578063dd62ed3e14610373578063e52253811461039e57600080fd5b806337a7b7d8146102a957806340c10f19146102bc57806370a08231146102cf5780637ecebe00146102ef57806395d89b411461030f57600080fd5b8063204f83f91161010a578063204f83f9146101db57806323b872dd146101e457806330adf81f146101f7578063313ce5671461021e5780633644e51514610257578063378efa371461027e57600080fd5b806306fdde0314610147578063095ea7b3146101655780630e962f00146101885780631393916a146101bd57806318160ddd146101d2575b600080fd5b61014f6103a6565b60405161015c9190610e69565b60405180910390f35b610178610173366004610dfb565b610434565b604051901515815260200161015c565b6101af7f000000000000000000000000000000000000000000000000000000000000000081565b60405190815260200161015c565b6101d06101cb366004610dbf565b6104a0565b005b6101af60025481565b6101af60075481565b6101786101f2366004610d10565b610538565b6101af7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b6102457f000000000000000000000000000000000000000000000000000000000000000081565b60405160ff909116815260200161015c565b6101af7f000000000000000000000000000000000000000000000000000000000000000081565b600854610291906001600160a01b031681565b6040516001600160a01b03909116815260200161015c565b600954610291906001600160a01b031681565b6101d06102ca366004610dfb565b6105e0565b6101af6102dd366004610cbb565b60036020526000908152604090205481565b6101af6102fd366004610cbb565b60056020526000908152604090205481565b61014f610654565b610178610325366004610cbb565b60066020526000908152604090205460ff1681565b6101d0610348366004610dfb565b610661565b61017861035b366004610dfb565b6106d5565b6101d061036e366004610d4c565b61077b565b6101af610381366004610cdd565b600460209081526000928352604080842090915290825290205481565b6101af6109ff565b600080546103b390610f10565b80601f01602080910402602001604051908101604052809291908181526020018280546103df90610f10565b801561042c5780601f106104015761010080835404028352916020019161042c565b820191906000526020600020905b81548152906001019060200180831161040f57829003601f168201915b505050505081565b3360008181526004602090815260408083206001600160a01b038716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259061048f9086815260200190565b60405180910390a350600192915050565b3360009081526006602052604090205460ff166104d85760405162461bcd60e51b81526004016104cf90610ebe565b60405180910390fd5b6001600160a01b038216600081815260066020908152604091829020805460ff191685151590811790915591519182527fe95aec380cae16330d146d5499ef7db6f3657e477104a733e771bc09e500d98691015b60405180910390a25050565b600854600954600754604051630f126f8360e21b81526000936001600160a01b0390811693633c49be0c93610577938a93909216918990600401610e3e565b602060405180830381600087803b15801561059157600080fd5b505af11580156105a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c99190610e25565b506105d5848484610a95565b506001949350505050565b3360009081526006602052604090205460ff1661060f5760405162461bcd60e51b81526004016104cf90610ebe565b6106198282610b7d565b816001600160a01b03167f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d41213968858260405161052c91815260200190565b600180546103b390610f10565b3360009081526006602052604090205460ff166106905760405162461bcd60e51b81526004016104cf90610ebe565b61069a8282610bd7565b816001600160a01b03167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca58260405161052c91815260200190565b600854600954600754604051630f126f8360e21b81526000936001600160a01b0390811693633c49be0c93610714933393909216918990600401610e3e565b602060405180830381600087803b15801561072e57600080fd5b505af1158015610742573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107669190610e25565b506107718383610c39565b5060019392505050565b428410156107c55760405162461bcd60e51b815260206004820152601760248201527614115493525517d11150511312539157d1561412549151604a1b60448201526064016104cf565b6001600160a01b038716600090815260056020526040812080547f0000000000000000000000000000000000000000000000000000000000000000917f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9918b918b918b918761083383610f4b565b909155506040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810187905260e001604051602081830303815290604052805190602001206040516020016108ac92919061190160f01b81526002810192909252602282015260420190565b60408051601f198184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa158015610917573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381161580159061094d5750886001600160a01b0316816001600160a01b0316145b6109945760405162461bcd60e51b8152602060048201526018602482015277494e56414c49445f5045524d49545f5349474e415455524560401b60448201526064016104cf565b6001600160a01b0381811660009081526004602090815260408083208c8516808552908352928190208b9055518a815291928c16917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050505050505050565b600854600954600754604051630f126f8360e21b81526000936001600160a01b0390811693633c49be0c93610a3e933393909216918790600401610e3e565b602060405180830381600087803b158015610a5857600080fd5b505af1158015610a6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a909190610e25565b905090565b6001600160a01b038316600090815260046020908152604080832033845290915281205460001914610afa576001600160a01b038416600090815260046020908152604080832033845290915281208054849290610af4908490610ef9565b90915550505b6001600160a01b03841660009081526003602052604081208054849290610b22908490610ef9565b90915550506001600160a01b0380841660008181526003602052604090819020805486019055519091861690600080516020610f7d83398151915290610b6b9086815260200190565b60405180910390a35060019392505050565b8060026000828254610b8f9190610ee1565b90915550506001600160a01b038216600081815260036020908152604080832080548601905551848152600080516020610f7d83398151915291015b60405180910390a35050565b6001600160a01b03821660009081526003602052604081208054839290610bff908490610ef9565b90915550506002805482900390556040518181526000906001600160a01b03841690600080516020610f7d83398151915290602001610bcb565b33600090815260036020526040812080548391908390610c5a908490610ef9565b90915550506001600160a01b03831660008181526003602052604090819020805485019055513390600080516020610f7d8339815191529061048f9086815260200190565b80356001600160a01b0381168114610cb657600080fd5b919050565b600060208284031215610ccd57600080fd5b610cd682610c9f565b9392505050565b60008060408385031215610cf057600080fd5b610cf983610c9f565b9150610d0760208401610c9f565b90509250929050565b600080600060608486031215610d2557600080fd5b610d2e84610c9f565b9250610d3c60208501610c9f565b9150604084013590509250925092565b600080600080600080600060e0888a031215610d6757600080fd5b610d7088610c9f565b9650610d7e60208901610c9f565b95506040880135945060608801359350608088013560ff81168114610da257600080fd5b9699959850939692959460a0840135945060c09093013592915050565b60008060408385031215610dd257600080fd5b610ddb83610c9f565b915060208301358015158114610df057600080fd5b809150509250929050565b60008060408385031215610e0e57600080fd5b610e1783610c9f565b946020939093013593505050565b600060208284031215610e3757600080fd5b5051919050565b6001600160a01b03948516815292841660208401526040830191909152909116606082015260800190565b600060208083528351808285015260005b81811015610e9657858101830151858201604001528201610e7a565b81811115610ea8576000604083870101525b50601f01601f1916929092016040019392505050565b602080825260099082015268155395149554d5115160ba1b604082015260600190565b60008219821115610ef457610ef4610f66565b500190565b600082821015610f0b57610f0b610f66565b500390565b600181811c90821680610f2457607f821691505b60208210811415610f4557634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415610f5f57610f5f610f66565b5060010190565b634e487b7160e01b600052601160045260246000fdfeddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220e4b45e05437426ebe8aea4e381fe12a08cca3c5337a7103932b7a1a0fd57716864736f6c6343000806003343616e6e6f7420636f6c6c65637420696620536572696573206973206174206f72206166746572206d6174757269747920616e6420697420686173206e6f74206265656e20736574746c6564496e76616c696420666565642061646472657373206f722066656564206973206e6f7420656e61626c656443616e206e6f7420736574746c6520536572696573206f757473696465207468652074696d652077696e646f7720626f756e6461726965734e65772076616c7565206d75737420626520646966666572656e74207468616e2070726576696f757343616e6e6f742069737375652069662053657269657320697320736574746c6564536572696573207769746820676976656e206d6174757269747920616c72656164792065786973747353657269657320646f6573206e6f742065786973740000000000000000000000a2646970667358221220707e921d7fc18ae8c22b371993a1faf5f46761e6104f1b82c8a3cbca79aea40c64736f6c63430008060033",
  "devdoc": {
    "author": "fedealconada + jparklev",
    "kind": "dev",
    "methods": {
      "backfillScale(address,uint256,uint256,(address,uint256)[])": {
        "params": {
          "backfills": "Values to set on lscales mapping",
          "feed": "Feed's address",
          "maturity": "Maturity date for the Series",
          "mscale": "Value to set as the Series' Scale value at maturity"
        }
      },
      "collect(address,address,uint256,address)": {
        "details": "Burns the claim tokens if it's currently at or after maturity as this will be the last possible collectIf `to` is set, we copy the lscale value from usr to this address",
        "params": {
          "feed": "Feed address for the Series",
          "maturity": "Maturity date for the Series",
          "to": "address to set the lscale value from usr",
          "usr": "User who's collecting for their Claims"
        }
      },
      "combine(address,uint256,uint256)": {
        "details": "Explicitly burns claims before maturity, and implicitly does it at/after maturity through collect()",
        "params": {
          "feed": "Feed address for the Series",
          "maturity": "Maturity date for the Series",
          "uBal": "Balance of Zeros and Claims to burn"
        }
      },
      "initSeries(address,uint256)": {
        "details": "Deploys two ERC20 contracts, one for each Zero typeTransfers some fixed amount of stable asset to this contract",
        "params": {
          "feed": "Feed to associate with the Series",
          "maturity": "Maturity date for the new Series, in units of unix time"
        }
      },
      "issue(address,uint256,uint256)": {
        "params": {
          "feed": "Feed address for the Series",
          "maturity": "Maturity date for the Series",
          "tBal": "Balance of Target to deposit the amount of Zeros/Claims minted will be the equivelent value in units of underlying (less fees)"
        }
      },
      "redeemZero(address,uint256,uint256)": {
        "details": "The balance of redeemable Target is a function of the change in Scale",
        "params": {
          "feed": "Feed address for the Series",
          "maturity": "Maturity date for the Series",
          "uBal": "Amount of Zeros to burn, which should be equivelent to the amount of Underlying owed to the caller"
        }
      },
      "setFeed(address,bool)": {
        "params": {
          "feed": "Feed's address",
          "isOn": "Flag setting this feed to enabled or disabled"
        }
      },
      "setGuard(address,uint256)": {
        "params": {
          "cap": "The max target that can be deposited on the Divider",
          "target": "Target address"
        }
      },
      "setWrapper(address)": {
        "params": {
          "wtarget": "Wrapped Target address"
        }
      },
      "settleSeries(address,uint256)": {
        "details": "The Series' sponsor has a buffer where only they can settle the SeriesAfter the buffer, the reward becomes MEV",
        "params": {
          "feed": "Feed to associate with the Series",
          "maturity": "Maturity date for the new Series"
        }
      }
    },
    "title": "Sense Divider: Divide Assets in Two",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "ISSUANCE_FEE()": {
        "notice": "Configuration"
      },
      "backfillScale(address,uint256,uint256,(address,uint256)[])": {
        "notice": "Backfill a Series' Scale value at maturity if keepers failed to settle it"
      },
      "collect(address,address,uint256,address)": {
        "notice": "Collect Claim excess before, at, or after maturity"
      },
      "combine(address,uint256,uint256)": {
        "notice": "Reconstitute Target by burning Zeros and Claims"
      },
      "initSeries(address,uint256)": {
        "notice": "Initializes a new Series"
      },
      "issue(address,uint256,uint256)": {
        "notice": "Mint Zeros and Claims of a specific Series"
      },
      "redeemZero(address,uint256,uint256)": {
        "notice": "Burn Zeros of a Series once its been settled"
      },
      "setFeed(address,bool)": {
        "notice": "Enable or disable a feed"
      },
      "setGuard(address,uint256)": {
        "notice": "Set target's guard"
      },
      "setWrapper(address)": {
        "notice": "Adds wrapped target to wtargets mapping"
      },
      "settleSeries(address,uint256)": {
        "notice": "Settles a Series and transfer the settlement reward to the caller"
      },
      "stable()": {
        "notice": "Mutable program state"
      }
    },
    "notice": "You can use this contract to issue, combine, and redeem Sense ERC20 Zeros and Claims",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 138,
        "contract": "src/Divider.sol:Divider",
        "label": "isTrusted",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 798,
        "contract": "src/Divider.sol:Divider",
        "label": "stable",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 800,
        "contract": "src/Divider.sol:Divider",
        "label": "cup",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 804,
        "contract": "src/Divider.sol:Divider",
        "label": "feeds",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 808,
        "contract": "src/Divider.sol:Divider",
        "label": "guards",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 812,
        "contract": "src/Divider.sol:Divider",
        "label": "wtargets",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 819,
        "contract": "src/Divider.sol:Divider",
        "label": "series",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Series)842_storage))"
      },
      {
        "astId": 827,
        "contract": "src/Divider.sol:Divider",
        "label": "lscales",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_uint256)))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_uint256)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => mapping(address => uint256)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(Series)842_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct Divider.Series))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Series)842_storage)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(Series)842_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Divider.Series)",
        "numberOfBytes": "32",
        "value": "t_struct(Series)842_storage"
      },
      "t_struct(Series)842_storage": {
        "encoding": "inplace",
        "label": "struct Divider.Series",
        "members": [
          {
            "astId": 829,
            "contract": "src/Divider.sol:Divider",
            "label": "zero",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 831,
            "contract": "src/Divider.sol:Divider",
            "label": "claim",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 833,
            "contract": "src/Divider.sol:Divider",
            "label": "sponsor",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 835,
            "contract": "src/Divider.sol:Divider",
            "label": "issuance",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 837,
            "contract": "src/Divider.sol:Divider",
            "label": "reward",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 839,
            "contract": "src/Divider.sol:Divider",
            "label": "iscale",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 841,
            "contract": "src/Divider.sol:Divider",
            "label": "mscale",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}